
DexsF401Macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f74  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001cc  20000000  08005260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b2c  200001cc  0800542c  000201cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000cf8  0800542c  00020cf8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021e3b  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003f3a  00000000  00000000  00042037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00012870  00000000  00000000  00045f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000016b8  00000000  00000000  000587e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015a8  00000000  00000000  00059ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a4f3  00000000  00000000  0005b448  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006e86  00000000  00000000  0006593b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006c7c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000410c  00000000  00000000  0006c840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001cc 	.word	0x200001cc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080050f0 	.word	0x080050f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001d0 	.word	0x200001d0
 80001d0:	080050f0 	.word	0x080050f0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b97a 	b.w	80004f0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	468c      	mov	ip, r1
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	9e08      	ldr	r6, [sp, #32]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d151      	bne.n	80002c8 <__udivmoddi4+0xb4>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d96d      	bls.n	8000306 <__udivmoddi4+0xf2>
 800022a:	fab2 fe82 	clz	lr, r2
 800022e:	f1be 0f00 	cmp.w	lr, #0
 8000232:	d00b      	beq.n	800024c <__udivmoddi4+0x38>
 8000234:	f1ce 0c20 	rsb	ip, lr, #32
 8000238:	fa01 f50e 	lsl.w	r5, r1, lr
 800023c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000240:	fa02 f70e 	lsl.w	r7, r2, lr
 8000244:	ea4c 0c05 	orr.w	ip, ip, r5
 8000248:	fa00 f40e 	lsl.w	r4, r0, lr
 800024c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000250:	0c25      	lsrs	r5, r4, #16
 8000252:	fbbc f8fa 	udiv	r8, ip, sl
 8000256:	fa1f f987 	uxth.w	r9, r7
 800025a:	fb0a cc18 	mls	ip, sl, r8, ip
 800025e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000262:	fb08 f309 	mul.w	r3, r8, r9
 8000266:	42ab      	cmp	r3, r5
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x6c>
 800026a:	19ed      	adds	r5, r5, r7
 800026c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000270:	f080 8123 	bcs.w	80004ba <__udivmoddi4+0x2a6>
 8000274:	42ab      	cmp	r3, r5
 8000276:	f240 8120 	bls.w	80004ba <__udivmoddi4+0x2a6>
 800027a:	f1a8 0802 	sub.w	r8, r8, #2
 800027e:	443d      	add	r5, r7
 8000280:	1aed      	subs	r5, r5, r3
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb5 f0fa 	udiv	r0, r5, sl
 8000288:	fb0a 5510 	mls	r5, sl, r0, r5
 800028c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000290:	fb00 f909 	mul.w	r9, r0, r9
 8000294:	45a1      	cmp	r9, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x98>
 8000298:	19e4      	adds	r4, r4, r7
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 810a 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80002a2:	45a1      	cmp	r9, r4
 80002a4:	f240 8107 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	eba4 0409 	sub.w	r4, r4, r9
 80002b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b4:	2100      	movs	r1, #0
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	d061      	beq.n	800037e <__udivmoddi4+0x16a>
 80002ba:	fa24 f40e 	lsr.w	r4, r4, lr
 80002be:	2300      	movs	r3, #0
 80002c0:	6034      	str	r4, [r6, #0]
 80002c2:	6073      	str	r3, [r6, #4]
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xc8>
 80002cc:	2e00      	cmp	r6, #0
 80002ce:	d054      	beq.n	800037a <__udivmoddi4+0x166>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	f040 808e 	bne.w	8000402 <__udivmoddi4+0x1ee>
 80002e6:	42ab      	cmp	r3, r5
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xdc>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2d0>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb65 0503 	sbc.w	r5, r5, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	46ac      	mov	ip, r5
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d03f      	beq.n	800037e <__udivmoddi4+0x16a>
 80002fe:	e886 1010 	stmia.w	r6, {r4, ip}
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b912      	cbnz	r2, 800030e <__udivmoddi4+0xfa>
 8000308:	2701      	movs	r7, #1
 800030a:	fbb7 f7f2 	udiv	r7, r7, r2
 800030e:	fab7 fe87 	clz	lr, r7
 8000312:	f1be 0f00 	cmp.w	lr, #0
 8000316:	d134      	bne.n	8000382 <__udivmoddi4+0x16e>
 8000318:	1beb      	subs	r3, r5, r7
 800031a:	0c3a      	lsrs	r2, r7, #16
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	2101      	movs	r1, #1
 8000322:	fbb3 f8f2 	udiv	r8, r3, r2
 8000326:	0c25      	lsrs	r5, r4, #16
 8000328:	fb02 3318 	mls	r3, r2, r8, r3
 800032c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000330:	fb0c f308 	mul.w	r3, ip, r8
 8000334:	42ab      	cmp	r3, r5
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x134>
 8000338:	19ed      	adds	r5, r5, r7
 800033a:	f108 30ff 	add.w	r0, r8, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x132>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f200 80d1 	bhi.w	80004e8 <__udivmoddi4+0x2d4>
 8000346:	4680      	mov	r8, r0
 8000348:	1aed      	subs	r5, r5, r3
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000350:	fb02 5510 	mls	r5, r2, r0, r5
 8000354:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000358:	fb0c fc00 	mul.w	ip, ip, r0
 800035c:	45a4      	cmp	ip, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x15c>
 8000360:	19e4      	adds	r4, r4, r7
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x15a>
 8000368:	45a4      	cmp	ip, r4
 800036a:	f200 80b8 	bhi.w	80004de <__udivmoddi4+0x2ca>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000378:	e79d      	b.n	80002b6 <__udivmoddi4+0xa2>
 800037a:	4631      	mov	r1, r6
 800037c:	4630      	mov	r0, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	f1ce 0420 	rsb	r4, lr, #32
 8000386:	fa05 f30e 	lsl.w	r3, r5, lr
 800038a:	fa07 f70e 	lsl.w	r7, r7, lr
 800038e:	fa20 f804 	lsr.w	r8, r0, r4
 8000392:	0c3a      	lsrs	r2, r7, #16
 8000394:	fa25 f404 	lsr.w	r4, r5, r4
 8000398:	ea48 0803 	orr.w	r8, r8, r3
 800039c:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a4:	fb02 4411 	mls	r4, r2, r1, r4
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b0:	fb01 f30c 	mul.w	r3, r1, ip
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1bc>
 80003bc:	19ed      	adds	r5, r5, r7
 80003be:	f101 30ff 	add.w	r0, r1, #4294967295
 80003c2:	f080 808a 	bcs.w	80004da <__udivmoddi4+0x2c6>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	f240 8087 	bls.w	80004da <__udivmoddi4+0x2c6>
 80003cc:	3902      	subs	r1, #2
 80003ce:	443d      	add	r5, r7
 80003d0:	1aeb      	subs	r3, r5, r3
 80003d2:	fa1f f588 	uxth.w	r5, r8
 80003d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003da:	fb02 3310 	mls	r3, r2, r0, r3
 80003de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003e2:	fb00 f30c 	mul.w	r3, r0, ip
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1e6>
 80003ea:	19ed      	adds	r5, r5, r7
 80003ec:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f0:	d26f      	bcs.n	80004d2 <__udivmoddi4+0x2be>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d96d      	bls.n	80004d2 <__udivmoddi4+0x2be>
 80003f6:	3802      	subs	r0, #2
 80003f8:	443d      	add	r5, r7
 80003fa:	1aeb      	subs	r3, r5, r3
 80003fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000400:	e78f      	b.n	8000322 <__udivmoddi4+0x10e>
 8000402:	f1c1 0720 	rsb	r7, r1, #32
 8000406:	fa22 f807 	lsr.w	r8, r2, r7
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 f401 	lsl.w	r4, r5, r1
 8000410:	ea48 0303 	orr.w	r3, r8, r3
 8000414:	fa20 fe07 	lsr.w	lr, r0, r7
 8000418:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800041c:	40fd      	lsrs	r5, r7
 800041e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000422:	fbb5 f9fc 	udiv	r9, r5, ip
 8000426:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800042a:	fb0c 5519 	mls	r5, ip, r9, r5
 800042e:	fa1f f883 	uxth.w	r8, r3
 8000432:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000436:	fb09 f408 	mul.w	r4, r9, r8
 800043a:	42ac      	cmp	r4, r5
 800043c:	fa02 f201 	lsl.w	r2, r2, r1
 8000440:	fa00 fa01 	lsl.w	sl, r0, r1
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x244>
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d243      	bcs.n	80004d6 <__udivmoddi4+0x2c2>
 800044e:	42ac      	cmp	r4, r5
 8000450:	d941      	bls.n	80004d6 <__udivmoddi4+0x2c2>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	441d      	add	r5, r3
 8000458:	1b2d      	subs	r5, r5, r4
 800045a:	fa1f fe8e 	uxth.w	lr, lr
 800045e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000462:	fb0c 5510 	mls	r5, ip, r0, r5
 8000466:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45a0      	cmp	r8, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x26e>
 8000472:	18e4      	adds	r4, r4, r3
 8000474:	f100 35ff 	add.w	r5, r0, #4294967295
 8000478:	d229      	bcs.n	80004ce <__udivmoddi4+0x2ba>
 800047a:	45a0      	cmp	r8, r4
 800047c:	d927      	bls.n	80004ce <__udivmoddi4+0x2ba>
 800047e:	3802      	subs	r0, #2
 8000480:	441c      	add	r4, r3
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba4 0408 	sub.w	r4, r4, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454c      	cmp	r4, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	464d      	mov	r5, r9
 8000494:	d315      	bcc.n	80004c2 <__udivmoddi4+0x2ae>
 8000496:	d012      	beq.n	80004be <__udivmoddi4+0x2aa>
 8000498:	b156      	cbz	r6, 80004b0 <__udivmoddi4+0x29c>
 800049a:	ebba 030e 	subs.w	r3, sl, lr
 800049e:	eb64 0405 	sbc.w	r4, r4, r5
 80004a2:	fa04 f707 	lsl.w	r7, r4, r7
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431f      	orrs	r7, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	6037      	str	r7, [r6, #0]
 80004ae:	6074      	str	r4, [r6, #4]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	4618      	mov	r0, r3
 80004b8:	e6f8      	b.n	80002ac <__udivmoddi4+0x98>
 80004ba:	4690      	mov	r8, r2
 80004bc:	e6e0      	b.n	8000280 <__udivmoddi4+0x6c>
 80004be:	45c2      	cmp	sl, r8
 80004c0:	d2ea      	bcs.n	8000498 <__udivmoddi4+0x284>
 80004c2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7e4      	b.n	8000498 <__udivmoddi4+0x284>
 80004ce:	4628      	mov	r0, r5
 80004d0:	e7d7      	b.n	8000482 <__udivmoddi4+0x26e>
 80004d2:	4640      	mov	r0, r8
 80004d4:	e791      	b.n	80003fa <__udivmoddi4+0x1e6>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e7be      	b.n	8000458 <__udivmoddi4+0x244>
 80004da:	4601      	mov	r1, r0
 80004dc:	e778      	b.n	80003d0 <__udivmoddi4+0x1bc>
 80004de:	3802      	subs	r0, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	e745      	b.n	8000370 <__udivmoddi4+0x15c>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xe6>
 80004e8:	f1a8 0802 	sub.w	r8, r8, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	e72b      	b.n	8000348 <__udivmoddi4+0x134>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b510      	push	{r4, lr}
 80004f6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_InitTick+0x40>)
 80004fa:	7818      	ldrb	r0, [r3, #0]
 80004fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000500:	fbb3 f3f0 	udiv	r3, r3, r0
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <HAL_InitTick+0x44>)
 8000506:	6810      	ldr	r0, [r2, #0]
 8000508:	fbb0 f0f3 	udiv	r0, r0, r3
 800050c:	f000 f8aa 	bl	8000664 <HAL_SYSTICK_Config>
 8000510:	b968      	cbnz	r0, 800052e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000512:	2c0f      	cmp	r4, #15
 8000514:	d901      	bls.n	800051a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000516:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000518:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051a:	2200      	movs	r2, #0
 800051c:	4621      	mov	r1, r4
 800051e:	f04f 30ff 	mov.w	r0, #4294967295
 8000522:	f000 f85f 	bl	80005e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <HAL_InitTick+0x48>)
 8000528:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800052a:	2000      	movs	r0, #0
 800052c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800052e:	2001      	movs	r0, #1
 8000530:	bd10      	pop	{r4, pc}
 8000532:	bf00      	nop
 8000534:	20000000 	.word	0x20000000
 8000538:	20000114 	.word	0x20000114
 800053c:	20000004 	.word	0x20000004

08000540 <HAL_Init>:
{
 8000540:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <HAL_Init+0x30>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000552:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 f82f 	bl	80005c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff ffc6 	bl	80004f4 <HAL_InitTick>
  HAL_MspInit();
 8000568:	f004 f910 	bl	800478c <HAL_MspInit>
}
 800056c:	2000      	movs	r0, #0
 800056e:	bd08      	pop	{r3, pc}
 8000570:	40023c00 	.word	0x40023c00

08000574 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <HAL_IncTick+0x10>)
 8000576:	6811      	ldr	r1, [r2, #0]
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <HAL_IncTick+0x14>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	440b      	add	r3, r1
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	200001f8 	.word	0x200001f8
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <HAL_GetTick+0x8>)
 800058e:	6818      	ldr	r0, [r3, #0]
}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	200001f8 	.word	0x200001f8

08000598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000598:	b538      	push	{r3, r4, r5, lr}
 800059a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff fff6 	bl	800058c <HAL_GetTick>
 80005a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80005a6:	d002      	beq.n	80005ae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_Delay+0x24>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ae:	f7ff ffed 	bl	800058c <HAL_GetTick>
 80005b2:	1b40      	subs	r0, r0, r5
 80005b4:	4284      	cmp	r4, r0
 80005b6:	d8fa      	bhi.n	80005ae <HAL_Delay+0x16>
  {
  }
}
 80005b8:	bd38      	pop	{r3, r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005c8:	041b      	lsls	r3, r3, #16
 80005ca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	0200      	lsls	r0, r0, #8
 80005ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005d4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005d8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005dc:	60d0      	str	r0, [r2, #12]
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005e4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_NVIC_SetPriority+0x5c>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ee:	f1c3 0407 	rsb	r4, r3, #7
 80005f2:	2c04      	cmp	r4, #4
 80005f4:	bf28      	it	cs
 80005f6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	1d1d      	adds	r5, r3, #4
 80005fa:	2d06      	cmp	r5, #6
 80005fc:	d917      	bls.n	800062e <HAL_NVIC_SetPriority+0x4a>
 80005fe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	2501      	movs	r5, #1
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4021      	ands	r1, r4
 800060a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060c:	fa05 f303 	lsl.w	r3, r5, r3
 8000610:	3b01      	subs	r3, #1
 8000612:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000616:	2800      	cmp	r0, #0
 8000618:	db0b      	blt.n	8000632 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	0109      	lsls	r1, r1, #4
 800061c:	b2c9      	uxtb	r1, r1
 800061e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000622:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000626:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800062a:	bc30      	pop	{r4, r5}
 800062c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	2300      	movs	r3, #0
 8000630:	e7e6      	b.n	8000600 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	f000 000f 	and.w	r0, r0, #15
 8000636:	0109      	lsls	r1, r1, #4
 8000638:	b2c9      	uxtb	r1, r1
 800063a:	4b02      	ldr	r3, [pc, #8]	; (8000644 <HAL_NVIC_SetPriority+0x60>)
 800063c:	5419      	strb	r1, [r3, r0]
 800063e:	e7f4      	b.n	800062a <HAL_NVIC_SetPriority+0x46>
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	e000ed14 	.word	0xe000ed14

08000648 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000648:	2800      	cmp	r0, #0
 800064a:	db08      	blt.n	800065e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064c:	0942      	lsrs	r2, r0, #5
 800064e:	f000 001f 	and.w	r0, r0, #31
 8000652:	2301      	movs	r3, #1
 8000654:	fa03 f000 	lsl.w	r0, r3, r0
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <HAL_NVIC_EnableIRQ+0x18>)
 800065a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100

08000664 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	3801      	subs	r0, #1
 8000666:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800066a:	d20a      	bcs.n	8000682 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_SYSTICK_Config+0x24>)
 800066e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	21f0      	movs	r1, #240	; 0xf0
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_SYSTICK_Config+0x28>)
 8000674:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000678:	2000      	movs	r0, #0
 800067a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067c:	2207      	movs	r2, #7
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000682:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e010 	.word	0xe000e010
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000690:	6802      	ldr	r2, [r0, #0]
 8000692:	b2d3      	uxtb	r3, r2
 8000694:	3b10      	subs	r3, #16
 8000696:	490b      	ldr	r1, [pc, #44]	; (80006c4 <DMA_CalcBaseAndBitshift+0x34>)
 8000698:	fba1 1303 	umull	r1, r3, r1, r3
 800069c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800069e:	490a      	ldr	r1, [pc, #40]	; (80006c8 <DMA_CalcBaseAndBitshift+0x38>)
 80006a0:	5cc9      	ldrb	r1, [r1, r3]
 80006a2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d806      	bhi.n	80006b6 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80006a8:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80006ac:	f022 0203 	bic.w	r2, r2, #3
 80006b0:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80006b2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006b4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80006b6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80006ba:	f022 0203 	bic.w	r2, r2, #3
 80006be:	3204      	adds	r2, #4
 80006c0:	6582      	str	r2, [r0, #88]	; 0x58
 80006c2:	e7f6      	b.n	80006b2 <DMA_CalcBaseAndBitshift+0x22>
 80006c4:	aaaaaaab 	.word	0xaaaaaaab
 80006c8:	08005108 	.word	0x08005108

080006cc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80006cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006ce:	6982      	ldr	r2, [r0, #24]
 80006d0:	b992      	cbnz	r2, 80006f8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d00a      	beq.n	80006ec <DMA_CheckFifoParam+0x20>
 80006d6:	b11b      	cbz	r3, 80006e0 <DMA_CheckFifoParam+0x14>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d001      	beq.n	80006e0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80006dc:	2000      	movs	r0, #0
 80006de:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80006e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80006e6:	d12c      	bne.n	8000742 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80006e8:	2000      	movs	r0, #0
 80006ea:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80006ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80006ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80006f2:	d028      	beq.n	8000746 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80006f4:	2000      	movs	r0, #0
 80006f6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80006f8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80006fc:	d005      	beq.n	800070a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d929      	bls.n	8000756 <DMA_CheckFifoParam+0x8a>
 8000702:	2b03      	cmp	r3, #3
 8000704:	d015      	beq.n	8000732 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8000706:	2000      	movs	r0, #0
 8000708:	4770      	bx	lr
    switch (tmp)
 800070a:	2b03      	cmp	r3, #3
 800070c:	d803      	bhi.n	8000716 <DMA_CheckFifoParam+0x4a>
 800070e:	e8df f003 	tbb	[pc, r3]
 8000712:	041c      	.short	0x041c
 8000714:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8000716:	2000      	movs	r0, #0
 8000718:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800071a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800071c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000720:	d115      	bne.n	800074e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000722:	2000      	movs	r0, #0
 8000724:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000726:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000728:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800072c:	d011      	beq.n	8000752 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800072e:	2000      	movs	r0, #0
 8000730:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000732:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000734:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000738:	d001      	beq.n	800073e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800073a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800073c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800073e:	2000      	movs	r0, #0
 8000740:	4770      	bx	lr
        status = HAL_ERROR;
 8000742:	2001      	movs	r0, #1
 8000744:	4770      	bx	lr
        status = HAL_ERROR;
 8000746:	2001      	movs	r0, #1
 8000748:	4770      	bx	lr
      status = HAL_ERROR;
 800074a:	2001      	movs	r0, #1
 800074c:	4770      	bx	lr
        status = HAL_ERROR;
 800074e:	2001      	movs	r0, #1
 8000750:	4770      	bx	lr
        status = HAL_ERROR;
 8000752:	2001      	movs	r0, #1
 8000754:	4770      	bx	lr
      status = HAL_ERROR;
 8000756:	2001      	movs	r0, #1
 8000758:	4770      	bx	lr
	...

0800075c <HAL_DMA_Init>:
{
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000760:	f7ff ff14 	bl	800058c <HAL_GetTick>
  if(hdma == NULL)
 8000764:	2c00      	cmp	r4, #0
 8000766:	d05d      	beq.n	8000824 <HAL_DMA_Init+0xc8>
 8000768:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800076a:	2300      	movs	r3, #0
 800076c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000770:	2302      	movs	r3, #2
 8000772:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000776:	6822      	ldr	r2, [r4, #0]
 8000778:	6813      	ldr	r3, [r2, #0]
 800077a:	f023 0301 	bic.w	r3, r3, #1
 800077e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	f012 0f01 	tst.w	r2, #1
 8000788:	d00a      	beq.n	80007a0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800078a:	f7ff feff 	bl	800058c <HAL_GetTick>
 800078e:	1b40      	subs	r0, r0, r5
 8000790:	2805      	cmp	r0, #5
 8000792:	d9f5      	bls.n	8000780 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000794:	2320      	movs	r3, #32
 8000796:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000798:	2003      	movs	r0, #3
 800079a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800079e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80007a0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007a2:	4921      	ldr	r1, [pc, #132]	; (8000828 <HAL_DMA_Init+0xcc>)
 80007a4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007a6:	6862      	ldr	r2, [r4, #4]
 80007a8:	68a0      	ldr	r0, [r4, #8]
 80007aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007ac:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007ae:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007b0:	6920      	ldr	r0, [r4, #16]
 80007b2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007b4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007b6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007b8:	69a0      	ldr	r0, [r4, #24]
 80007ba:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80007bc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007be:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80007c0:	6a20      	ldr	r0, [r4, #32]
 80007c2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80007c8:	2904      	cmp	r1, #4
 80007ca:	d016      	beq.n	80007fa <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 80007cc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80007ce:	6826      	ldr	r6, [r4, #0]
 80007d0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007d2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80007d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007d8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d012      	beq.n	8000804 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 80007de:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff ff55 	bl	8000690 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007e8:	233f      	movs	r3, #63	; 0x3f
 80007ea:	4093      	lsls	r3, r2
 80007ec:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007ee:	2000      	movs	r0, #0
 80007f0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80007f2:	2301      	movs	r3, #1
 80007f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80007fe:	4301      	orrs	r1, r0
 8000800:	430a      	orrs	r2, r1
 8000802:	e7e3      	b.n	80007cc <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8000804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000806:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0e7      	beq.n	80007de <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff ff5c 	bl	80006cc <DMA_CheckFifoParam>
 8000814:	2800      	cmp	r0, #0
 8000816:	d0e2      	beq.n	80007de <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800081c:	2001      	movs	r0, #1
 800081e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000822:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000824:	2001      	movs	r0, #1
}
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	f010803f 	.word	0xf010803f

0800082c <HAL_DMA_IRQHandler>:
{
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	b083      	sub	sp, #12
 8000830:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000832:	2300      	movs	r3, #0
 8000834:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000836:	4b72      	ldr	r3, [pc, #456]	; (8000a00 <HAL_DMA_IRQHandler+0x1d4>)
 8000838:	681d      	ldr	r5, [r3, #0]
 800083a:	4b72      	ldr	r3, [pc, #456]	; (8000a04 <HAL_DMA_IRQHandler+0x1d8>)
 800083c:	fba3 3505 	umull	r3, r5, r3, r5
 8000840:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000842:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000844:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000846:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000848:	2308      	movs	r3, #8
 800084a:	4093      	lsls	r3, r2
 800084c:	421e      	tst	r6, r3
 800084e:	d010      	beq.n	8000872 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000850:	6803      	ldr	r3, [r0, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	f012 0f04 	tst.w	r2, #4
 8000858:	d00b      	beq.n	8000872 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	f022 0204 	bic.w	r2, r2, #4
 8000860:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000862:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000864:	2308      	movs	r3, #8
 8000866:	4093      	lsls	r3, r2
 8000868:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800086a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000872:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	421e      	tst	r6, r3
 800087a:	d009      	beq.n	8000890 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800087c:	6822      	ldr	r2, [r4, #0]
 800087e:	6952      	ldr	r2, [r2, #20]
 8000880:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000884:	d004      	beq.n	8000890 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000886:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000888:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000890:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000892:	2304      	movs	r3, #4
 8000894:	4093      	lsls	r3, r2
 8000896:	421e      	tst	r6, r3
 8000898:	d009      	beq.n	80008ae <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800089a:	6822      	ldr	r2, [r4, #0]
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	f012 0f02 	tst.w	r2, #2
 80008a2:	d004      	beq.n	80008ae <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80008a4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80008a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80008ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008b0:	2310      	movs	r3, #16
 80008b2:	4093      	lsls	r3, r2
 80008b4:	421e      	tst	r6, r3
 80008b6:	d024      	beq.n	8000902 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80008b8:	6822      	ldr	r2, [r4, #0]
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	f012 0f08 	tst.w	r2, #8
 80008c0:	d01f      	beq.n	8000902 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80008c2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80008cc:	d00d      	beq.n	80008ea <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80008d4:	d104      	bne.n	80008e0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80008d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d8:	b19b      	cbz	r3, 8000902 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80008da:	4620      	mov	r0, r4
 80008dc:	4798      	blx	r3
 80008de:	e010      	b.n	8000902 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80008e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80008e2:	b173      	cbz	r3, 8000902 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80008e4:	4620      	mov	r0, r4
 80008e6:	4798      	blx	r3
 80008e8:	e00b      	b.n	8000902 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	f412 7f80 	tst.w	r2, #256	; 0x100
 80008f0:	d103      	bne.n	80008fa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f022 0208 	bic.w	r2, r2, #8
 80008f8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80008fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008fc:	b10b      	cbz	r3, 8000902 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80008fe:	4620      	mov	r0, r4
 8000900:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000902:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000904:	2320      	movs	r3, #32
 8000906:	4093      	lsls	r3, r2
 8000908:	421e      	tst	r6, r3
 800090a:	d055      	beq.n	80009b8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800090c:	6822      	ldr	r2, [r4, #0]
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	f012 0f10 	tst.w	r2, #16
 8000914:	d050      	beq.n	80009b8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000916:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000918:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b05      	cmp	r3, #5
 8000920:	d00e      	beq.n	8000940 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800092a:	d033      	beq.n	8000994 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000932:	d12a      	bne.n	800098a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000934:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000936:	2b00      	cmp	r3, #0
 8000938:	d03e      	beq.n	80009b8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800093a:	4620      	mov	r0, r4
 800093c:	4798      	blx	r3
 800093e:	e03b      	b.n	80009b8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000940:	6822      	ldr	r2, [r4, #0]
 8000942:	6813      	ldr	r3, [r2, #0]
 8000944:	f023 0316 	bic.w	r3, r3, #22
 8000948:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800094a:	6822      	ldr	r2, [r4, #0]
 800094c:	6953      	ldr	r3, [r2, #20]
 800094e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000952:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000956:	b1a3      	cbz	r3, 8000982 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000958:	6822      	ldr	r2, [r4, #0]
 800095a:	6813      	ldr	r3, [r2, #0]
 800095c:	f023 0308 	bic.w	r3, r3, #8
 8000960:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000962:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000964:	233f      	movs	r3, #63	; 0x3f
 8000966:	4093      	lsls	r3, r2
 8000968:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800096a:	2300      	movs	r3, #0
 800096c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000970:	2301      	movs	r3, #1
 8000972:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000976:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000978:	2b00      	cmp	r3, #0
 800097a:	d03f      	beq.n	80009fc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800097c:	4620      	mov	r0, r4
 800097e:	4798      	blx	r3
 8000980:	e03c      	b.n	80009fc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000982:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1e7      	bne.n	8000958 <HAL_DMA_IRQHandler+0x12c>
 8000988:	e7eb      	b.n	8000962 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800098a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800098c:	b1a3      	cbz	r3, 80009b8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800098e:	4620      	mov	r0, r4
 8000990:	4798      	blx	r3
 8000992:	e011      	b.n	80009b8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	f412 7f80 	tst.w	r2, #256	; 0x100
 800099a:	d109      	bne.n	80009b0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	f022 0210 	bic.w	r2, r2, #16
 80009a2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80009a4:	2300      	movs	r3, #0
 80009a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80009b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009b2:	b10b      	cbz	r3, 80009b8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80009b4:	4620      	mov	r0, r4
 80009b6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80009b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009ba:	b1fb      	cbz	r3, 80009fc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80009bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009be:	f013 0f01 	tst.w	r3, #1
 80009c2:	d017      	beq.n	80009f4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80009c4:	2305      	movs	r3, #5
 80009c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80009ca:	6822      	ldr	r2, [r4, #0]
 80009cc:	6813      	ldr	r3, [r2, #0]
 80009ce:	f023 0301 	bic.w	r3, r3, #1
 80009d2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80009d4:	9b01      	ldr	r3, [sp, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	429d      	cmp	r5, r3
 80009dc:	d304      	bcc.n	80009e8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f013 0f01 	tst.w	r3, #1
 80009e6:	d1f5      	bne.n	80009d4 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80009e8:	2300      	movs	r3, #0
 80009ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80009f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80009f6:	b10b      	cbz	r3, 80009fc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80009f8:	4620      	mov	r0, r4
 80009fa:	4798      	blx	r3
}
 80009fc:	b003      	add	sp, #12
 80009fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a00:	20000114 	.word	0x20000114
 8000a04:	1b4e81b5 	.word	0x1b4e81b5

08000a08 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	f200 80cd 	bhi.w	8000baa <HAL_GPIO_Init+0x1a2>
{
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	e095      	b.n	8000b42 <HAL_GPIO_Init+0x13a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a16:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a18:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000a1c:	2703      	movs	r7, #3
 8000a1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000a22:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a26:	68ce      	ldr	r6, [r1, #12]
 8000a28:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a2c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000a2e:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a30:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a32:	ea25 0202 	bic.w	r2, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a36:	684d      	ldr	r5, [r1, #4]
 8000a38:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8000a3c:	409d      	lsls	r5, r3
 8000a3e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000a40:	6042      	str	r2, [r0, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a42:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a44:	005f      	lsls	r7, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	40ba      	lsls	r2, r7
 8000a4a:	43d2      	mvns	r2, r2
 8000a4c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a4e:	688d      	ldr	r5, [r1, #8]
 8000a50:	40bd      	lsls	r5, r7
 8000a52:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8000a54:	60c6      	str	r6, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a56:	684d      	ldr	r5, [r1, #4]
 8000a58:	2d02      	cmp	r5, #2
 8000a5a:	f000 8084 	beq.w	8000b66 <HAL_GPIO_Init+0x15e>
 8000a5e:	2d12      	cmp	r5, #18
 8000a60:	f000 8081 	beq.w	8000b66 <HAL_GPIO_Init+0x15e>
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a64:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a66:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a68:	684d      	ldr	r5, [r1, #4]
 8000a6a:	f005 0503 	and.w	r5, r5, #3
 8000a6e:	40bd      	lsls	r5, r7
 8000a70:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8000a72:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a74:	684a      	ldr	r2, [r1, #4]
 8000a76:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000a7a:	d05f      	beq.n	8000b3c <HAL_GPIO_Init+0x134>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	4a4a      	ldr	r2, [pc, #296]	; (8000bac <HAL_GPIO_Init+0x1a4>)
 8000a82:	6c55      	ldr	r5, [r2, #68]	; 0x44
 8000a84:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000a88:	6455      	str	r5, [r2, #68]	; 0x44
 8000a8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000a8c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a90:	9201      	str	r2, [sp, #4]
 8000a92:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a94:	089d      	lsrs	r5, r3, #2
 8000a96:	1cae      	adds	r6, r5, #2
 8000a98:	4a45      	ldr	r2, [pc, #276]	; (8000bb0 <HAL_GPIO_Init+0x1a8>)
 8000a9a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a9e:	f003 0603 	and.w	r6, r3, #3
 8000aa2:	00b6      	lsls	r6, r6, #2
 8000aa4:	270f      	movs	r7, #15
 8000aa6:	40b7      	lsls	r7, r6
 8000aa8:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aac:	4f41      	ldr	r7, [pc, #260]	; (8000bb4 <HAL_GPIO_Init+0x1ac>)
 8000aae:	42b8      	cmp	r0, r7
 8000ab0:	d071      	beq.n	8000b96 <HAL_GPIO_Init+0x18e>
 8000ab2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ab6:	42b8      	cmp	r0, r7
 8000ab8:	d06f      	beq.n	8000b9a <HAL_GPIO_Init+0x192>
 8000aba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000abe:	42b8      	cmp	r0, r7
 8000ac0:	d06d      	beq.n	8000b9e <HAL_GPIO_Init+0x196>
 8000ac2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ac6:	42b8      	cmp	r0, r7
 8000ac8:	d06b      	beq.n	8000ba2 <HAL_GPIO_Init+0x19a>
 8000aca:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ace:	42b8      	cmp	r0, r7
 8000ad0:	d05f      	beq.n	8000b92 <HAL_GPIO_Init+0x18a>
 8000ad2:	2707      	movs	r7, #7
 8000ad4:	fa07 f606 	lsl.w	r6, r7, r6
 8000ad8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ada:	3502      	adds	r5, #2
 8000adc:	4e34      	ldr	r6, [pc, #208]	; (8000bb0 <HAL_GPIO_Init+0x1a8>)
 8000ade:	f846 2025 	str.w	r2, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae2:	4a35      	ldr	r2, [pc, #212]	; (8000bb8 <HAL_GPIO_Init+0x1b0>)
 8000ae4:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ae6:	43e2      	mvns	r2, r4
 8000ae8:	ea05 0602 	and.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aec:	684f      	ldr	r7, [r1, #4]
 8000aee:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000af2:	d001      	beq.n	8000af8 <HAL_GPIO_Init+0xf0>
        {
          temp |= iocurrent;
 8000af4:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->IMR = temp;
 8000af8:	4d2f      	ldr	r5, [pc, #188]	; (8000bb8 <HAL_GPIO_Init+0x1b0>)
 8000afa:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000afc:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000afe:	ea02 0605 	and.w	r6, r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b02:	684f      	ldr	r7, [r1, #4]
 8000b04:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000b08:	d001      	beq.n	8000b0e <HAL_GPIO_Init+0x106>
        {
          temp |= iocurrent;
 8000b0a:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->EMR = temp;
 8000b0e:	4d2a      	ldr	r5, [pc, #168]	; (8000bb8 <HAL_GPIO_Init+0x1b0>)
 8000b10:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b12:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b14:	ea02 0605 	and.w	r6, r2, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b18:	684f      	ldr	r7, [r1, #4]
 8000b1a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b1e:	d001      	beq.n	8000b24 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8000b20:	ea44 0605 	orr.w	r6, r4, r5
        }
        EXTI->RTSR = temp;
 8000b24:	4d24      	ldr	r5, [pc, #144]	; (8000bb8 <HAL_GPIO_Init+0x1b0>)
 8000b26:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000b28:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b2a:	402a      	ands	r2, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	684e      	ldr	r6, [r1, #4]
 8000b2e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b32:	d001      	beq.n	8000b38 <HAL_GPIO_Init+0x130>
        {
          temp |= iocurrent;
 8000b34:	ea44 0205 	orr.w	r2, r4, r5
        }
        EXTI->FTSR = temp;
 8000b38:	4c1f      	ldr	r4, [pc, #124]	; (8000bb8 <HAL_GPIO_Init+0x1b0>)
 8000b3a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d831      	bhi.n	8000ba6 <HAL_GPIO_Init+0x19e>
    ioposition = 0x01U << position;
 8000b42:	2201      	movs	r2, #1
 8000b44:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b46:	680c      	ldr	r4, [r1, #0]
 8000b48:	4014      	ands	r4, r2
    if(iocurrent == ioposition)
 8000b4a:	42a2      	cmp	r2, r4
 8000b4c:	d1f6      	bne.n	8000b3c <HAL_GPIO_Init+0x134>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4e:	684d      	ldr	r5, [r1, #4]
 8000b50:	1e6e      	subs	r6, r5, #1
 8000b52:	2e01      	cmp	r6, #1
 8000b54:	f67f af5f 	bls.w	8000a16 <HAL_GPIO_Init+0xe>
 8000b58:	2d11      	cmp	r5, #17
 8000b5a:	f43f af5c 	beq.w	8000a16 <HAL_GPIO_Init+0xe>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5e:	2d12      	cmp	r5, #18
 8000b60:	f47f af6f 	bne.w	8000a42 <HAL_GPIO_Init+0x3a>
 8000b64:	e757      	b.n	8000a16 <HAL_GPIO_Init+0xe>
        temp = GPIOx->AFR[position >> 3U];
 8000b66:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000b6a:	f10e 0e08 	add.w	lr, lr, #8
 8000b6e:	f850 502e 	ldr.w	r5, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b72:	f003 0c07 	and.w	ip, r3, #7
 8000b76:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b7a:	260f      	movs	r6, #15
 8000b7c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000b80:	ea25 0506 	bic.w	r5, r5, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b84:	690e      	ldr	r6, [r1, #16]
 8000b86:	fa06 f60c 	lsl.w	r6, r6, ip
 8000b8a:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000b8c:	f840 502e 	str.w	r5, [r0, lr, lsl #2]
 8000b90:	e768      	b.n	8000a64 <HAL_GPIO_Init+0x5c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b92:	2704      	movs	r7, #4
 8000b94:	e79e      	b.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000b96:	2700      	movs	r7, #0
 8000b98:	e79c      	b.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000b9a:	2701      	movs	r7, #1
 8000b9c:	e79a      	b.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000b9e:	2702      	movs	r7, #2
 8000ba0:	e798      	b.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000ba2:	2703      	movs	r7, #3
 8000ba4:	e796      	b.n	8000ad4 <HAL_GPIO_Init+0xcc>
      }
    }
  }
}
 8000ba6:	b003      	add	sp, #12
 8000ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000baa:	4770      	bx	lr
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40013c00 	.word	0x40013c00

08000bbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bbc:	b912      	cbnz	r2, 8000bc4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bbe:	0409      	lsls	r1, r1, #16
 8000bc0:	6181      	str	r1, [r0, #24]
 8000bc2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000bc4:	6181      	str	r1, [r0, #24]
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	f000 80c8 	beq.w	8000d5e <HAL_I2C_Init+0x196>
{
 8000bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd0:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d075      	beq.n	8000cc6 <HAL_I2C_Init+0xfe>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bda:	2324      	movs	r3, #36	; 0x24
 8000bdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000be0:	6822      	ldr	r2, [r4, #0]
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bfc:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bfe:	f001 f961 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c02:	6862      	ldr	r2, [r4, #4]
 8000c04:	4b58      	ldr	r3, [pc, #352]	; (8000d68 <HAL_I2C_Init+0x1a0>)
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d862      	bhi.n	8000cd0 <HAL_I2C_Init+0x108>
 8000c0a:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <HAL_I2C_Init+0x1a4>)
 8000c0c:	4298      	cmp	r0, r3
 8000c0e:	bf8c      	ite	hi
 8000c10:	2300      	movhi	r3, #0
 8000c12:	2301      	movls	r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f040 80a4 	bne.w	8000d62 <HAL_I2C_Init+0x19a>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c1a:	4b55      	ldr	r3, [pc, #340]	; (8000d70 <HAL_I2C_Init+0x1a8>)
 8000c1c:	fba3 2300 	umull	r2, r3, r3, r0
 8000c20:	0c9a      	lsrs	r2, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c22:	6821      	ldr	r1, [r4, #0]
 8000c24:	684b      	ldr	r3, [r1, #4]
 8000c26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	604b      	str	r3, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c2e:	6825      	ldr	r5, [r4, #0]
 8000c30:	6a29      	ldr	r1, [r5, #32]
 8000c32:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000c36:	6866      	ldr	r6, [r4, #4]
 8000c38:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <HAL_I2C_Init+0x1a0>)
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d84e      	bhi.n	8000cdc <HAL_I2C_Init+0x114>
 8000c3e:	1c53      	adds	r3, r2, #1
 8000c40:	430b      	orrs	r3, r1
 8000c42:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c44:	6822      	ldr	r2, [r4, #0]
 8000c46:	69d1      	ldr	r1, [r2, #28]
 8000c48:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000c4c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000c50:	6863      	ldr	r3, [r4, #4]
 8000c52:	4d45      	ldr	r5, [pc, #276]	; (8000d68 <HAL_I2C_Init+0x1a0>)
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d84b      	bhi.n	8000cf0 <HAL_I2C_Init+0x128>
 8000c58:	3801      	subs	r0, #1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c60:	3301      	adds	r3, #1
 8000c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf38      	it	cc
 8000c6a:	2304      	movcc	r3, #4
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c70:	6821      	ldr	r1, [r4, #0]
 8000c72:	680b      	ldr	r3, [r1, #0]
 8000c74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c78:	69e2      	ldr	r2, [r4, #28]
 8000c7a:	6a20      	ldr	r0, [r4, #32]
 8000c7c:	4302      	orrs	r2, r0
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000c82:	6821      	ldr	r1, [r4, #0]
 8000c84:	688b      	ldr	r3, [r1, #8]
 8000c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c8e:	6922      	ldr	r2, [r4, #16]
 8000c90:	68e0      	ldr	r0, [r4, #12]
 8000c92:	4302      	orrs	r2, r0
 8000c94:	4313      	orrs	r3, r2
 8000c96:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c98:	6821      	ldr	r1, [r4, #0]
 8000c9a:	68cb      	ldr	r3, [r1, #12]
 8000c9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ca0:	6962      	ldr	r2, [r4, #20]
 8000ca2:	69a0      	ldr	r0, [r4, #24]
 8000ca4:	4302      	orrs	r2, r0
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000caa:	6822      	ldr	r2, [r4, #0]
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000cb8:	2320      	movs	r3, #32
 8000cba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cbe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cc0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000cc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000cca:	f003 fd7b 	bl	80047c4 <HAL_I2C_MspInit>
 8000cce:	e784      	b.n	8000bda <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_I2C_Init+0x1ac>)
 8000cd2:	4298      	cmp	r0, r3
 8000cd4:	bf8c      	ite	hi
 8000cd6:	2300      	movhi	r3, #0
 8000cd8:	2301      	movls	r3, #1
 8000cda:	e79b      	b.n	8000c14 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cdc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ce0:	fb03 f302 	mul.w	r3, r3, r2
 8000ce4:	4a24      	ldr	r2, [pc, #144]	; (8000d78 <HAL_I2C_Init+0x1b0>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	099b      	lsrs	r3, r3, #6
 8000cec:	3301      	adds	r3, #1
 8000cee:	e7a7      	b.n	8000c40 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cf0:	68a6      	ldr	r6, [r4, #8]
 8000cf2:	b9be      	cbnz	r6, 8000d24 <HAL_I2C_Init+0x15c>
 8000cf4:	1e45      	subs	r5, r0, #1
 8000cf6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8000cfa:	fbb5 f5f7 	udiv	r5, r5, r7
 8000cfe:	3501      	adds	r5, #1
 8000d00:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8000d04:	fab5 f585 	clz	r5, r5
 8000d08:	096d      	lsrs	r5, r5, #5
 8000d0a:	bb35      	cbnz	r5, 8000d5a <HAL_I2C_Init+0x192>
 8000d0c:	b9c6      	cbnz	r6, 8000d40 <HAL_I2C_Init+0x178>
 8000d0e:	3801      	subs	r0, #1
 8000d10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d22:	e7a3      	b.n	8000c6c <HAL_I2C_Init+0xa4>
 8000d24:	1e45      	subs	r5, r0, #1
 8000d26:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8000d2a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000d2e:	fbb5 f5f7 	udiv	r5, r5, r7
 8000d32:	3501      	adds	r5, #1
 8000d34:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8000d38:	fab5 f585 	clz	r5, r5
 8000d3c:	096d      	lsrs	r5, r5, #5
 8000d3e:	e7e4      	b.n	8000d0a <HAL_I2C_Init+0x142>
 8000d40:	3801      	subs	r0, #1
 8000d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d58:	e788      	b.n	8000c6c <HAL_I2C_Init+0xa4>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e786      	b.n	8000c6c <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4770      	bx	lr
    return HAL_ERROR;
 8000d62:	2001      	movs	r0, #1
}
 8000d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	000186a0 	.word	0x000186a0
 8000d6c:	001e847f 	.word	0x001e847f
 8000d70:	431bde83 	.word	0x431bde83
 8000d74:	003d08ff 	.word	0x003d08ff
 8000d78:	10624dd3 	.word	0x10624dd3

08000d7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d82:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8000d86:	00ca      	lsls	r2, r1, #3
 8000d88:	1a52      	subs	r2, r2, r1
 8000d8a:	0093      	lsls	r3, r2, #2
 8000d8c:	4403      	add	r3, r0
 8000d8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d855      	bhi.n	8000e42 <PCD_WriteEmptyTxFifo+0xc6>
 8000d96:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8000d98:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8000d9a:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8000d9e:	00a2      	lsls	r2, r4, #2
 8000da0:	4402      	add	r2, r0
 8000da2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d800      	bhi.n	8000daa <PCD_WriteEmptyTxFifo+0x2e>
  len = ep->xfer_len - ep->xfer_count;
 8000da8:	461a      	mov	r2, r3
 8000daa:	460c      	mov	r4, r1
 8000dac:	4607      	mov	r7, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8000dae:	f102 0a03 	add.w	sl, r2, #3
 8000db2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000db6:	e015      	b.n	8000de4 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000db8:	f106 0a03 	add.w	sl, r6, #3
 8000dbc:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8000dc0:	00e3      	lsls	r3, r4, #3
 8000dc2:	1b1b      	subs	r3, r3, r4
 8000dc4:	009d      	lsls	r5, r3, #2
 8000dc6:	443d      	add	r5, r7
 8000dc8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8000dca:	7c3b      	ldrb	r3, [r7, #16]
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	b2b3      	uxth	r3, r6
 8000dd0:	b2e2      	uxtb	r2, r4
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	f001 ff8a 	bl	8002cec <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8000dd8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000dda:	4433      	add	r3, r6
 8000ddc:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8000dde:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8000de0:	441e      	add	r6, r3
 8000de2:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000de4:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8000de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	459a      	cmp	sl, r3
 8000df2:	d812      	bhi.n	8000e1a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000df4:	00e3      	lsls	r3, r4, #3
 8000df6:	1b1b      	subs	r3, r3, r4
 8000df8:	009a      	lsls	r2, r3, #2
 8000dfa:	443a      	add	r2, r7
 8000dfc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8000dfe:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8000e00:	4299      	cmp	r1, r3
 8000e02:	d20a      	bcs.n	8000e1a <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8000e04:	b14b      	cbz	r3, 8000e1a <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8000e06:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8000e08:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8000e0c:	008a      	lsls	r2, r1, #2
 8000e0e:	443a      	add	r2, r7
 8000e10:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8000e12:	42b3      	cmp	r3, r6
 8000e14:	d8d0      	bhi.n	8000db8 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8000e16:	461e      	mov	r6, r3
 8000e18:	e7ce      	b.n	8000db8 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8000e1a:	00e3      	lsls	r3, r4, #3
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	0098      	lsls	r0, r3, #2
 8000e20:	4407      	add	r7, r0
 8000e22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d80f      	bhi.n	8000e4a <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000e2a:	f004 040f 	and.w	r4, r4, #15
 8000e2e:	2301      	movs	r3, #1
 8000e30:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e32:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8000e36:	ea24 0403 	bic.w	r4, r4, r3
 8000e3a:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e000      	b.n	8000e44 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8000e42:	2001      	movs	r0, #1
}
 8000e44:	b002      	add	sp, #8
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	e7fa      	b.n	8000e44 <PCD_WriteEmptyTxFifo+0xc8>

08000e4e <HAL_PCD_Init>:
{
 8000e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e50:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000e52:	2800      	cmp	r0, #0
 8000e54:	f000 808a 	beq.w	8000f6c <HAL_PCD_Init+0x11e>
 8000e58:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8000e5a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e5c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000e60:	b323      	cbz	r3, 8000eac <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e68:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000e6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e6e:	d101      	bne.n	8000e74 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000e74:	6820      	ldr	r0, [r4, #0]
 8000e76:	f001 fceb 	bl	8002850 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e7a:	4625      	mov	r5, r4
 8000e7c:	f855 7b10 	ldr.w	r7, [r5], #16
 8000e80:	466e      	mov	r6, sp
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e8e:	e886 0003 	stmia.w	r6, {r0, r1}
 8000e92:	1d23      	adds	r3, r4, #4
 8000e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e96:	4638      	mov	r0, r7
 8000e98:	f001 fc18 	bl	80026cc <USB_CoreInit>
 8000e9c:	b158      	cbz	r0, 8000eb6 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000ea4:	2501      	movs	r5, #1
}
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	b00b      	add	sp, #44	; 0x2c
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000eac:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8000eb0:	f003 fe06 	bl	8004ac0 <HAL_PCD_MspInit>
 8000eb4:	e7d5      	b.n	8000e62 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	6820      	ldr	r0, [r4, #0]
 8000eba:	f001 fccf 	bl	800285c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e015      	b.n	8000eee <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8000ec2:	00d9      	lsls	r1, r3, #3
 8000ec4:	1ac8      	subs	r0, r1, r3
 8000ec6:	0082      	lsls	r2, r0, #2
 8000ec8:	4422      	add	r2, r4
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000ed0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ed4:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ede:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ee0:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ee2:	1aca      	subs	r2, r1, r3
 8000ee4:	0091      	lsls	r1, r2, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	6865      	ldr	r5, [r4, #4]
 8000ef0:	42ab      	cmp	r3, r5
 8000ef2:	d3e6      	bcc.n	8000ec2 <HAL_PCD_Init+0x74>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e015      	b.n	8000f24 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ef8:	00d8      	lsls	r0, r3, #3
 8000efa:	1ac1      	subs	r1, r0, r3
 8000efc:	008a      	lsls	r2, r1, #2
 8000efe:	4422      	add	r2, r4
 8000f00:	2100      	movs	r1, #0
 8000f02:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000f06:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f0a:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f0e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f12:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f16:	1ac2      	subs	r2, r0, r3
 8000f18:	0090      	lsls	r0, r2, #2
 8000f1a:	4420      	add	r0, r4
 8000f1c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	429d      	cmp	r5, r3
 8000f26:	d8e7      	bhi.n	8000ef8 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f28:	4625      	mov	r5, r4
 8000f2a:	f855 7b10 	ldr.w	r7, [r5], #16
 8000f2e:	466e      	mov	r6, sp
 8000f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f3c:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f40:	1d23      	adds	r3, r4, #4
 8000f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f44:	4638      	mov	r0, r7
 8000f46:	f001 fccf 	bl	80028e8 <USB_DevInit>
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	b120      	cbz	r0, 8000f58 <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000f54:	2501      	movs	r5, #1
 8000f56:	e7a6      	b.n	8000ea6 <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f64:	6820      	ldr	r0, [r4, #0]
 8000f66:	f002 f86e 	bl	8003046 <USB_DevDisconnect>
  return HAL_OK;
 8000f6a:	e79c      	b.n	8000ea6 <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 8000f6c:	2501      	movs	r5, #1
 8000f6e:	e79a      	b.n	8000ea6 <HAL_PCD_Init+0x58>

08000f70 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f70:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8000f72:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d019      	beq.n	8000fae <HAL_PCD_Start+0x3e>
{
 8000f7a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000f82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d00a      	beq.n	8000f9e <HAL_PCD_Start+0x2e>
 8000f88:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 8000f8a:	6800      	ldr	r0, [r0, #0]
 8000f8c:	f002 f84f 	bl	800302e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000f90:	6820      	ldr	r0, [r4, #0]
 8000f92:	f001 fc57 	bl	8002844 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000f9c:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000f9e:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d0f1      	beq.n	8000f88 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000fa4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000faa:	6393      	str	r3, [r2, #56]	; 0x38
 8000fac:	e7ec      	b.n	8000f88 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8000fae:	2002      	movs	r0, #2
 8000fb0:	4770      	bx	lr
	...

08000fb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4605      	mov	r5, r0
 8000fb8:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fba:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8000fbc:	6c19      	ldr	r1, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8000fbe:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8000fc2:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8000fc6:	68a3      	ldr	r3, [r4, #8]

  if (hpcd->Init.dma_enable == 1U)
 8000fc8:	6902      	ldr	r2, [r0, #16]
 8000fca:	2a01      	cmp	r2, #1
 8000fcc:	d007      	beq.n	8000fde <PCD_EP_OutXfrComplete_int+0x2a>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8000fce:	4a36      	ldr	r2, [pc, #216]	; (80010a8 <PCD_EP_OutXfrComplete_int+0xf4>)
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d057      	beq.n	8001084 <PCD_EP_OutXfrComplete_int+0xd0>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8000fd4:	b2f1      	uxtb	r1, r6
 8000fd6:	f003 fdbd 	bl	8004b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8000fda:	2000      	movs	r0, #0
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8000fde:	f013 0f08 	tst.w	r3, #8
 8000fe2:	d014      	beq.n	800100e <PCD_EP_OutXfrComplete_int+0x5a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8000fe4:	4a31      	ldr	r2, [pc, #196]	; (80010ac <PCD_EP_OutXfrComplete_int+0xf8>)
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	d905      	bls.n	8000ff6 <PCD_EP_OutXfrComplete_int+0x42>
 8000fea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000fee:	d002      	beq.n	8000ff6 <PCD_EP_OutXfrComplete_int+0x42>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8000ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff4:	60a3      	str	r3, [r4, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f003 fda4 	bl	8004b44 <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000ffc:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 8001000:	2101      	movs	r1, #1
 8001002:	6828      	ldr	r0, [r5, #0]
 8001004:	f002 f87c 	bl	8003100 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001008:	2308      	movs	r3, #8
 800100a:	60a3      	str	r3, [r4, #8]
 800100c:	e7e5      	b.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800100e:	f013 0f20 	tst.w	r3, #32
 8001012:	d130      	bne.n	8001076 <PCD_EP_OutXfrComplete_int+0xc2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001014:	f013 0f28 	tst.w	r3, #40	; 0x28
 8001018:	d1df      	bne.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800101a:	4a24      	ldr	r2, [pc, #144]	; (80010ac <PCD_EP_OutXfrComplete_int+0xf8>)
 800101c:	4291      	cmp	r1, r2
 800101e:	d902      	bls.n	8001026 <PCD_EP_OutXfrComplete_int+0x72>
 8001020:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001024:	d12a      	bne.n	800107c <PCD_EP_OutXfrComplete_int+0xc8>
          hpcd->OUT_ep[epnum].maxpacket -
 8001026:	00f2      	lsls	r2, r6, #3
 8001028:	1b92      	subs	r2, r2, r6
 800102a:	0093      	lsls	r3, r2, #2
 800102c:	442b      	add	r3, r5
 800102e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001032:	6921      	ldr	r1, [r4, #16]
 8001034:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001038:	1a52      	subs	r2, r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 800103a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800103e:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8001042:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001046:	440a      	add	r2, r1
 8001048:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800104c:	b2f1      	uxtb	r1, r6
 800104e:	4628      	mov	r0, r5
 8001050:	f003 fd80 	bl	8004b54 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001054:	2e00      	cmp	r6, #0
 8001056:	d1c0      	bne.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
 8001058:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800105c:	00b3      	lsls	r3, r6, #2
 800105e:	442b      	add	r3, r5
 8001060:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1b8      	bne.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001068:	f505 7271 	add.w	r2, r5, #964	; 0x3c4
 800106c:	2101      	movs	r1, #1
 800106e:	6828      	ldr	r0, [r5, #0]
 8001070:	f002 f846 	bl	8003100 <USB_EP0_OutStart>
 8001074:	e7b1      	b.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001076:	2320      	movs	r3, #32
 8001078:	60a3      	str	r3, [r4, #8]
 800107a:	e7ae      	b.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800107c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001080:	60a3      	str	r3, [r4, #8]
 8001082:	e7aa      	b.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001084:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001088:	d109      	bne.n	800109e <PCD_EP_OutXfrComplete_int+0xea>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800108a:	f013 0f20 	tst.w	r3, #32
 800108e:	d001      	beq.n	8001094 <PCD_EP_OutXfrComplete_int+0xe0>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001090:	2320      	movs	r3, #32
 8001092:	60a3      	str	r3, [r4, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001094:	b2f1      	uxtb	r1, r6
 8001096:	4628      	mov	r0, r5
 8001098:	f003 fd5c 	bl	8004b54 <HAL_PCD_DataOutStageCallback>
 800109c:	e79d      	b.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a2:	60a3      	str	r3, [r4, #8]
 80010a4:	e799      	b.n	8000fda <PCD_EP_OutXfrComplete_int+0x26>
 80010a6:	bf00      	nop
 80010a8:	4f54310a 	.word	0x4f54310a
 80010ac:	4f54300a 	.word	0x4f54300a

080010b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010b4:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80010b6:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80010b8:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80010bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80010c0:	688a      	ldr	r2, [r1, #8]

  if (hpcd->Init.dma_enable == 1U)
 80010c2:	6903      	ldr	r3, [r0, #16]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d00d      	beq.n	80010e4 <PCD_EP_OutSetupPacket_int+0x34>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <PCD_EP_OutSetupPacket_int+0x64>)
 80010ca:	429d      	cmp	r5, r3
 80010cc:	d014      	beq.n	80010f8 <PCD_EP_OutSetupPacket_int+0x48>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80010ce:	4620      	mov	r0, r4
 80010d0:	f003 fd38 	bl	8004b44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <PCD_EP_OutSetupPacket_int+0x68>)
 80010d6:	429d      	cmp	r5, r3
 80010d8:	d902      	bls.n	80010e0 <PCD_EP_OutSetupPacket_int+0x30>
 80010da:	6923      	ldr	r3, [r4, #16]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d012      	beq.n	8001106 <PCD_EP_OutSetupPacket_int+0x56>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80010e0:	2000      	movs	r0, #0
 80010e2:	bd38      	pop	{r3, r4, r5, pc}
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <PCD_EP_OutSetupPacket_int+0x68>)
 80010e6:	429d      	cmp	r5, r3
 80010e8:	d9f1      	bls.n	80010ce <PCD_EP_OutSetupPacket_int+0x1e>
 80010ea:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80010ee:	d0ee      	beq.n	80010ce <PCD_EP_OutSetupPacket_int+0x1e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f4:	608b      	str	r3, [r1, #8]
 80010f6:	e7ea      	b.n	80010ce <PCD_EP_OutSetupPacket_int+0x1e>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80010f8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80010fc:	d0e7      	beq.n	80010ce <PCD_EP_OutSetupPacket_int+0x1e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001102:	608b      	str	r3, [r1, #8]
 8001104:	e7e3      	b.n	80010ce <PCD_EP_OutSetupPacket_int+0x1e>
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001106:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800110a:	2101      	movs	r1, #1
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	f001 fff7 	bl	8003100 <USB_EP0_OutStart>
 8001112:	e7e5      	b.n	80010e0 <PCD_EP_OutSetupPacket_int+0x30>
 8001114:	4f54310a 	.word	0x4f54310a
 8001118:	4f54300a 	.word	0x4f54300a

0800111c <HAL_PCD_IRQHandler>:
{
 800111c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001120:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001122:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001124:	4628      	mov	r0, r5
 8001126:	f001 ffca 	bl	80030be <USB_GetMode>
 800112a:	b108      	cbz	r0, 8001130 <HAL_PCD_IRQHandler+0x14>
 800112c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001130:	462f      	mov	r7, r5
 8001132:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001134:	6820      	ldr	r0, [r4, #0]
 8001136:	f001 ff92 	bl	800305e <USB_ReadInterrupts>
 800113a:	2800      	cmp	r0, #0
 800113c:	d0f6      	beq.n	800112c <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800113e:	6820      	ldr	r0, [r4, #0]
 8001140:	f001 ff8d 	bl	800305e <USB_ReadInterrupts>
 8001144:	f010 0f02 	tst.w	r0, #2
 8001148:	d004      	beq.n	8001154 <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800114a:	6822      	ldr	r2, [r4, #0]
 800114c:	6953      	ldr	r3, [r2, #20]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001154:	6820      	ldr	r0, [r4, #0]
 8001156:	f001 ff82 	bl	800305e <USB_ReadInterrupts>
 800115a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800115e:	d174      	bne.n	800124a <HAL_PCD_IRQHandler+0x12e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001160:	6820      	ldr	r0, [r4, #0]
 8001162:	f001 ff7c 	bl	800305e <USB_ReadInterrupts>
 8001166:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800116a:	f040 80c2 	bne.w	80012f2 <HAL_PCD_IRQHandler+0x1d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800116e:	6820      	ldr	r0, [r4, #0]
 8001170:	f001 ff75 	bl	800305e <USB_ReadInterrupts>
 8001174:	2800      	cmp	r0, #0
 8001176:	f2c0 8134 	blt.w	80013e2 <HAL_PCD_IRQHandler+0x2c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800117a:	6820      	ldr	r0, [r4, #0]
 800117c:	f001 ff6f 	bl	800305e <USB_ReadInterrupts>
 8001180:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001184:	d00a      	beq.n	800119c <HAL_PCD_IRQHandler+0x80>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001186:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800118a:	f013 0f01 	tst.w	r3, #1
 800118e:	f040 8142 	bne.w	8001416 <HAL_PCD_IRQHandler+0x2fa>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001192:	6822      	ldr	r2, [r4, #0]
 8001194:	6953      	ldr	r3, [r2, #20]
 8001196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800119a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800119c:	6820      	ldr	r0, [r4, #0]
 800119e:	f001 ff5e 	bl	800305e <USB_ReadInterrupts>
 80011a2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80011a6:	f040 813a 	bne.w	800141e <HAL_PCD_IRQHandler+0x302>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80011aa:	6820      	ldr	r0, [r4, #0]
 80011ac:	f001 ff57 	bl	800305e <USB_ReadInterrupts>
 80011b0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80011b4:	f040 818d 	bne.w	80014d2 <HAL_PCD_IRQHandler+0x3b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011b8:	6820      	ldr	r0, [r4, #0]
 80011ba:	f001 ff50 	bl	800305e <USB_ReadInterrupts>
 80011be:	f010 0f10 	tst.w	r0, #16
 80011c2:	d014      	beq.n	80011ee <HAL_PCD_IRQHandler+0xd2>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	6993      	ldr	r3, [r2, #24]
 80011c8:	f023 0310 	bic.w	r3, r3, #16
 80011cc:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 80011ce:	6a2e      	ldr	r6, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011d0:	f006 070f 	and.w	r7, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011d4:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80011d8:	2b02      	cmp	r3, #2
 80011da:	f000 8192 	beq.w	8001502 <HAL_PCD_IRQHandler+0x3e6>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011de:	2b06      	cmp	r3, #6
 80011e0:	f000 81b0 	beq.w	8001544 <HAL_PCD_IRQHandler+0x428>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	6993      	ldr	r3, [r2, #24]
 80011e8:	f043 0310 	orr.w	r3, r3, #16
 80011ec:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80011ee:	6820      	ldr	r0, [r4, #0]
 80011f0:	f001 ff35 	bl	800305e <USB_ReadInterrupts>
 80011f4:	f010 0f08 	tst.w	r0, #8
 80011f8:	f040 81b6 	bne.w	8001568 <HAL_PCD_IRQHandler+0x44c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80011fc:	6820      	ldr	r0, [r4, #0]
 80011fe:	f001 ff2e 	bl	800305e <USB_ReadInterrupts>
 8001202:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001206:	f040 81b8 	bne.w	800157a <HAL_PCD_IRQHandler+0x45e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800120a:	6820      	ldr	r0, [r4, #0]
 800120c:	f001 ff27 	bl	800305e <USB_ReadInterrupts>
 8001210:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001214:	f040 81bb 	bne.w	800158e <HAL_PCD_IRQHandler+0x472>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	f001 ff20 	bl	800305e <USB_ReadInterrupts>
 800121e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001222:	f040 81be 	bne.w	80015a2 <HAL_PCD_IRQHandler+0x486>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001226:	6820      	ldr	r0, [r4, #0]
 8001228:	f001 ff19 	bl	800305e <USB_ReadInterrupts>
 800122c:	f010 0f04 	tst.w	r0, #4
 8001230:	f43f af7c 	beq.w	800112c <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001238:	f015 0f04 	tst.w	r5, #4
 800123c:	f040 81ba 	bne.w	80015b4 <HAL_PCD_IRQHandler+0x498>
      hpcd->Instance->GOTGINT |= temp;
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4315      	orrs	r5, r2
 8001246:	605d      	str	r5, [r3, #4]
 8001248:	e770      	b.n	800112c <HAL_PCD_IRQHandler+0x10>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	f001 ff0b 	bl	8003066 <USB_ReadDevAllOutEpInterrupt>
 8001250:	4680      	mov	r8, r0
      epnum = 0U;
 8001252:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001254:	e025      	b.n	80012a2 <HAL_PCD_IRQHandler+0x186>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001256:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800125a:	2201      	movs	r2, #1
 800125c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001260:	4649      	mov	r1, r9
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff fea6 	bl	8000fb4 <PCD_EP_OutXfrComplete_int>
 8001268:	e02b      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a6>
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800126a:	4649      	mov	r1, r9
 800126c:	4620      	mov	r0, r4
 800126e:	f7ff ff1f 	bl	80010b0 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001272:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001276:	2208      	movs	r2, #8
 8001278:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 800127c:	e024      	b.n	80012c8 <HAL_PCD_IRQHandler+0x1ac>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800127e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001282:	2220      	movs	r2, #32
 8001284:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001288:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 800128c:	d005      	beq.n	800129a <HAL_PCD_IRQHandler+0x17e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800128e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001296:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        epnum++;
 800129a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800129e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80012a2:	f1b8 0f00 	cmp.w	r8, #0
 80012a6:	f43f af5b 	beq.w	8001160 <HAL_PCD_IRQHandler+0x44>
        if ((ep_intr & 0x1U) != 0U)
 80012aa:	f018 0f01 	tst.w	r8, #1
 80012ae:	d0f4      	beq.n	800129a <HAL_PCD_IRQHandler+0x17e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012b0:	fa5f f189 	uxtb.w	r1, r9
 80012b4:	6820      	ldr	r0, [r4, #0]
 80012b6:	f001 fee6 	bl	8003086 <USB_ReadDevOutEPInterrupt>
 80012ba:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012bc:	f010 0f01 	tst.w	r0, #1
 80012c0:	d1c9      	bne.n	8001256 <HAL_PCD_IRQHandler+0x13a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012c2:	f01a 0f08 	tst.w	sl, #8
 80012c6:	d1d0      	bne.n	800126a <HAL_PCD_IRQHandler+0x14e>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012c8:	f01a 0f10 	tst.w	sl, #16
 80012cc:	d004      	beq.n	80012d8 <HAL_PCD_IRQHandler+0x1bc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012ce:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80012d2:	2210      	movs	r2, #16
 80012d4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012d8:	f01a 0f20 	tst.w	sl, #32
 80012dc:	d0d4      	beq.n	8001288 <HAL_PCD_IRQHandler+0x16c>
            if (hpcd->Init.dma_enable == 1U)
 80012de:	6923      	ldr	r3, [r4, #16]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d1cc      	bne.n	800127e <HAL_PCD_IRQHandler+0x162>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80012e4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80012e8:	2101      	movs	r1, #1
 80012ea:	6820      	ldr	r0, [r4, #0]
 80012ec:	f001 ff08 	bl	8003100 <USB_EP0_OutStart>
 80012f0:	e7c5      	b.n	800127e <HAL_PCD_IRQHandler+0x162>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012f2:	6820      	ldr	r0, [r4, #0]
 80012f4:	f001 febf 	bl	8003076 <USB_ReadDevAllInEpInterrupt>
 80012f8:	4680      	mov	r8, r0
      epnum = 0U;
 80012fa:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80012fc:	e031      	b.n	8001362 <HAL_PCD_IRQHandler+0x246>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80012fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001302:	eba2 0209 	sub.w	r2, r2, r9
 8001306:	0093      	lsls	r3, r2, #2
 8001308:	4423      	add	r3, r4
 800130a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800130c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800130e:	440a      	add	r2, r1
 8001310:	649a      	str	r2, [r3, #72]	; 0x48
 8001312:	e049      	b.n	80013a8 <HAL_PCD_IRQHandler+0x28c>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001314:	f01a 0f08 	tst.w	sl, #8
 8001318:	d004      	beq.n	8001324 <HAL_PCD_IRQHandler+0x208>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800131a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800131e:	2208      	movs	r2, #8
 8001320:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001324:	f01a 0f10 	tst.w	sl, #16
 8001328:	d004      	beq.n	8001334 <HAL_PCD_IRQHandler+0x218>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800132a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800132e:	2210      	movs	r2, #16
 8001330:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001334:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001338:	d004      	beq.n	8001344 <HAL_PCD_IRQHandler+0x228>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800133a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001344:	f01a 0f02 	tst.w	sl, #2
 8001348:	d004      	beq.n	8001354 <HAL_PCD_IRQHandler+0x238>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800134a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800134e:	2202      	movs	r2, #2
 8001350:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001354:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001358:	d13e      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x2bc>
        epnum++;
 800135a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 800135e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001362:	f1b8 0f00 	cmp.w	r8, #0
 8001366:	f43f af02 	beq.w	800116e <HAL_PCD_IRQHandler+0x52>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800136a:	f018 0f01 	tst.w	r8, #1
 800136e:	d0f4      	beq.n	800135a <HAL_PCD_IRQHandler+0x23e>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001370:	fa5f fb89 	uxtb.w	fp, r9
 8001374:	4659      	mov	r1, fp
 8001376:	6820      	ldr	r0, [r4, #0]
 8001378:	f001 fe8e 	bl	8003098 <USB_ReadDevInEPInterrupt>
 800137c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800137e:	f010 0f01 	tst.w	r0, #1
 8001382:	d0c7      	beq.n	8001314 <HAL_PCD_IRQHandler+0x1f8>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001384:	f009 030f 	and.w	r3, r9, #15
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800138e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8001392:	ea23 0302 	bic.w	r3, r3, r2
 8001396:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800139a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800139e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 80013a2:	6923      	ldr	r3, [r4, #16]
 80013a4:	428b      	cmp	r3, r1
 80013a6:	d0aa      	beq.n	80012fe <HAL_PCD_IRQHandler+0x1e2>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013a8:	4659      	mov	r1, fp
 80013aa:	4620      	mov	r0, r4
 80013ac:	f003 fbde 	bl	8004b6c <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 80013b0:	6923      	ldr	r3, [r4, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d1ae      	bne.n	8001314 <HAL_PCD_IRQHandler+0x1f8>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013b6:	f1b9 0f00 	cmp.w	r9, #0
 80013ba:	d1ab      	bne.n	8001314 <HAL_PCD_IRQHandler+0x1f8>
 80013bc:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 80013c0:	0093      	lsls	r3, r2, #2
 80013c2:	4423      	add	r3, r4
 80013c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1a4      	bne.n	8001314 <HAL_PCD_IRQHandler+0x1f8>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013ca:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80013ce:	2101      	movs	r1, #1
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f001 fe95 	bl	8003100 <USB_EP0_OutStart>
 80013d6:	e79d      	b.n	8001314 <HAL_PCD_IRQHandler+0x1f8>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013d8:	4649      	mov	r1, r9
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fcce 	bl	8000d7c <PCD_WriteEmptyTxFifo>
 80013e0:	e7bb      	b.n	800135a <HAL_PCD_IRQHandler+0x23e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013e2:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80013ee:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d008      	beq.n	8001408 <HAL_PCD_IRQHandler+0x2ec>
        HAL_PCD_ResumeCallback(hpcd);
 80013f6:	4620      	mov	r0, r4
 80013f8:	f003 fbf2 	bl	8004be0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	6953      	ldr	r3, [r2, #20]
 8001400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	e6b8      	b.n	800117a <HAL_PCD_IRQHandler+0x5e>
        hpcd->LPM_State = LPM_L0;
 8001408:	2100      	movs	r1, #0
 800140a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800140e:	4620      	mov	r0, r4
 8001410:	f000 fa58 	bl	80018c4 <HAL_PCDEx_LPM_Callback>
 8001414:	e7f2      	b.n	80013fc <HAL_PCD_IRQHandler+0x2e0>
        HAL_PCD_SuspendCallback(hpcd);
 8001416:	4620      	mov	r0, r4
 8001418:	f003 fbca 	bl	8004bb0 <HAL_PCD_SuspendCallback>
 800141c:	e6b9      	b.n	8001192 <HAL_PCD_IRQHandler+0x76>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800141e:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8001422:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800142e:	2110      	movs	r1, #16
 8001430:	6820      	ldr	r0, [r4, #0]
 8001432:	f001 fa2b 	bl	800288c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	e014      	b.n	8001462 <HAL_PCD_IRQHandler+0x346>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001438:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800143c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001440:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001444:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001448:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800144c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001450:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001454:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001458:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800145c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001460:	3601      	adds	r6, #1
 8001462:	6863      	ldr	r3, [r4, #4]
 8001464:	429e      	cmp	r6, r3
 8001466:	d3e7      	bcc.n	8001438 <HAL_PCD_IRQHandler+0x31c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001468:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800146c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001470:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001474:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001476:	b1eb      	cbz	r3, 80014b4 <HAL_PCD_IRQHandler+0x398>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001478:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800147c:	f043 030b 	orr.w	r3, r3, #11
 8001480:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001484:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001488:	f043 030b 	orr.w	r3, r3, #11
 800148c:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001490:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001494:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001498:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800149c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80014a0:	7c21      	ldrb	r1, [r4, #16]
 80014a2:	6820      	ldr	r0, [r4, #0]
 80014a4:	f001 fe2c 	bl	8003100 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80014a8:	6822      	ldr	r2, [r4, #0]
 80014aa:	6953      	ldr	r3, [r2, #20]
 80014ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b0:	6153      	str	r3, [r2, #20]
 80014b2:	e67a      	b.n	80011aa <HAL_PCD_IRQHandler+0x8e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80014b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80014b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014bc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80014c0:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80014c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80014c8:	f043 030b 	orr.w	r3, r3, #11
 80014cc:	f8c8 3010 	str.w	r3, [r8, #16]
 80014d0:	e7de      	b.n	8001490 <HAL_PCD_IRQHandler+0x374>
      (void)USB_ActivateSetup(hpcd->Instance);
 80014d2:	6820      	ldr	r0, [r4, #0]
 80014d4:	f001 fdf7 	bl	80030c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80014d8:	6820      	ldr	r0, [r4, #0]
 80014da:	f001 fad5 	bl	8002a88 <USB_GetDevSpeed>
 80014de:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80014e0:	6826      	ldr	r6, [r4, #0]
 80014e2:	f000 fce9 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 80014e6:	7b22      	ldrb	r2, [r4, #12]
 80014e8:	4601      	mov	r1, r0
 80014ea:	4630      	mov	r0, r6
 80014ec:	f001 f934 	bl	8002758 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80014f0:	4620      	mov	r0, r4
 80014f2:	f003 fb4c 	bl	8004b8e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	6953      	ldr	r3, [r2, #20]
 80014fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fe:	6153      	str	r3, [r2, #20]
 8001500:	e65a      	b.n	80011b8 <HAL_PCD_IRQHandler+0x9c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001502:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001506:	421e      	tst	r6, r3
 8001508:	f43f ae6c 	beq.w	80011e4 <HAL_PCD_IRQHandler+0xc8>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800150c:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8001510:	eba9 0307 	sub.w	r3, r9, r7
 8001514:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001518:	44a0      	add	r8, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800151a:	0936      	lsrs	r6, r6, #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800151c:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8001520:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8001524:	4628      	mov	r0, r5
 8001526:	f001 fd03 	bl	8002f30 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800152a:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800152e:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8001532:	4433      	add	r3, r6
 8001534:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001538:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 800153c:	441e      	add	r6, r3
 800153e:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
 8001542:	e64f      	b.n	80011e4 <HAL_PCD_IRQHandler+0xc8>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001544:	2208      	movs	r2, #8
 8001546:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800154a:	4628      	mov	r0, r5
 800154c:	f001 fcf0 	bl	8002f30 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001550:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8001554:	00fb      	lsls	r3, r7, #3
 8001556:	1bd9      	subs	r1, r3, r7
 8001558:	008a      	lsls	r2, r1, #2
 800155a:	4422      	add	r2, r4
 800155c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001560:	441e      	add	r6, r3
 8001562:	f8c2 6214 	str.w	r6, [r2, #532]	; 0x214
 8001566:	e63d      	b.n	80011e4 <HAL_PCD_IRQHandler+0xc8>
      HAL_PCD_SOFCallback(hpcd);
 8001568:	4620      	mov	r0, r4
 800156a:	f003 fb0a 	bl	8004b82 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800156e:	6822      	ldr	r2, [r4, #0]
 8001570:	6953      	ldr	r3, [r2, #20]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	6153      	str	r3, [r2, #20]
 8001578:	e640      	b.n	80011fc <HAL_PCD_IRQHandler+0xe0>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800157a:	2100      	movs	r1, #0
 800157c:	4620      	mov	r0, r4
 800157e:	f003 fb3b 	bl	8004bf8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	6953      	ldr	r3, [r2, #20]
 8001586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158a:	6153      	str	r3, [r2, #20]
 800158c:	e63d      	b.n	800120a <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800158e:	2100      	movs	r1, #0
 8001590:	4620      	mov	r0, r4
 8001592:	f003 fb2b 	bl	8004bec <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	6953      	ldr	r3, [r2, #20]
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	6153      	str	r3, [r2, #20]
 80015a0:	e63a      	b.n	8001218 <HAL_PCD_IRQHandler+0xfc>
      HAL_PCD_ConnectCallback(hpcd);
 80015a2:	4620      	mov	r0, r4
 80015a4:	f003 fb2e 	bl	8004c04 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	6953      	ldr	r3, [r2, #20]
 80015ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015b0:	6153      	str	r3, [r2, #20]
 80015b2:	e638      	b.n	8001226 <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_DisconnectCallback(hpcd);
 80015b4:	4620      	mov	r0, r4
 80015b6:	f003 fb2b 	bl	8004c10 <HAL_PCD_DisconnectCallback>
 80015ba:	e641      	b.n	8001240 <HAL_PCD_IRQHandler+0x124>

080015bc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80015bc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_PCD_SetAddress+0xc>
 80015c4:	2002      	movs	r0, #2
 80015c6:	4770      	bx	lr
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80015cc:	2301      	movs	r3, #1
 80015ce:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80015d2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015d6:	6800      	ldr	r0, [r0, #0]
 80015d8:	f001 fd19 	bl	800300e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015dc:	2000      	movs	r0, #0
 80015de:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80015e2:	bd10      	pop	{r4, pc}

080015e4 <HAL_PCD_EP_Open>:
{
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 80015e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80015ea:	d11e      	bne.n	800162a <HAL_PCD_EP_Open+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ec:	f001 060f 	and.w	r6, r1, #15
 80015f0:	00f5      	lsls	r5, r6, #3
 80015f2:	1baf      	subs	r7, r5, r6
 80015f4:	00bc      	lsls	r4, r7, #2
 80015f6:	4627      	mov	r7, r4
 80015f8:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80015fc:	4404      	add	r4, r0
 80015fe:	3404      	adds	r4, #4
    ep->is_in = 0U;
 8001600:	463e      	mov	r6, r7
 8001602:	4406      	add	r6, r0
 8001604:	2500      	movs	r5, #0
 8001606:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800160a:	f001 010f 	and.w	r1, r1, #15
 800160e:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8001610:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8001612:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 8001614:	7862      	ldrb	r2, [r4, #1]
 8001616:	b102      	cbz	r2, 800161a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8001618:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 800161a:	2b02      	cmp	r3, #2
 800161c:	d014      	beq.n	8001648 <HAL_PCD_EP_Open+0x64>
  __HAL_LOCK(hpcd);
 800161e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001622:	2b01      	cmp	r3, #1
 8001624:	d113      	bne.n	800164e <HAL_PCD_EP_Open+0x6a>
 8001626:	2002      	movs	r0, #2
}
 8001628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162a:	f001 060f 	and.w	r6, r1, #15
 800162e:	00f5      	lsls	r5, r6, #3
 8001630:	1baf      	subs	r7, r5, r6
 8001632:	00bc      	lsls	r4, r7, #2
 8001634:	4627      	mov	r7, r4
 8001636:	3438      	adds	r4, #56	; 0x38
 8001638:	4404      	add	r4, r0
 800163a:	3404      	adds	r4, #4
    ep->is_in = 1U;
 800163c:	463e      	mov	r6, r7
 800163e:	4406      	add	r6, r0
 8001640:	2501      	movs	r5, #1
 8001642:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8001646:	e7e0      	b.n	800160a <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	7123      	strb	r3, [r4, #4]
 800164c:	e7e7      	b.n	800161e <HAL_PCD_EP_Open+0x3a>
 800164e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd);
 8001650:	2301      	movs	r3, #1
 8001652:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001656:	4621      	mov	r1, r4
 8001658:	6800      	ldr	r0, [r0, #0]
 800165a:	f001 fa26 	bl	8002aaa <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800165e:	2000      	movs	r0, #0
 8001660:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
  return ret;
 8001664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001666 <HAL_PCD_EP_Close>:
{
 8001666:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001668:	f011 0f80 	tst.w	r1, #128	; 0x80
 800166c:	d117      	bne.n	800169e <HAL_PCD_EP_Close+0x38>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800166e:	f001 040f 	and.w	r4, r1, #15
 8001672:	00e2      	lsls	r2, r4, #3
 8001674:	1b15      	subs	r5, r2, r4
 8001676:	00ab      	lsls	r3, r5, #2
 8001678:	461d      	mov	r5, r3
 800167a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800167e:	4403      	add	r3, r0
 8001680:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001682:	462c      	mov	r4, r5
 8001684:	4404      	add	r4, r0
 8001686:	2200      	movs	r2, #0
 8001688:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800168c:	f001 010f 	and.w	r1, r1, #15
 8001690:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001692:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001696:	2a01      	cmp	r2, #1
 8001698:	d110      	bne.n	80016bc <HAL_PCD_EP_Close+0x56>
 800169a:	2002      	movs	r0, #2
}
 800169c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169e:	f001 040f 	and.w	r4, r1, #15
 80016a2:	00e2      	lsls	r2, r4, #3
 80016a4:	1b15      	subs	r5, r2, r4
 80016a6:	00ab      	lsls	r3, r5, #2
 80016a8:	461d      	mov	r5, r3
 80016aa:	3338      	adds	r3, #56	; 0x38
 80016ac:	4403      	add	r3, r0
 80016ae:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80016b0:	462c      	mov	r4, r5
 80016b2:	4404      	add	r4, r0
 80016b4:	2201      	movs	r2, #1
 80016b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80016ba:	e7e7      	b.n	800168c <HAL_PCD_EP_Close+0x26>
 80016bc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80016be:	2201      	movs	r2, #1
 80016c0:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016c4:	4619      	mov	r1, r3
 80016c6:	6800      	ldr	r0, [r0, #0]
 80016c8:	f001 fa3a 	bl	8002b40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80016d2:	bd38      	pop	{r3, r4, r5, pc}

080016d4 <HAL_PCD_EP_Receive>:
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016da:	00ee      	lsls	r6, r5, #3
 80016dc:	1b71      	subs	r1, r6, r5
 80016de:	008c      	lsls	r4, r1, #2
 80016e0:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 80016e4:	4404      	add	r4, r0
 80016e6:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 80016e8:	1b76      	subs	r6, r6, r5
 80016ea:	00b4      	lsls	r4, r6, #2
 80016ec:	4404      	add	r4, r0
 80016ee:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 80016f2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80016fc:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001700:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001704:	6903      	ldr	r3, [r0, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d006      	beq.n	8001718 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800170a:	b165      	cbz	r5, 8001726 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800170c:	b2da      	uxtb	r2, r3
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	f001 fb00 	bl	8002d14 <USB_EPStartXfer>
}
 8001714:	2000      	movs	r0, #0
 8001716:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001718:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 800171c:	00b4      	lsls	r4, r6, #2
 800171e:	4404      	add	r4, r0
 8001720:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8001724:	e7f1      	b.n	800170a <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001726:	b2da      	uxtb	r2, r3
 8001728:	6800      	ldr	r0, [r0, #0]
 800172a:	f001 fa51 	bl	8002bd0 <USB_EP0StartXfer>
 800172e:	e7f1      	b.n	8001714 <HAL_PCD_EP_Receive+0x40>

08001730 <HAL_PCD_EP_Transmit>:
{
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001736:	00ee      	lsls	r6, r5, #3
 8001738:	1b71      	subs	r1, r6, r5
 800173a:	008c      	lsls	r4, r1, #2
 800173c:	3438      	adds	r4, #56	; 0x38
 800173e:	4404      	add	r4, r0
 8001740:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8001742:	1b76      	subs	r6, r6, r5
 8001744:	00b4      	lsls	r4, r6, #2
 8001746:	4404      	add	r4, r0
 8001748:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 800174a:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001750:	2301      	movs	r3, #1
 8001752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001756:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800175a:	6903      	ldr	r3, [r0, #16]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d006      	beq.n	800176e <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001760:	b15d      	cbz	r5, 800177a <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001762:	b2da      	uxtb	r2, r3
 8001764:	6800      	ldr	r0, [r0, #0]
 8001766:	f001 fad5 	bl	8002d14 <USB_EPStartXfer>
}
 800176a:	2000      	movs	r0, #0
 800176c:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800176e:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001772:	00b4      	lsls	r4, r6, #2
 8001774:	4404      	add	r4, r0
 8001776:	64e2      	str	r2, [r4, #76]	; 0x4c
 8001778:	e7f2      	b.n	8001760 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800177a:	b2da      	uxtb	r2, r3
 800177c:	6800      	ldr	r0, [r0, #0]
 800177e:	f001 fa27 	bl	8002bd0 <USB_EP0StartXfer>
 8001782:	e7f2      	b.n	800176a <HAL_PCD_EP_Transmit+0x3a>

08001784 <HAL_PCD_EP_SetStall>:
{
 8001784:	b538      	push	{r3, r4, r5, lr}
 8001786:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800178a:	6843      	ldr	r3, [r0, #4]
 800178c:	429d      	cmp	r5, r3
 800178e:	d838      	bhi.n	8001802 <HAL_PCD_EP_SetStall+0x7e>
  if ((0x80U & ep_addr) == 0x80U)
 8001790:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001794:	d115      	bne.n	80017c2 <HAL_PCD_EP_SetStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 8001796:	00ca      	lsls	r2, r1, #3
 8001798:	1a54      	subs	r4, r2, r1
 800179a:	00a3      	lsls	r3, r4, #2
 800179c:	461c      	mov	r4, r3
 800179e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017a2:	4403      	add	r3, r0
 80017a4:	3304      	adds	r3, #4
    ep->is_in = 0U;
 80017a6:	4622      	mov	r2, r4
 80017a8:	4402      	add	r2, r0
 80017aa:	2100      	movs	r1, #0
 80017ac:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 80017b0:	2201      	movs	r2, #1
 80017b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b4:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80017b6:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80017ba:	2a01      	cmp	r2, #1
 80017bc:	d10d      	bne.n	80017da <HAL_PCD_EP_SetStall+0x56>
 80017be:	2002      	movs	r0, #2
}
 80017c0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c2:	00ea      	lsls	r2, r5, #3
 80017c4:	1b51      	subs	r1, r2, r5
 80017c6:	008b      	lsls	r3, r1, #2
 80017c8:	4619      	mov	r1, r3
 80017ca:	3338      	adds	r3, #56	; 0x38
 80017cc:	4403      	add	r3, r0
 80017ce:	3304      	adds	r3, #4
    ep->is_in = 1U;
 80017d0:	4401      	add	r1, r0
 80017d2:	2201      	movs	r2, #1
 80017d4:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 80017d8:	e7ea      	b.n	80017b0 <HAL_PCD_EP_SetStall+0x2c>
 80017da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017dc:	2201      	movs	r2, #1
 80017de:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017e2:	4619      	mov	r1, r3
 80017e4:	6800      	ldr	r0, [r0, #0]
 80017e6:	f001 fbb7 	bl	8002f58 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ea:	b11d      	cbz	r5, 80017f4 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80017f2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80017f4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80017f8:	7c21      	ldrb	r1, [r4, #16]
 80017fa:	6820      	ldr	r0, [r4, #0]
 80017fc:	f001 fc80 	bl	8003100 <USB_EP0_OutStart>
 8001800:	e7f4      	b.n	80017ec <HAL_PCD_EP_SetStall+0x68>
    return HAL_ERROR;
 8001802:	2001      	movs	r0, #1
 8001804:	bd38      	pop	{r3, r4, r5, pc}

08001806 <HAL_PCD_EP_ClrStall>:
{
 8001806:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800180a:	6842      	ldr	r2, [r0, #4]
 800180c:	4293      	cmp	r3, r2
 800180e:	d82f      	bhi.n	8001870 <HAL_PCD_EP_ClrStall+0x6a>
{
 8001810:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001812:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001816:	d114      	bne.n	8001842 <HAL_PCD_EP_ClrStall+0x3c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001818:	00da      	lsls	r2, r3, #3
 800181a:	1ad4      	subs	r4, r2, r3
 800181c:	00a1      	lsls	r1, r4, #2
 800181e:	460c      	mov	r4, r1
 8001820:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001824:	4401      	add	r1, r0
 8001826:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001828:	4404      	add	r4, r0
 800182a:	2200      	movs	r2, #0
 800182c:	f884 21fd 	strb.w	r2, [r4, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001830:	2200      	movs	r2, #0
 8001832:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001834:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001836:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800183a:	2b01      	cmp	r3, #1
 800183c:	d10d      	bne.n	800185a <HAL_PCD_EP_ClrStall+0x54>
 800183e:	2002      	movs	r0, #2
}
 8001840:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001842:	00da      	lsls	r2, r3, #3
 8001844:	1ad4      	subs	r4, r2, r3
 8001846:	00a1      	lsls	r1, r4, #2
 8001848:	460c      	mov	r4, r1
 800184a:	3138      	adds	r1, #56	; 0x38
 800184c:	4401      	add	r1, r0
 800184e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001850:	4404      	add	r4, r0
 8001852:	2201      	movs	r2, #1
 8001854:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001858:	e7ea      	b.n	8001830 <HAL_PCD_EP_ClrStall+0x2a>
 800185a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800185c:	2301      	movs	r3, #1
 800185e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001862:	6800      	ldr	r0, [r0, #0]
 8001864:	f001 fba5 	bl	8002fb2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001868:	2000      	movs	r0, #0
 800186a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 800186e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
 8001872:	4770      	bx	lr

08001874 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001874:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001876:	6804      	ldr	r4, [r0, #0]
 8001878:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800187a:	b129      	cbz	r1, 8001888 <HAL_PCDEx_SetTxFiFo+0x14>
 800187c:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800187e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001880:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001884:	2300      	movs	r3, #0
 8001886:	e00c      	b.n	80018a2 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001888:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800188c:	62a0      	str	r0, [r4, #40]	; 0x28
 800188e:	e012      	b.n	80018b6 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001890:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001894:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001898:	6849      	ldr	r1, [r1, #4]
 800189a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800189e:	3301      	adds	r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	1e69      	subs	r1, r5, #1
 80018a4:	428b      	cmp	r3, r1
 80018a6:	d3f3      	bcc.n	8001890 <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80018a8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80018ac:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80018b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80018b4:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 80018b6:	2000      	movs	r0, #0
 80018b8:	bc30      	pop	{r4, r5}
 80018ba:	4770      	bx	lr

080018bc <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80018bc:	6803      	ldr	r3, [r0, #0]
 80018be:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	4770      	bx	lr

080018c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	2800      	cmp	r0, #0
 80018ca:	f000 81e4 	beq.w	8001c96 <HAL_RCC_OscConfig+0x3ce>
{
 80018ce:	b570      	push	{r4, r5, r6, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d4:	6803      	ldr	r3, [r0, #0]
 80018d6:	f013 0f01 	tst.w	r3, #1
 80018da:	d03b      	beq.n	8001954 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018dc:	4ba7      	ldr	r3, [pc, #668]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d02c      	beq.n	8001942 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e8:	4ba4      	ldr	r3, [pc, #656]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d021      	beq.n	8001938 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	6863      	ldr	r3, [r4, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d04f      	beq.n	800199c <HAL_RCC_OscConfig+0xd4>
 80018fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001900:	d052      	beq.n	80019a8 <HAL_RCC_OscConfig+0xe0>
 8001902:	4b9e      	ldr	r3, [pc, #632]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001912:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001914:	6863      	ldr	r3, [r4, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d050      	beq.n	80019bc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7fe fe37 	bl	800058c <HAL_GetTick>
 800191e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	4b96      	ldr	r3, [pc, #600]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001928:	d114      	bne.n	8001954 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192a:	f7fe fe2f 	bl	800058c <HAL_GetTick>
 800192e:	1b40      	subs	r0, r0, r5
 8001930:	2864      	cmp	r0, #100	; 0x64
 8001932:	d9f5      	bls.n	8001920 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001934:	2003      	movs	r0, #3
 8001936:	e1b3      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001938:	4b90      	ldr	r3, [pc, #576]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001940:	d0d8      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001942:	4b8e      	ldr	r3, [pc, #568]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800194a:	d003      	beq.n	8001954 <HAL_RCC_OscConfig+0x8c>
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 81a3 	beq.w	8001c9a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	f013 0f02 	tst.w	r3, #2
 800195a:	d055      	beq.n	8001a08 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195c:	4b87      	ldr	r3, [pc, #540]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f013 0f0c 	tst.w	r3, #12
 8001964:	d03e      	beq.n	80019e4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b85      	ldr	r3, [pc, #532]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196e:	2b08      	cmp	r3, #8
 8001970:	d033      	beq.n	80019da <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001972:	68e3      	ldr	r3, [r4, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d068      	beq.n	8001a4a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001978:	2201      	movs	r2, #1
 800197a:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7fe fe05 	bl	800058c <HAL_GetTick>
 8001982:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001984:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f013 0f02 	tst.w	r3, #2
 800198c:	d154      	bne.n	8001a38 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198e:	f7fe fdfd 	bl	800058c <HAL_GetTick>
 8001992:	1b40      	subs	r0, r0, r5
 8001994:	2802      	cmp	r0, #2
 8001996:	d9f5      	bls.n	8001984 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001998:	2003      	movs	r0, #3
 800199a:	e181      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199c:	4a77      	ldr	r2, [pc, #476]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e7b5      	b.n	8001914 <HAL_RCC_OscConfig+0x4c>
 80019a8:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e7ab      	b.n	8001914 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80019bc:	f7fe fde6 	bl	800058c <HAL_GetTick>
 80019c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	4b6e      	ldr	r3, [pc, #440]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019ca:	d0c3      	beq.n	8001954 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7fe fdde 	bl	800058c <HAL_GetTick>
 80019d0:	1b40      	subs	r0, r0, r5
 80019d2:	2864      	cmp	r0, #100	; 0x64
 80019d4:	d9f5      	bls.n	80019c2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
 80019d8:	e162      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019e2:	d1c6      	bne.n	8001972 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e4:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f013 0f02 	tst.w	r3, #2
 80019ec:	d004      	beq.n	80019f8 <HAL_RCC_OscConfig+0x130>
 80019ee:	68e3      	ldr	r3, [r4, #12]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80019f4:	2001      	movs	r0, #1
 80019f6:	e153      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4a60      	ldr	r2, [pc, #384]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 80019fa:	6813      	ldr	r3, [r2, #0]
 80019fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a00:	6921      	ldr	r1, [r4, #16]
 8001a02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a06:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	f013 0f08 	tst.w	r3, #8
 8001a0e:	d040      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a10:	6963      	ldr	r3, [r4, #20]
 8001a12:	b363      	cbz	r3, 8001a6e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a14:	2201      	movs	r2, #1
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_RCC_OscConfig+0x2bc>)
 8001a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7fe fdb7 	bl	800058c <HAL_GetTick>
 8001a1e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a20:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a24:	f013 0f02 	tst.w	r3, #2
 8001a28:	d133      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2a:	f7fe fdaf 	bl	800058c <HAL_GetTick>
 8001a2e:	1b40      	subs	r0, r0, r5
 8001a30:	2802      	cmp	r0, #2
 8001a32:	d9f5      	bls.n	8001a20 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001a34:	2003      	movs	r0, #3
 8001a36:	e133      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a40:	6921      	ldr	r1, [r4, #16]
 8001a42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e7de      	b.n	8001a08 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x2b8>)
 8001a4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a50:	f7fe fd9c 	bl	800058c <HAL_GetTick>
 8001a54:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f013 0f02 	tst.w	r3, #2
 8001a5e:	d0d3      	beq.n	8001a08 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a60:	f7fe fd94 	bl	800058c <HAL_GetTick>
 8001a64:	1b40      	subs	r0, r0, r5
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d9f5      	bls.n	8001a56 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	e118      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <HAL_RCC_OscConfig+0x2bc>)
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7fe fd8a 	bl	800058c <HAL_GetTick>
 8001a78:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7e:	f013 0f02 	tst.w	r3, #2
 8001a82:	d006      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a84:	f7fe fd82 	bl	800058c <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	2802      	cmp	r0, #2
 8001a8c:	d9f5      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001a8e:	2003      	movs	r0, #3
 8001a90:	e106      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	f013 0f04 	tst.w	r3, #4
 8001a98:	d079      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001aa2:	d133      	bne.n	8001b0c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001abc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x2c0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ac6:	d023      	beq.n	8001b10 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	68a3      	ldr	r3, [r4, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d034      	beq.n	8001b38 <HAL_RCC_OscConfig+0x270>
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d038      	beq.n	8001b44 <HAL_RCC_OscConfig+0x27c>
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	671a      	str	r2, [r3, #112]	; 0x70
 8001adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ade:	f022 0204 	bic.w	r2, r2, #4
 8001ae2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae4:	68a3      	ldr	r3, [r4, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d036      	beq.n	8001b58 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7fe fd4f 	bl	800058c <HAL_GetTick>
 8001aee:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	f013 0f02 	tst.w	r3, #2
 8001af8:	d148      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7fe fd47 	bl	800058c <HAL_GetTick>
 8001afe:	1b80      	subs	r0, r0, r6
 8001b00:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b04:	4298      	cmp	r0, r3
 8001b06:	d9f3      	bls.n	8001af0 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001b08:	2003      	movs	r0, #3
 8001b0a:	e0c9      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 8001b0c:	2500      	movs	r5, #0
 8001b0e:	e7d6      	b.n	8001abe <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x2c0>)
 8001b12:	6813      	ldr	r3, [r2, #0]
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b1a:	f7fe fd37 	bl	800058c <HAL_GetTick>
 8001b1e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_OscConfig+0x2c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b28:	d1ce      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7fe fd2f 	bl	800058c <HAL_GetTick>
 8001b2e:	1b80      	subs	r0, r0, r6
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d9f5      	bls.n	8001b20 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001b34:	2003      	movs	r0, #3
 8001b36:	e0b3      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001b3a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e7cf      	b.n	8001ae4 <HAL_RCC_OscConfig+0x21c>
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b48:	f042 0204 	orr.w	r2, r2, #4
 8001b4c:	671a      	str	r2, [r3, #112]	; 0x70
 8001b4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	671a      	str	r2, [r3, #112]	; 0x70
 8001b56:	e7c5      	b.n	8001ae4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b58:	f7fe fd18 	bl	800058c <HAL_GetTick>
 8001b5c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_RCC_OscConfig+0x2b4>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	f013 0f02 	tst.w	r3, #2
 8001b66:	d011      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7fe fd10 	bl	800058c <HAL_GetTick>
 8001b6c:	1b80      	subs	r0, r0, r6
 8001b6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b72:	4298      	cmp	r0, r3
 8001b74:	d9f3      	bls.n	8001b5e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001b76:	2003      	movs	r0, #3
 8001b78:	e092      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	42470000 	.word	0x42470000
 8001b84:	42470e80 	.word	0x42470e80
 8001b88:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8c:	b9ed      	cbnz	r5, 8001bca <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8e:	69a3      	ldr	r3, [r4, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8084 	beq.w	8001c9e <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b96:	4a45      	ldr	r2, [pc, #276]	; (8001cac <HAL_RCC_OscConfig+0x3e4>)
 8001b98:	6892      	ldr	r2, [r2, #8]
 8001b9a:	f002 020c 	and.w	r2, r2, #12
 8001b9e:	2a08      	cmp	r2, #8
 8001ba0:	d051      	beq.n	8001c46 <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d017      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_OscConfig+0x3e8>)
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fcee 	bl	800058c <HAL_GetTick>
 8001bb0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_RCC_OscConfig+0x3e4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bba:	d042      	beq.n	8001c42 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7fe fce6 	bl	800058c <HAL_GetTick>
 8001bc0:	1b00      	subs	r0, r0, r4
 8001bc2:	2802      	cmp	r0, #2
 8001bc4:	d9f5      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e06a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4a38      	ldr	r2, [pc, #224]	; (8001cac <HAL_RCC_OscConfig+0x3e4>)
 8001bcc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	e7db      	b.n	8001b8e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x3e8>)
 8001bda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fcd6 	bl	800058c <HAL_GetTick>
 8001be0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_OscConfig+0x3e4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bea:	d006      	beq.n	8001bfa <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe fcce 	bl	800058c <HAL_GetTick>
 8001bf0:	1b40      	subs	r0, r0, r5
 8001bf2:	2802      	cmp	r0, #2
 8001bf4:	d9f5      	bls.n	8001be2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	e052      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfa:	69e3      	ldr	r3, [r4, #28]
 8001bfc:	6a22      	ldr	r2, [r4, #32]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c02:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c08:	0852      	lsrs	r2, r2, #1
 8001c0a:	3a01      	subs	r2, #1
 8001c0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c16:	4a25      	ldr	r2, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x3e4>)
 8001c18:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_OscConfig+0x3e8>)
 8001c1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c20:	f7fe fcb4 	bl	800058c <HAL_GetTick>
 8001c24:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x3e4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe fcac 	bl	800058c <HAL_GetTick>
 8001c34:	1b00      	subs	r0, r0, r4
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9f5      	bls.n	8001c26 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	e030      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c3e:	2000      	movs	r0, #0
 8001c40:	e02e      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
 8001c42:	2000      	movs	r0, #0
 8001c44:	e02c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d02c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->CFGR;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x3e4>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001c52:	69e2      	ldr	r2, [r4, #28]
 8001c54:	4291      	cmp	r1, r2
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
 8001c5a:	e021      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c60:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	428a      	cmp	r2, r1
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8001c66:	2001      	movs	r0, #1
 8001c68:	e01a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c6c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001c70:	401a      	ands	r2, r3
 8001c72:	428a      	cmp	r2, r1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
 8001c78:	e012      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c80:	428a      	cmp	r2, r1
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8001c84:	2001      	movs	r0, #1
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c88:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001c8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00a      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8001c92:	2001      	movs	r0, #1
 8001c94:	e004      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8001c96:	2001      	movs	r0, #1
 8001c98:	4770      	bx	lr
        return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8001c9e:	2000      	movs	r0, #0
}
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	e7fb      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e7f9      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3d8>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	42470060 	.word	0x42470060

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d041      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x92>
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc6:	4822      	ldr	r0, [pc, #136]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cd8:	d012      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ce6:	fba1 0100 	umull	r0, r1, r1, r0
 8001cea:	f7fe fa7b 	bl	80001e4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001cfa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001d08:	461e      	mov	r6, r3
 8001d0a:	2700      	movs	r7, #0
 8001d0c:	015c      	lsls	r4, r3, #5
 8001d0e:	2500      	movs	r5, #0
 8001d10:	1ae4      	subs	r4, r4, r3
 8001d12:	eb65 0507 	sbc.w	r5, r5, r7
 8001d16:	01a9      	lsls	r1, r5, #6
 8001d18:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001d1c:	01a0      	lsls	r0, r4, #6
 8001d1e:	1b00      	subs	r0, r0, r4
 8001d20:	eb61 0105 	sbc.w	r1, r1, r5
 8001d24:	00cb      	lsls	r3, r1, #3
 8001d26:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d2a:	00c4      	lsls	r4, r0, #3
 8001d2c:	19a0      	adds	r0, r4, r6
 8001d2e:	eb43 0107 	adc.w	r1, r3, r7
 8001d32:	028b      	lsls	r3, r1, #10
 8001d34:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001d38:	0284      	lsls	r4, r0, #10
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f7fe fa50 	bl	80001e4 <__aeabi_uldivmod>
 8001d44:	e7d3      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	00f42400 	.word	0x00f42400
 8001d54:	017d7840 	.word	0x017d7840

08001d58 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	f000 809e 	beq.w	8001e9a <HAL_RCC_ClockConfig+0x142>
{
 8001d5e:	b570      	push	{r4, r5, r6, lr}
 8001d60:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d62:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCC_ClockConfig+0x14c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	428b      	cmp	r3, r1
 8001d6c:	d209      	bcs.n	8001d82 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	b2cb      	uxtb	r3, r1
 8001d70:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <HAL_RCC_ClockConfig+0x14c>)
 8001d72:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	4299      	cmp	r1, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	f013 0f02 	tst.w	r3, #2
 8001d88:	d017      	beq.n	8001dba <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8a:	f013 0f04 	tst.w	r3, #4
 8001d8e:	d004      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001d92:	6893      	ldr	r3, [r2, #8]
 8001d94:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d98:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	f013 0f08 	tst.w	r3, #8
 8001da0:	d004      	beq.n	8001dac <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da2:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001da4:	6893      	ldr	r3, [r2, #8]
 8001da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001daa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001dae:	6893      	ldr	r3, [r2, #8]
 8001db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db4:	68a0      	ldr	r0, [r4, #8]
 8001db6:	4303      	orrs	r3, r0
 8001db8:	6093      	str	r3, [r2, #8]
 8001dba:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	f013 0f01 	tst.w	r3, #1
 8001dc2:	d032      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d021      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	1e9a      	subs	r2, r3, #2
 8001dcc:	2a01      	cmp	r2, #1
 8001dce:	d925      	bls.n	8001e1c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	f012 0f02 	tst.w	r2, #2
 8001dd8:	d061      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4933      	ldr	r1, [pc, #204]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001ddc:	688a      	ldr	r2, [r1, #8]
 8001dde:	f022 0203 	bic.w	r2, r2, #3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001de6:	f7fe fbd1 	bl	800058c <HAL_GetTick>
 8001dea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	6862      	ldr	r2, [r4, #4]
 8001df6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dfa:	d016      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7fe fbc6 	bl	800058c <HAL_GetTick>
 8001e00:	1b80      	subs	r0, r0, r6
 8001e02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d9f0      	bls.n	8001dec <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e16:	d1e0      	bne.n	8001dda <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001e24:	d1d9      	bne.n	8001dda <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_RCC_ClockConfig+0x14c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	429d      	cmp	r5, r3
 8001e34:	d209      	bcs.n	8001e4a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	b2ea      	uxtb	r2, r5
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_RCC_ClockConfig+0x14c>)
 8001e3a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	429d      	cmp	r5, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
}
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	f013 0f04 	tst.w	r3, #4
 8001e50:	d006      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001e54:	6893      	ldr	r3, [r2, #8]
 8001e56:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e5a:	68e1      	ldr	r1, [r4, #12]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	f013 0f08 	tst.w	r3, #8
 8001e66:	d007      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e68:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001e6a:	6893      	ldr	r3, [r2, #8]
 8001e6c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e70:	6921      	ldr	r1, [r4, #16]
 8001e72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e78:	f7ff ff1c 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_RCC_ClockConfig+0x150>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x154>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	40d8      	lsrs	r0, r3
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x158>)
 8001e8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x15c>)
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	f7fe fb2f 	bl	80004f4 <HAL_InitTick>
  return HAL_OK;
 8001e96:	2000      	movs	r0, #0
 8001e98:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	4770      	bx	lr
        return HAL_ERROR;
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023c00 	.word	0x40023c00
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	08005194 	.word	0x08005194
 8001eb0:	20000114 	.word	0x20000114
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001eb8:	4b01      	ldr	r3, [pc, #4]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000114 	.word	0x20000114

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec6:	f7ff fff7 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ed2:	4a03      	ldr	r2, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ed4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ed6:	40d8      	lsrs	r0, r3
 8001ed8:	bd08      	pop	{r3, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	080051a4 	.word	0x080051a4

08001ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ee6:	f7ff ffe7 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ef2:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ef6:	40d8      	lsrs	r0, r3
 8001ef8:	bd08      	pop	{r3, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	080051a4 	.word	0x080051a4

08001f04 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f04:	b530      	push	{r4, r5, lr}
 8001f06:	b083      	sub	sp, #12
 8001f08:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f0a:	6803      	ldr	r3, [r0, #0]
 8001f0c:	f013 0f05 	tst.w	r3, #5
 8001f10:	d10e      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	f013 0f02 	tst.w	r3, #2
 8001f18:	d136      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	f013 0f08 	tst.w	r3, #8
 8001f20:	f000 8099 	beq.w	8002056 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f24:	7c22      	ldrb	r2, [r4, #16]
 8001f26:	4b4d      	ldr	r3, [pc, #308]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001f28:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001f2a:	2000      	movs	r0, #0
}
 8001f2c:	b003      	add	sp, #12
 8001f2e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001f30:	2200      	movs	r2, #0
 8001f32:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f34:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f36:	f7fe fb29 	bl	800058c <HAL_GetTick>
 8001f3a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f3c:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f44:	d006      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f46:	f7fe fb21 	bl	800058c <HAL_GetTick>
 8001f4a:	1b40      	subs	r0, r0, r5
 8001f4c:	2802      	cmp	r0, #2
 8001f4e:	d9f5      	bls.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8001f50:	2003      	movs	r0, #3
 8001f52:	e7eb      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f54:	6862      	ldr	r2, [r4, #4]
 8001f56:	68a3      	ldr	r3, [r4, #8]
 8001f58:	071b      	lsls	r3, r3, #28
 8001f5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f5e:	4a41      	ldr	r2, [pc, #260]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001f64:	2201      	movs	r2, #1
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f68:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f6a:	f7fe fb0f 	bl	800058c <HAL_GetTick>
 8001f6e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f78:	d1cb      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f7a:	f7fe fb07 	bl	800058c <HAL_GetTick>
 8001f7e:	1b40      	subs	r0, r0, r5
 8001f80:	2802      	cmp	r0, #2
 8001f82:	d9f5      	bls.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8001f84:	2003      	movs	r0, #3
 8001f86:	e7d1      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001fa0:	4a31      	ldr	r2, [pc, #196]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001faa:	f7fe faef 	bl	800058c <HAL_GetTick>
 8001fae:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7fe fae7 	bl	800058c <HAL_GetTick>
 8001fbe:	1b40      	subs	r0, r0, r5
 8001fc0:	2802      	cmp	r0, #2
 8001fc2:	d9f5      	bls.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	e7b1      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc8:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fcc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fd0:	d012      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fd2:	68e2      	ldr	r2, [r4, #12]
 8001fd4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fe0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fe4:	4921      	ldr	r1, [pc, #132]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fea:	2000      	movs	r0, #0
 8001fec:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001fee:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f013 0f01 	tst.w	r3, #1
 8001ff6:	d112      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff8:	68e3      	ldr	r3, [r4, #12]
 8001ffa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ffe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002002:	d01d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	6893      	ldr	r3, [r2, #8]
 8002008:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800200c:	6093      	str	r3, [r2, #8]
 800200e:	4915      	ldr	r1, [pc, #84]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002010:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002012:	68e2      	ldr	r2, [r4, #12]
 8002014:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002018:	4313      	orrs	r3, r2
 800201a:	670b      	str	r3, [r1, #112]	; 0x70
 800201c:	e77d      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 800201e:	f7fe fab5 	bl	800058c <HAL_GetTick>
 8002022:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	f013 0f02 	tst.w	r3, #2
 800202c:	d1e4      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe faad 	bl	800058c <HAL_GetTick>
 8002032:	1b40      	subs	r0, r0, r5
 8002034:	f241 3388 	movw	r3, #5000	; 0x1388
 8002038:	4298      	cmp	r0, r3
 800203a:	d9f3      	bls.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 800203c:	2003      	movs	r0, #3
 800203e:	e775      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002040:	4908      	ldr	r1, [pc, #32]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002042:	688a      	ldr	r2, [r1, #8]
 8002044:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002048:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
 8002054:	e7db      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8002056:	2000      	movs	r0, #0
 8002058:	e768      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800205a:	bf00      	nop
 800205c:	424711e0 	.word	0x424711e0
 8002060:	42470068 	.word	0x42470068
 8002064:	40023800 	.word	0x40023800
 8002068:	40007000 	.word	0x40007000
 800206c:	42470e40 	.word	0x42470e40

08002070 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002070:	b538      	push	{r3, r4, r5, lr}
 8002072:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002074:	6802      	ldr	r2, [r0, #0]
 8002076:	68d3      	ldr	r3, [r2, #12]
 8002078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800207c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800207e:	f7fe fa85 	bl	800058c <HAL_GetTick>
 8002082:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f013 0f20 	tst.w	r3, #32
 800208c:	d107      	bne.n	800209e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800208e:	f7fe fa7d 	bl	800058c <HAL_GetTick>
 8002092:	1b40      	subs	r0, r0, r5
 8002094:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002098:	d9f4      	bls.n	8002084 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 800209c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800209e:	2000      	movs	r0, #0
 80020a0:	bd38      	pop	{r3, r4, r5, pc}

080020a2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80020a2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020ac:	d001      	beq.n	80020b2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80020ae:	2000      	movs	r0, #0
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
 80020b2:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80020ba:	f7fe fa67 	bl	800058c <HAL_GetTick>
 80020be:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80020c8:	d107      	bne.n	80020da <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80020ca:	f7fe fa5f 	bl	800058c <HAL_GetTick>
 80020ce:	1b40      	subs	r0, r0, r5
 80020d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020d4:	d9f4      	bls.n	80020c0 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80020d6:	2003      	movs	r0, #3
}
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80020da:	2000      	movs	r0, #0
 80020dc:	bd38      	pop	{r3, r4, r5, pc}

080020de <HAL_RTC_Init>:
{
 80020de:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d05c      	beq.n	800219e <HAL_RTC_Init+0xc0>
 80020e4:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80020e6:	7f43      	ldrb	r3, [r0, #29]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d041      	beq.n	8002170 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ec:	2302      	movs	r3, #2
 80020ee:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	22ca      	movs	r2, #202	; 0xca
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	2253      	movs	r2, #83	; 0x53
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff ffd0 	bl	80020a2 <RTC_EnterInitMode>
 8002102:	4605      	mov	r5, r0
 8002104:	2800      	cmp	r0, #0
 8002106:	d137      	bne.n	8002178 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	6893      	ldr	r3, [r2, #8]
 800210c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002114:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002116:	6821      	ldr	r1, [r4, #0]
 8002118:	688a      	ldr	r2, [r1, #8]
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	6920      	ldr	r0, [r4, #16]
 800211e:	4303      	orrs	r3, r0
 8002120:	6960      	ldr	r0, [r4, #20]
 8002122:	4303      	orrs	r3, r0
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	68e2      	ldr	r2, [r4, #12]
 800212c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	6913      	ldr	r3, [r2, #16]
 8002132:	68a1      	ldr	r1, [r4, #8]
 8002134:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002138:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800213a:	6822      	ldr	r2, [r4, #0]
 800213c:	68d3      	ldr	r3, [r2, #12]
 800213e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002142:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f013 0f20 	tst.w	r3, #32
 800214c:	d01b      	beq.n	8002186 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002158:	6822      	ldr	r2, [r4, #0]
 800215a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800215c:	69a1      	ldr	r1, [r4, #24]
 800215e:	430b      	orrs	r3, r1
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	22ff      	movs	r2, #255	; 0xff
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002168:	2301      	movs	r3, #1
 800216a:	7763      	strb	r3, [r4, #29]
}
 800216c:	4628      	mov	r0, r5
 800216e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002170:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002172:	f002 fb7f 	bl	8004874 <HAL_RTC_MspInit>
 8002176:	e7b9      	b.n	80020ec <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800217e:	2304      	movs	r3, #4
 8002180:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002182:	2501      	movs	r5, #1
 8002184:	e7f2      	b.n	800216c <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ff72 	bl	8002070 <HAL_RTC_WaitForSynchro>
 800218c:	2800      	cmp	r0, #0
 800218e:	d0de      	beq.n	800214e <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	22ff      	movs	r2, #255	; 0xff
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002196:	2304      	movs	r3, #4
 8002198:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800219a:	2501      	movs	r5, #1
 800219c:	e7e6      	b.n	800216c <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 800219e:	2501      	movs	r5, #1
 80021a0:	e7e4      	b.n	800216c <HAL_RTC_Init+0x8e>

080021a2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021a2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021a4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021a6:	6a04      	ldr	r4, [r0, #32]
 80021a8:	f024 0401 	bic.w	r4, r4, #1
 80021ac:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ae:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021b0:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021b4:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021b8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80021bc:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021c0:	6203      	str	r3, [r0, #32]
}
 80021c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ca:	6a03      	ldr	r3, [r0, #32]
 80021cc:	f023 0310 	bic.w	r3, r3, #16
 80021d0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80021d4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021da:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021e2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021e6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021e8:	6203      	str	r3, [r0, #32]
}
 80021ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021f0:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021f6:	4319      	orrs	r1, r3
 80021f8:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021fc:	6081      	str	r1, [r0, #8]
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002206:	6802      	ldr	r2, [r0, #0]
 8002208:	6893      	ldr	r3, [r2, #8]
 800220a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220e:	2b06      	cmp	r3, #6
 8002210:	d003      	beq.n	800221a <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800221a:	2301      	movs	r3, #1
 800221c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002220:	2000      	movs	r0, #0
 8002222:	4770      	bx	lr

08002224 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002224:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002226:	4a25      	ldr	r2, [pc, #148]	; (80022bc <TIM_Base_SetConfig+0x98>)
 8002228:	4290      	cmp	r0, r2
 800222a:	d00e      	beq.n	800224a <TIM_Base_SetConfig+0x26>
 800222c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002230:	d00b      	beq.n	800224a <TIM_Base_SetConfig+0x26>
 8002232:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002236:	4290      	cmp	r0, r2
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0x26>
 800223a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223e:	4290      	cmp	r0, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0x26>
 8002242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002246:	4290      	cmp	r0, r2
 8002248:	d103      	bne.n	8002252 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800224e:	684a      	ldr	r2, [r1, #4]
 8002250:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <TIM_Base_SetConfig+0x98>)
 8002254:	4290      	cmp	r0, r2
 8002256:	d01a      	beq.n	800228e <TIM_Base_SetConfig+0x6a>
 8002258:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800225c:	d017      	beq.n	800228e <TIM_Base_SetConfig+0x6a>
 800225e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002262:	4290      	cmp	r0, r2
 8002264:	d013      	beq.n	800228e <TIM_Base_SetConfig+0x6a>
 8002266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800226a:	4290      	cmp	r0, r2
 800226c:	d00f      	beq.n	800228e <TIM_Base_SetConfig+0x6a>
 800226e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002272:	4290      	cmp	r0, r2
 8002274:	d00b      	beq.n	800228e <TIM_Base_SetConfig+0x6a>
 8002276:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800227a:	4290      	cmp	r0, r2
 800227c:	d007      	beq.n	800228e <TIM_Base_SetConfig+0x6a>
 800227e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002282:	4290      	cmp	r0, r2
 8002284:	d003      	beq.n	800228e <TIM_Base_SetConfig+0x6a>
 8002286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800228a:	4290      	cmp	r0, r2
 800228c:	d103      	bne.n	8002296 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002292:	68ca      	ldr	r2, [r1, #12]
 8002294:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800229a:	694a      	ldr	r2, [r1, #20]
 800229c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800229e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a0:	688b      	ldr	r3, [r1, #8]
 80022a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80022a4:	680b      	ldr	r3, [r1, #0]
 80022a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <TIM_Base_SetConfig+0x98>)
 80022aa:	4298      	cmp	r0, r3
 80022ac:	d002      	beq.n	80022b4 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80022ae:	2301      	movs	r3, #1
 80022b0:	6143      	str	r3, [r0, #20]
 80022b2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80022b4:	690b      	ldr	r3, [r1, #16]
 80022b6:	6303      	str	r3, [r0, #48]	; 0x30
 80022b8:	e7f9      	b.n	80022ae <TIM_Base_SetConfig+0x8a>
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000

080022c0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80022c0:	b1a8      	cbz	r0, 80022ee <HAL_TIM_Base_Init+0x2e>
{
 80022c2:	b510      	push	{r4, lr}
 80022c4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022ca:	b15b      	cbz	r3, 80022e4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d2:	1d21      	adds	r1, r4, #4
 80022d4:	6820      	ldr	r0, [r4, #0]
 80022d6:	f7ff ffa5 	bl	8002224 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80022da:	2301      	movs	r3, #1
 80022dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022e0:	2000      	movs	r0, #0
 80022e2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80022e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022e8:	f002 fad2 	bl	8004890 <HAL_TIM_Base_MspInit>
 80022ec:	e7ee      	b.n	80022cc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
 80022f0:	4770      	bx	lr

080022f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022f2:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022f4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022fa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80022fe:	4319      	orrs	r1, r3
 8002300:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002302:	6084      	str	r4, [r0, #8]
}
 8002304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800230a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d066      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0xd6>
{
 8002312:	b510      	push	{r4, lr}
 8002314:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002316:	2301      	movs	r3, #1
 8002318:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002322:	6802      	ldr	r2, [r0, #0]
 8002324:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800232e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002330:	680b      	ldr	r3, [r1, #0]
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d04a      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xc2>
 8002336:	d913      	bls.n	8002360 <HAL_TIM_ConfigClockSource+0x56>
 8002338:	2b60      	cmp	r3, #96	; 0x60
 800233a:	d03d      	beq.n	80023b8 <HAL_TIM_ConfigClockSource+0xae>
 800233c:	d91e      	bls.n	800237c <HAL_TIM_ConfigClockSource+0x72>
 800233e:	2b70      	cmp	r3, #112	; 0x70
 8002340:	d028      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0x8a>
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002346:	d130      	bne.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002348:	68cb      	ldr	r3, [r1, #12]
 800234a:	684a      	ldr	r2, [r1, #4]
 800234c:	6889      	ldr	r1, [r1, #8]
 800234e:	6800      	ldr	r0, [r0, #0]
 8002350:	f7ff ffcf 	bl	80022f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002354:	6822      	ldr	r2, [r4, #0]
 8002356:	6893      	ldr	r3, [r2, #8]
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6093      	str	r3, [r2, #8]
      break;
 800235e:	e024      	b.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002360:	2b10      	cmp	r3, #16
 8002362:	d006      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x68>
 8002364:	d904      	bls.n	8002370 <HAL_TIM_ConfigClockSource+0x66>
 8002366:	2b20      	cmp	r3, #32
 8002368:	d003      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x68>
 800236a:	2b30      	cmp	r3, #48	; 0x30
 800236c:	d001      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x68>
 800236e:	e01c      	b.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
 8002370:	b9db      	cbnz	r3, 80023aa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002372:	4619      	mov	r1, r3
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	f7ff ff3b 	bl	80021f0 <TIM_ITRx_SetConfig>
      break;
 800237a:	e016      	b.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800237c:	2b50      	cmp	r3, #80	; 0x50
 800237e:	d114      	bne.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002380:	68ca      	ldr	r2, [r1, #12]
 8002382:	6849      	ldr	r1, [r1, #4]
 8002384:	6800      	ldr	r0, [r0, #0]
 8002386:	f7ff ff0c 	bl	80021a2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800238a:	2150      	movs	r1, #80	; 0x50
 800238c:	6820      	ldr	r0, [r4, #0]
 800238e:	f7ff ff2f 	bl	80021f0 <TIM_ITRx_SetConfig>
      break;
 8002392:	e00a      	b.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	68cb      	ldr	r3, [r1, #12]
 8002396:	684a      	ldr	r2, [r1, #4]
 8002398:	6889      	ldr	r1, [r1, #8]
 800239a:	6800      	ldr	r0, [r0, #0]
 800239c:	f7ff ffa9 	bl	80022f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80023a8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80023b6:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b8:	68ca      	ldr	r2, [r1, #12]
 80023ba:	6849      	ldr	r1, [r1, #4]
 80023bc:	6800      	ldr	r0, [r0, #0]
 80023be:	f7ff ff03 	bl	80021c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023c2:	2160      	movs	r1, #96	; 0x60
 80023c4:	6820      	ldr	r0, [r4, #0]
 80023c6:	f7ff ff13 	bl	80021f0 <TIM_ITRx_SetConfig>
      break;
 80023ca:	e7ee      	b.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023cc:	68ca      	ldr	r2, [r1, #12]
 80023ce:	6849      	ldr	r1, [r1, #4]
 80023d0:	6800      	ldr	r0, [r0, #0]
 80023d2:	f7ff fee6 	bl	80021a2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	6820      	ldr	r0, [r4, #0]
 80023da:	f7ff ff09 	bl	80021f0 <TIM_ITRx_SetConfig>
      break;
 80023de:	e7e4      	b.n	80023aa <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80023e0:	2002      	movs	r0, #2
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d033      	beq.n	8002454 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 80023ec:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80023ee:	2301      	movs	r3, #1
 80023f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023fa:	6804      	ldr	r4, [r0, #0]
 80023fc:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023fe:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002404:	680d      	ldr	r5, [r1, #0]
 8002406:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002408:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240a:	6803      	ldr	r3, [r0, #0]
 800240c:	4c12      	ldr	r4, [pc, #72]	; (8002458 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800240e:	42a3      	cmp	r3, r4
 8002410:	d012      	beq.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002416:	d00f      	beq.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002418:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800241c:	42a3      	cmp	r3, r4
 800241e:	d00b      	beq.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002420:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002424:	42a3      	cmp	r3, r4
 8002426:	d007      	beq.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002428:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800242c:	42a3      	cmp	r3, r4
 800242e:	d003      	beq.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002430:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8002434:	42a3      	cmp	r3, r4
 8002436:	d104      	bne.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800243c:	6849      	ldr	r1, [r1, #4]
 800243e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002440:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002442:	2301      	movs	r3, #1
 8002444:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002448:	2300      	movs	r3, #0
 800244a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800244e:	4618      	mov	r0, r3
}
 8002450:	bc30      	pop	{r4, r5}
 8002452:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002454:	2002      	movs	r0, #2
 8002456:	4770      	bx	lr
 8002458:	40010000 	.word	0x40010000

0800245c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	6802      	ldr	r2, [r0, #0]
 8002462:	6913      	ldr	r3, [r2, #16]
 8002464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002468:	68c1      	ldr	r1, [r0, #12]
 800246a:	430b      	orrs	r3, r1
 800246c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800246e:	6883      	ldr	r3, [r0, #8]
 8002470:	6902      	ldr	r2, [r0, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	6942      	ldr	r2, [r0, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	69c2      	ldr	r2, [r0, #28]
 800247a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 800247c:	6801      	ldr	r1, [r0, #0]
 800247e:	68ca      	ldr	r2, [r1, #12]
 8002480:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002484:	f022 020c 	bic.w	r2, r2, #12
 8002488:	4313      	orrs	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800248c:	6802      	ldr	r2, [r0, #0]
 800248e:	6953      	ldr	r3, [r2, #20]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	6981      	ldr	r1, [r0, #24]
 8002496:	430b      	orrs	r3, r1
 8002498:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249a:	69c3      	ldr	r3, [r0, #28]
 800249c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a0:	d034      	beq.n	800250c <UART_SetConfig+0xb0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024a2:	6803      	ldr	r3, [r0, #0]
 80024a4:	4a60      	ldr	r2, [pc, #384]	; (8002628 <UART_SetConfig+0x1cc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	f000 8092 	beq.w	80025d0 <UART_SetConfig+0x174>
 80024ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024b0:	4293      	cmp	r3, r2
 80024b2:	f000 808d 	beq.w	80025d0 <UART_SetConfig+0x174>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024b6:	f7ff fd05 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ba:	6825      	ldr	r5, [r4, #0]
 80024bc:	2100      	movs	r1, #0
 80024be:	1806      	adds	r6, r0, r0
 80024c0:	eb41 0701 	adc.w	r7, r1, r1
 80024c4:	1836      	adds	r6, r6, r0
 80024c6:	414f      	adcs	r7, r1
 80024c8:	00fb      	lsls	r3, r7, #3
 80024ca:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 80024ce:	00f2      	lsls	r2, r6, #3
 80024d0:	4616      	mov	r6, r2
 80024d2:	461f      	mov	r7, r3
 80024d4:	6863      	ldr	r3, [r4, #4]
 80024d6:	009a      	lsls	r2, r3, #2
 80024d8:	0f9b      	lsrs	r3, r3, #30
 80024da:	1980      	adds	r0, r0, r6
 80024dc:	4179      	adcs	r1, r7
 80024de:	f7fd fe81 	bl	80001e4 <__aeabi_uldivmod>
 80024e2:	4c52      	ldr	r4, [pc, #328]	; (800262c <UART_SetConfig+0x1d0>)
 80024e4:	fba4 3200 	umull	r3, r2, r4, r0
 80024e8:	0951      	lsrs	r1, r2, #5
 80024ea:	2264      	movs	r2, #100	; 0x64
 80024ec:	fb02 0211 	mls	r2, r2, r1, r0
 80024f0:	0113      	lsls	r3, r2, #4
 80024f2:	3332      	adds	r3, #50	; 0x32
 80024f4:	fba4 2303 	umull	r2, r3, r4, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4413      	add	r3, r2
 8002508:	60ab      	str	r3, [r5, #8]
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	4a46      	ldr	r2, [pc, #280]	; (8002628 <UART_SetConfig+0x1cc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d030      	beq.n	8002576 <UART_SetConfig+0x11a>
 8002514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002518:	4293      	cmp	r3, r2
 800251a:	d02c      	beq.n	8002576 <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 800251c:	f7ff fcd2 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002520:	6825      	ldr	r5, [r4, #0]
 8002522:	2100      	movs	r1, #0
 8002524:	1806      	adds	r6, r0, r0
 8002526:	eb41 0701 	adc.w	r7, r1, r1
 800252a:	1836      	adds	r6, r6, r0
 800252c:	414f      	adcs	r7, r1
 800252e:	00fb      	lsls	r3, r7, #3
 8002530:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 8002534:	00f2      	lsls	r2, r6, #3
 8002536:	4616      	mov	r6, r2
 8002538:	461f      	mov	r7, r3
 800253a:	6862      	ldr	r2, [r4, #4]
 800253c:	2300      	movs	r3, #0
 800253e:	1892      	adds	r2, r2, r2
 8002540:	415b      	adcs	r3, r3
 8002542:	1980      	adds	r0, r0, r6
 8002544:	4179      	adcs	r1, r7
 8002546:	f7fd fe4d 	bl	80001e4 <__aeabi_uldivmod>
 800254a:	4c38      	ldr	r4, [pc, #224]	; (800262c <UART_SetConfig+0x1d0>)
 800254c:	fba4 3200 	umull	r3, r2, r4, r0
 8002550:	0951      	lsrs	r1, r2, #5
 8002552:	2264      	movs	r2, #100	; 0x64
 8002554:	fb02 0211 	mls	r2, r2, r1, r0
 8002558:	00d3      	lsls	r3, r2, #3
 800255a:	3332      	adds	r3, #50	; 0x32
 800255c:	fba4 2303 	umull	r2, r3, r4, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	005a      	lsls	r2, r3, #1
 8002564:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002568:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4413      	add	r3, r2
 8002572:	60ab      	str	r3, [r5, #8]
 8002574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8002576:	f7ff fcb5 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800257a:	6825      	ldr	r5, [r4, #0]
 800257c:	2100      	movs	r1, #0
 800257e:	1806      	adds	r6, r0, r0
 8002580:	eb41 0701 	adc.w	r7, r1, r1
 8002584:	1836      	adds	r6, r6, r0
 8002586:	414f      	adcs	r7, r1
 8002588:	00fb      	lsls	r3, r7, #3
 800258a:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 800258e:	00f2      	lsls	r2, r6, #3
 8002590:	4616      	mov	r6, r2
 8002592:	461f      	mov	r7, r3
 8002594:	6862      	ldr	r2, [r4, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	1892      	adds	r2, r2, r2
 800259a:	415b      	adcs	r3, r3
 800259c:	1980      	adds	r0, r0, r6
 800259e:	4179      	adcs	r1, r7
 80025a0:	f7fd fe20 	bl	80001e4 <__aeabi_uldivmod>
 80025a4:	4c21      	ldr	r4, [pc, #132]	; (800262c <UART_SetConfig+0x1d0>)
 80025a6:	fba4 3200 	umull	r3, r2, r4, r0
 80025aa:	0951      	lsrs	r1, r2, #5
 80025ac:	2264      	movs	r2, #100	; 0x64
 80025ae:	fb02 0211 	mls	r2, r2, r1, r0
 80025b2:	00d3      	lsls	r3, r2, #3
 80025b4:	3332      	adds	r3, #50	; 0x32
 80025b6:	fba4 2303 	umull	r2, r3, r4, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	005a      	lsls	r2, r3, #1
 80025be:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80025c2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	4413      	add	r3, r2
 80025cc:	60ab      	str	r3, [r5, #8]
 80025ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d0:	f7ff fc88 	bl	8001ee4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d4:	6825      	ldr	r5, [r4, #0]
 80025d6:	2100      	movs	r1, #0
 80025d8:	1806      	adds	r6, r0, r0
 80025da:	eb41 0701 	adc.w	r7, r1, r1
 80025de:	1836      	adds	r6, r6, r0
 80025e0:	414f      	adcs	r7, r1
 80025e2:	00fb      	lsls	r3, r7, #3
 80025e4:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 80025e8:	00f2      	lsls	r2, r6, #3
 80025ea:	4616      	mov	r6, r2
 80025ec:	461f      	mov	r7, r3
 80025ee:	6863      	ldr	r3, [r4, #4]
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	0f9b      	lsrs	r3, r3, #30
 80025f4:	1980      	adds	r0, r0, r6
 80025f6:	4179      	adcs	r1, r7
 80025f8:	f7fd fdf4 	bl	80001e4 <__aeabi_uldivmod>
 80025fc:	4c0b      	ldr	r4, [pc, #44]	; (800262c <UART_SetConfig+0x1d0>)
 80025fe:	fba4 3200 	umull	r3, r2, r4, r0
 8002602:	0951      	lsrs	r1, r2, #5
 8002604:	2264      	movs	r2, #100	; 0x64
 8002606:	fb02 0211 	mls	r2, r2, r1, r0
 800260a:	0113      	lsls	r3, r2, #4
 800260c:	3332      	adds	r3, #50	; 0x32
 800260e:	fba4 2303 	umull	r2, r3, r4, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002618:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	4413      	add	r3, r2
 8002622:	60ab      	str	r3, [r5, #8]
 8002624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002626:	bf00      	nop
 8002628:	40011000 	.word	0x40011000
 800262c:	51eb851f 	.word	0x51eb851f

08002630 <HAL_UART_Init>:
  if (huart == NULL)
 8002630:	b358      	cbz	r0, 800268a <HAL_UART_Init+0x5a>
{
 8002632:	b510      	push	{r4, lr}
 8002634:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800263a:	b30b      	cbz	r3, 8002680 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800263c:	2324      	movs	r3, #36	; 0x24
 800263e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	68d3      	ldr	r3, [r2, #12]
 8002646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800264c:	4620      	mov	r0, r4
 800264e:	f7ff ff05 	bl	800245c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	6913      	ldr	r3, [r2, #16]
 8002656:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800265a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	6953      	ldr	r3, [r2, #20]
 8002660:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002664:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	68d3      	ldr	r3, [r2, #12]
 800266a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800266e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002670:	2000      	movs	r0, #0
 8002672:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002674:	2320      	movs	r3, #32
 8002676:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800267a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800267e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002680:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002684:	f002 f92c 	bl	80048e0 <HAL_UART_MspInit>
 8002688:	e7d8      	b.n	800263c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800268a:	2001      	movs	r0, #1
 800268c:	4770      	bx	lr
	...

08002690 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8002690:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002692:	3301      	adds	r3, #1
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <USB_CoreReset+0x38>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d811      	bhi.n	80026be <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800269a:	6902      	ldr	r2, [r0, #16]
 800269c:	2a00      	cmp	r2, #0
 800269e:	daf8      	bge.n	8002692 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80026a0:	6903      	ldr	r3, [r0, #16]
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6103      	str	r3, [r0, #16]
  count = 0U;
 80026a8:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <USB_CoreReset+0x38>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d807      	bhi.n	80026c2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80026b2:	6902      	ldr	r2, [r0, #16]
 80026b4:	f012 0f01 	tst.w	r2, #1
 80026b8:	d1f7      	bne.n	80026aa <USB_CoreReset+0x1a>

  return HAL_OK;
 80026ba:	2000      	movs	r0, #0
 80026bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80026be:	2003      	movs	r0, #3
 80026c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80026c2:	2003      	movs	r0, #3
}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	00030d40 	.word	0x00030d40

080026cc <USB_CoreInit>:
{
 80026cc:	b084      	sub	sp, #16
 80026ce:	b510      	push	{r4, lr}
 80026d0:	4604      	mov	r4, r0
 80026d2:	a803      	add	r0, sp, #12
 80026d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026d8:	9b08      	ldr	r3, [sp, #32]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d00d      	beq.n	80026fa <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80026de:	68e3      	ldr	r3, [r4, #12]
 80026e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e4:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff ffd2 	bl	8002690 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80026ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026ee:	bb23      	cbnz	r3, 800273a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80026f8:	e013      	b.n	8002722 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80026fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002700:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002702:	68e3      	ldr	r3, [r4, #12]
 8002704:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800270e:	68e3      	ldr	r3, [r4, #12]
 8002710:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002714:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d009      	beq.n	8002730 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ffb7 	bl	8002690 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002722:	9b06      	ldr	r3, [sp, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d00d      	beq.n	8002744 <USB_CoreInit+0x78>
}
 8002728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800272c:	b004      	add	sp, #16
 800272e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002730:	68e3      	ldr	r3, [r4, #12]
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60e3      	str	r3, [r4, #12]
 8002738:	e7f0      	b.n	800271c <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800273a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	63a3      	str	r3, [r4, #56]	; 0x38
 8002742:	e7ee      	b.n	8002722 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002744:	68a3      	ldr	r3, [r4, #8]
 8002746:	f043 0306 	orr.w	r3, r3, #6
 800274a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800274c:	68a3      	ldr	r3, [r4, #8]
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	60a3      	str	r3, [r4, #8]
 8002754:	e7e8      	b.n	8002728 <USB_CoreInit+0x5c>
	...

08002758 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002758:	2a02      	cmp	r2, #2
 800275a:	d00a      	beq.n	8002772 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800275c:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800275e:	68c2      	ldr	r2, [r0, #12]
 8002760:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002764:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002766:	68c3      	ldr	r3, [r0, #12]
 8002768:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800276c:	60c3      	str	r3, [r0, #12]
}
 800276e:	2000      	movs	r0, #0
 8002770:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <USB_SetTurnaroundTime+0xc4>)
 8002774:	440b      	add	r3, r1
 8002776:	4a2a      	ldr	r2, [pc, #168]	; (8002820 <USB_SetTurnaroundTime+0xc8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d93f      	bls.n	80027fc <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <USB_SetTurnaroundTime+0xcc>)
 800277e:	440b      	add	r3, r1
 8002780:	4a29      	ldr	r2, [pc, #164]	; (8002828 <USB_SetTurnaroundTime+0xd0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d93c      	bls.n	8002800 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002786:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800278a:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800278e:	4a27      	ldr	r2, [pc, #156]	; (800282c <USB_SetTurnaroundTime+0xd4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d937      	bls.n	8002804 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002794:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8002798:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800279c:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80027a0:	32a0      	adds	r2, #160	; 0xa0
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d930      	bls.n	8002808 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <USB_SetTurnaroundTime+0xd8>)
 80027a8:	440b      	add	r3, r1
 80027aa:	4a22      	ldr	r2, [pc, #136]	; (8002834 <USB_SetTurnaroundTime+0xdc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d92d      	bls.n	800280c <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <USB_SetTurnaroundTime+0xe0>)
 80027b2:	440b      	add	r3, r1
 80027b4:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80027b8:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80027bc:	4293      	cmp	r3, r2
 80027be:	d927      	bls.n	8002810 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <USB_SetTurnaroundTime+0xe4>)
 80027c2:	440b      	add	r3, r1
 80027c4:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80027c8:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d921      	bls.n	8002814 <USB_SetTurnaroundTime+0xbc>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80027d0:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80027d4:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80027d8:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80027dc:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d919      	bls.n	8002818 <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <USB_SetTurnaroundTime+0xe8>)
 80027e6:	440b      	add	r3, r1
 80027e8:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 80027ec:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <USB_SetTurnaroundTime+0xa0>
      UsbTrd = 0x6U;
 80027f4:	2106      	movs	r1, #6
 80027f6:	e7b2      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 80027f8:	2107      	movs	r1, #7
 80027fa:	e7b0      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80027fc:	210f      	movs	r1, #15
 80027fe:	e7ae      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002800:	210e      	movs	r1, #14
 8002802:	e7ac      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002804:	210d      	movs	r1, #13
 8002806:	e7aa      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002808:	210c      	movs	r1, #12
 800280a:	e7a8      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800280c:	210b      	movs	r1, #11
 800280e:	e7a6      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002810:	210a      	movs	r1, #10
 8002812:	e7a4      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002814:	2109      	movs	r1, #9
 8002816:	e7a2      	b.n	800275e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002818:	2108      	movs	r1, #8
 800281a:	e7a0      	b.n	800275e <USB_SetTurnaroundTime+0x6>
 800281c:	ff275340 	.word	0xff275340
 8002820:	000c34ff 	.word	0x000c34ff
 8002824:	ff1b1e40 	.word	0xff1b1e40
 8002828:	000f423f 	.word	0x000f423f
 800282c:	00124f7f 	.word	0x00124f7f
 8002830:	fee5b660 	.word	0xfee5b660
 8002834:	0016e35f 	.word	0x0016e35f
 8002838:	feced300 	.word	0xfeced300
 800283c:	feb35bc0 	.word	0xfeb35bc0
 8002840:	fe5954e0 	.word	0xfe5954e0

08002844 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002844:	6883      	ldr	r3, [r0, #8]
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6083      	str	r3, [r0, #8]
}
 800284c:	2000      	movs	r0, #0
 800284e:	4770      	bx	lr

08002850 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002850:	6883      	ldr	r3, [r0, #8]
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6083      	str	r3, [r0, #8]
}
 8002858:	2000      	movs	r0, #0
 800285a:	4770      	bx	lr

0800285c <USB_SetCurrentMode>:
{
 800285c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800285e:	68c3      	ldr	r3, [r0, #12]
 8002860:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002864:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002866:	2901      	cmp	r1, #1
 8002868:	d009      	beq.n	800287e <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800286a:	b969      	cbnz	r1, 8002888 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800286c:	68c3      	ldr	r3, [r0, #12]
 800286e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002872:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002874:	2032      	movs	r0, #50	; 0x32
 8002876:	f7fd fe8f 	bl	8000598 <HAL_Delay>
  return HAL_OK;
 800287a:	2000      	movs	r0, #0
 800287c:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800287e:	68c3      	ldr	r3, [r0, #12]
 8002880:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002884:	60c3      	str	r3, [r0, #12]
 8002886:	e7f5      	b.n	8002874 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
}
 800288a:	bd08      	pop	{r3, pc}

0800288c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800288c:	0189      	lsls	r1, r1, #6
 800288e:	f041 0120 	orr.w	r1, r1, #32
 8002892:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8002894:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002896:	3301      	adds	r3, #1
 8002898:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <USB_FlushTxFifo+0x24>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d805      	bhi.n	80028aa <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800289e:	6902      	ldr	r2, [r0, #16]
 80028a0:	f012 0f20 	tst.w	r2, #32
 80028a4:	d1f7      	bne.n	8002896 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80028a6:	2000      	movs	r0, #0
 80028a8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80028aa:	2003      	movs	r0, #3
}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	00030d40 	.word	0x00030d40

080028b4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80028b4:	2310      	movs	r3, #16
 80028b6:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 80028b8:	2300      	movs	r3, #0
    if (++count > 200000U)
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <USB_FlushRxFifo+0x20>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d805      	bhi.n	80028ce <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80028c2:	6902      	ldr	r2, [r0, #16]
 80028c4:	f012 0f10 	tst.w	r2, #16
 80028c8:	d1f7      	bne.n	80028ba <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80028ca:	2000      	movs	r0, #0
 80028cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80028ce:	2003      	movs	r0, #3
}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	00030d40 	.word	0x00030d40

080028d8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80028d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80028dc:	4319      	orrs	r1, r3
 80028de:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80028e2:	2000      	movs	r0, #0
 80028e4:	4770      	bx	lr
	...

080028e8 <USB_DevInit>:
{
 80028e8:	b084      	sub	sp, #16
 80028ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ee:	4604      	mov	r4, r0
 80028f0:	a807      	add	r0, sp, #28
 80028f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f6:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	e006      	b.n	800290a <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80028fc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002900:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002904:	2100      	movs	r1, #0
 8002906:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002908:	3301      	adds	r3, #1
 800290a:	2b0e      	cmp	r3, #14
 800290c:	d9f6      	bls.n	80028fc <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800290e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002910:	bb73      	cbnz	r3, 8002970 <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002918:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800291a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800291c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002920:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002922:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002928:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002930:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8002934:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002938:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800293c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800293e:	2b01      	cmp	r3, #1
 8002940:	d01f      	beq.n	8002982 <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002942:	2103      	movs	r1, #3
 8002944:	4620      	mov	r0, r4
 8002946:	f7ff ffc7 	bl	80028d8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800294a:	2110      	movs	r1, #16
 800294c:	4620      	mov	r0, r4
 800294e:	f7ff ff9d 	bl	800288c <USB_FlushTxFifo>
 8002952:	4680      	mov	r8, r0
 8002954:	b108      	cbz	r0, 800295a <USB_DevInit+0x72>
    ret = HAL_ERROR;
 8002956:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff ffaa 	bl	80028b4 <USB_FlushRxFifo>
 8002960:	b108      	cbz	r0, 8002966 <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 8002962:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800296a:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800296c:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800296e:	e01f      	b.n	80029b0 <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002976:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002978:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800297a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800297e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002980:	e7d3      	b.n	800292a <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 8002982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002984:	b923      	cbnz	r3, 8002990 <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002986:	2100      	movs	r1, #0
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff ffa5 	bl	80028d8 <USB_SetDevSpeed>
 800298e:	e7dc      	b.n	800294a <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002990:	2101      	movs	r1, #1
 8002992:	4620      	mov	r0, r4
 8002994:	f7ff ffa0 	bl	80028d8 <USB_SetDevSpeed>
 8002998:	e7d7      	b.n	800294a <USB_DevInit+0x62>
      if (i == 0U)
 800299a:	b9c3      	cbnz	r3, 80029ce <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800299c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80029a0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80029a4:	2200      	movs	r2, #0
 80029a6:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80029a8:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80029ac:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80029ae:	3301      	adds	r3, #1
 80029b0:	9907      	ldr	r1, [sp, #28]
 80029b2:	428b      	cmp	r3, r1
 80029b4:	d210      	bcs.n	80029d8 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80029b6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80029ba:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80029be:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80029c2:	2800      	cmp	r0, #0
 80029c4:	dbe9      	blt.n	800299a <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80029c6:	2000      	movs	r0, #0
 80029c8:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80029cc:	e7ea      	b.n	80029a4 <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80029ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d2:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80029d6:	e7e5      	b.n	80029a4 <USB_DevInit+0xbc>
 80029d8:	2300      	movs	r3, #0
 80029da:	e00a      	b.n	80029f2 <USB_DevInit+0x10a>
      if (i == 0U)
 80029dc:	b1bb      	cbz	r3, 8002a0e <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80029de:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 80029e2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80029e6:	2200      	movs	r2, #0
 80029e8:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80029ea:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80029ee:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80029f0:	3301      	adds	r3, #1
 80029f2:	428b      	cmp	r3, r1
 80029f4:	d210      	bcs.n	8002a18 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80029f6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80029fa:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 80029fe:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8002a02:	2f00      	cmp	r7, #0
 8002a04:	dbea      	blt.n	80029dc <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002a06:	2700      	movs	r7, #0
 8002a08:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002a0c:	e7eb      	b.n	80029e6 <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a0e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8002a12:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002a16:	e7e6      	b.n	80029e6 <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002a18:	6933      	ldr	r3, [r6, #16]
 8002a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1e:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 8002a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d01b      	beq.n	8002a5e <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 8002a26:	2200      	movs	r2, #0
 8002a28:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002a2a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002a2e:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002a30:	b91b      	cbnz	r3, 8002a3a <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002a32:	69a3      	ldr	r3, [r4, #24]
 8002a34:	f043 0310 	orr.w	r3, r3, #16
 8002a38:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002a3a:	69a2      	ldr	r2, [r4, #24]
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <USB_DevInit+0x198>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a44:	b11b      	cbz	r3, 8002a4e <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002a46:	69a3      	ldr	r3, [r4, #24]
 8002a48:	f043 0308 	orr.w	r3, r3, #8
 8002a4c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d00d      	beq.n	8002a70 <USB_DevInit+0x188>
}
 8002a54:	4640      	mov	r0, r8
 8002a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5a:	b004      	add	sp, #16
 8002a5c:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <USB_DevInit+0x19c>)
 8002a60:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002a62:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002a64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a68:	f042 0203 	orr.w	r2, r2, #3
 8002a6c:	6332      	str	r2, [r6, #48]	; 0x30
 8002a6e:	e7da      	b.n	8002a26 <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002a70:	69a3      	ldr	r3, [r4, #24]
 8002a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	61a3      	str	r3, [r4, #24]
 8002a7c:	e7ea      	b.n	8002a54 <USB_DevInit+0x16c>
 8002a7e:	bf00      	nop
 8002a80:	803c3800 	.word	0x803c3800
 8002a84:	00800100 	.word	0x00800100

08002a88 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002a88:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002a8c:	f013 0306 	ands.w	r3, r3, #6
 8002a90:	d007      	beq.n	8002aa2 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d007      	beq.n	8002aa6 <USB_GetDevSpeed+0x1e>
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d001      	beq.n	8002a9e <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8002a9a:	200f      	movs	r0, #15
}
 8002a9c:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	4770      	bx	lr

08002aaa <USB_ActivateEndpoint>:
{
 8002aaa:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002aac:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002aae:	784a      	ldrb	r2, [r1, #1]
 8002ab0:	2a01      	cmp	r2, #1
 8002ab2:	d022      	beq.n	8002afa <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002ab4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002ab8:	f003 060f 	and.w	r6, r3, #15
 8002abc:	2401      	movs	r4, #1
 8002abe:	40b4      	lsls	r4, r6
 8002ac0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002ac4:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002ac8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002acc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002ad0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ad4:	d10e      	bne.n	8002af4 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002ad6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002ada:	688a      	ldr	r2, [r1, #8]
 8002adc:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002ae0:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002ae2:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002af4:	2000      	movs	r0, #0
 8002af6:	bc70      	pop	{r4, r5, r6}
 8002af8:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002afa:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8002afe:	f003 060f 	and.w	r6, r3, #15
 8002b02:	40b2      	lsls	r2, r6
 8002b04:	b292      	uxth	r2, r2
 8002b06:	4322      	orrs	r2, r4
 8002b08:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002b0c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002b10:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002b14:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002b18:	d1ec      	bne.n	8002af4 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002b1a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002b1e:	688c      	ldr	r4, [r1, #8]
 8002b20:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002b24:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002b26:	ea44 4481 	orr.w	r4, r4, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002b2a:	ea44 5383 	orr.w	r3, r4, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b38:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002b3c:	e7da      	b.n	8002af4 <USB_ActivateEndpoint+0x4a>
	...

08002b40 <USB_DeactivateEndpoint>:
{
 8002b40:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002b42:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002b44:	784b      	ldrb	r3, [r1, #1]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d01f      	beq.n	8002b8a <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002b4a:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8002b4e:	f004 060f 	and.w	r6, r4, #15
 8002b52:	2201      	movs	r2, #1
 8002b54:	fa02 f606 	lsl.w	r6, r2, r6
 8002b58:	ea25 4506 	bic.w	r5, r5, r6, lsl #16
 8002b5c:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002b60:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8002b64:	7809      	ldrb	r1, [r1, #0]
 8002b66:	f001 010f 	and.w	r1, r1, #15
 8002b6a:	408a      	lsls	r2, r1
 8002b6c:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8002b70:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002b74:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002b78:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <USB_DeactivateEndpoint+0x88>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002b84:	2000      	movs	r0, #0
 8002b86:	bc70      	pop	{r4, r5, r6}
 8002b88:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002b8a:	f8d0 683c 	ldr.w	r6, [r0, #2108]	; 0x83c
 8002b8e:	f004 020f 	and.w	r2, r4, #15
 8002b92:	fa03 f202 	lsl.w	r2, r3, r2
 8002b96:	b292      	uxth	r2, r2
 8002b98:	ea26 0202 	bic.w	r2, r6, r2
 8002b9c:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ba0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002ba4:	7809      	ldrb	r1, [r1, #0]
 8002ba6:	f001 010f 	and.w	r1, r1, #15
 8002baa:	408b      	lsls	r3, r1
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	ea22 0303 	bic.w	r3, r2, r3
 8002bb2:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002bb6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002bba:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002bbe:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <USB_DeactivateEndpoint+0x8c>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002bc6:	e7dd      	b.n	8002b84 <USB_DeactivateEndpoint+0x44>
 8002bc8:	eff37800 	.word	0xeff37800
 8002bcc:	ec337800 	.word	0xec337800

08002bd0 <USB_EP0StartXfer>:
{
 8002bd0:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002bd2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002bd4:	784c      	ldrb	r4, [r1, #1]
 8002bd6:	2c01      	cmp	r4, #1
 8002bd8:	d026      	beq.n	8002c28 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bda:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002bde:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002be2:	691c      	ldr	r4, [r3, #16]
 8002be4:	0ce4      	lsrs	r4, r4, #19
 8002be6:	04e4      	lsls	r4, r4, #19
 8002be8:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002bea:	691c      	ldr	r4, [r3, #16]
 8002bec:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002bf0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002bf4:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8002bf6:	694c      	ldr	r4, [r1, #20]
 8002bf8:	b10c      	cbz	r4, 8002bfe <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8002bfa:	688c      	ldr	r4, [r1, #8]
 8002bfc:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002bfe:	691c      	ldr	r4, [r3, #16]
 8002c00:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002c04:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002c06:	691c      	ldr	r4, [r3, #16]
 8002c08:	688d      	ldr	r5, [r1, #8]
 8002c0a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002c0e:	432c      	orrs	r4, r5
 8002c10:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002c12:	2a01      	cmp	r2, #1
 8002c14:	d065      	beq.n	8002ce2 <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002c16:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002c1e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002c22:	2000      	movs	r0, #0
 8002c24:	bc70      	pop	{r4, r5, r6}
 8002c26:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8002c28:	694c      	ldr	r4, [r1, #20]
 8002c2a:	bb6c      	cbnz	r4, 8002c88 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c2c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002c30:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c34:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002c38:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002c3c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002c40:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c44:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002c48:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c4c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c50:	0ced      	lsrs	r5, r5, #19
 8002c52:	04ed      	lsls	r5, r5, #19
 8002c54:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002c58:	2a01      	cmp	r2, #1
 8002c5a:	d033      	beq.n	8002cc4 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002c5c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002c60:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002c64:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002c68:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8002c6c:	694b      	ldr	r3, [r1, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0d7      	beq.n	8002c22 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002c72:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002c76:	7809      	ldrb	r1, [r1, #0]
 8002c78:	f001 040f 	and.w	r4, r1, #15
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	40a1      	lsls	r1, r4
 8002c80:	430a      	orrs	r2, r1
 8002c82:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002c86:	e7cc      	b.n	8002c22 <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c88:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002c8c:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8002c90:	6925      	ldr	r5, [r4, #16]
 8002c92:	0ced      	lsrs	r5, r5, #19
 8002c94:	04ed      	lsls	r5, r5, #19
 8002c96:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c98:	6925      	ldr	r5, [r4, #16]
 8002c9a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002c9e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002ca2:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002ca4:	694e      	ldr	r6, [r1, #20]
 8002ca6:	688d      	ldr	r5, [r1, #8]
 8002ca8:	42ae      	cmp	r6, r5
 8002caa:	d900      	bls.n	8002cae <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 8002cac:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002cae:	6925      	ldr	r5, [r4, #16]
 8002cb0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002cb4:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002cb6:	6925      	ldr	r5, [r4, #16]
 8002cb8:	694e      	ldr	r6, [r1, #20]
 8002cba:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002cbe:	4335      	orrs	r5, r6
 8002cc0:	6125      	str	r5, [r4, #16]
 8002cc2:	e7c9      	b.n	8002c58 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8002cc4:	690a      	ldr	r2, [r1, #16]
 8002cc6:	b11a      	cbz	r2, 8002cd0 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002cc8:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002ccc:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002cd0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002cd4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002cd8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002cdc:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002ce0:	e79f      	b.n	8002c22 <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002ce2:	68ca      	ldr	r2, [r1, #12]
 8002ce4:	2a00      	cmp	r2, #0
 8002ce6:	d096      	beq.n	8002c16 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002ce8:	615a      	str	r2, [r3, #20]
 8002cea:	e794      	b.n	8002c16 <USB_EP0StartXfer+0x46>

08002cec <USB_WritePacket>:
{
 8002cec:	b470      	push	{r4, r5, r6}
 8002cee:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8002cf2:	b964      	cbnz	r4, 8002d0e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	089e      	lsrs	r6, r3, #2
    for (i = 0U; i < count32b; i++)
 8002cf8:	e007      	b.n	8002d0a <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002cfa:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d02:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d06:	601d      	str	r5, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002d08:	3401      	adds	r4, #1
 8002d0a:	42b4      	cmp	r4, r6
 8002d0c:	d3f5      	bcc.n	8002cfa <USB_WritePacket+0xe>
}
 8002d0e:	2000      	movs	r0, #0
 8002d10:	bc70      	pop	{r4, r5, r6}
 8002d12:	4770      	bx	lr

08002d14 <USB_EPStartXfer>:
{
 8002d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d16:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002d18:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002d1a:	784b      	ldrb	r3, [r1, #1]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d02b      	beq.n	8002d78 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d20:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002d24:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002d28:	691d      	ldr	r5, [r3, #16]
 8002d2a:	0ced      	lsrs	r5, r5, #19
 8002d2c:	04ed      	lsls	r5, r5, #19
 8002d2e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002d30:	691d      	ldr	r5, [r3, #16]
 8002d32:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002d36:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002d3a:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len == 0U)
 8002d3c:	694d      	ldr	r5, [r1, #20]
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	f040 80c5 	bne.w	8002ece <USB_EPStartXfer+0x1ba>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002d44:	691d      	ldr	r5, [r3, #16]
 8002d46:	688e      	ldr	r6, [r1, #8]
 8002d48:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002d4c:	4335      	orrs	r5, r6
 8002d4e:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002d50:	691d      	ldr	r5, [r3, #16]
 8002d52:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002d56:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8002d58:	2a01      	cmp	r2, #1
 8002d5a:	f000 80cd 	beq.w	8002ef8 <USB_EPStartXfer+0x1e4>
    if (ep->type == EP_TYPE_ISOC)
 8002d5e:	78cb      	ldrb	r3, [r1, #3]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f000 80cf 	beq.w	8002f04 <USB_EPStartXfer+0x1f0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002d66:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002d6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002d6e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8002d72:	2000      	movs	r0, #0
 8002d74:	b003      	add	sp, #12
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002d78:	694b      	ldr	r3, [r1, #20]
 8002d7a:	bb83      	cbnz	r3, 8002dde <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002d7c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002d80:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002d84:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002d88:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002d8c:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002d90:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002d94:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002d98:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d9c:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002da0:	0ced      	lsrs	r5, r5, #19
 8002da2:	04ed      	lsls	r5, r5, #19
 8002da4:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
    if (dma == 1U)
 8002da8:	2a01      	cmp	r2, #1
 8002daa:	d04c      	beq.n	8002e46 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002dac:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002db0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002db4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002db8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002dbc:	78cb      	ldrb	r3, [r1, #3]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d06a      	beq.n	8002e98 <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 8002dc2:	694b      	ldr	r3, [r1, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0d4      	beq.n	8002d72 <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002dc8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002dcc:	780a      	ldrb	r2, [r1, #0]
 8002dce:	f002 010f 	and.w	r1, r2, #15
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	408a      	lsls	r2, r1
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002ddc:	e7c9      	b.n	8002d72 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002dde:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8002de2:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002de6:	0ced      	lsrs	r5, r5, #19
 8002de8:	04ed      	lsls	r5, r5, #19
 8002dea:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002dee:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002df2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002df6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002dfa:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002dfe:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8002e02:	694d      	ldr	r5, [r1, #20]
 8002e04:	688f      	ldr	r7, [r1, #8]
 8002e06:	443d      	add	r5, r7
 8002e08:	3d01      	subs	r5, #1
 8002e0a:	fbb5 f5f7 	udiv	r5, r5, r7
 8002e0e:	4f47      	ldr	r7, [pc, #284]	; (8002f2c <USB_EPStartXfer+0x218>)
 8002e10:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002e14:	4335      	orrs	r5, r6
 8002e16:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002e1a:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002e1e:	694e      	ldr	r6, [r1, #20]
 8002e20:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002e24:	4335      	orrs	r5, r6
 8002e26:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8002e2e:	78cd      	ldrb	r5, [r1, #3]
 8002e30:	2d01      	cmp	r5, #1
 8002e32:	d1b9      	bne.n	8002da8 <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002e34:	691d      	ldr	r5, [r3, #16]
 8002e36:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002e3a:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002e3c:	691d      	ldr	r5, [r3, #16]
 8002e3e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002e42:	611d      	str	r5, [r3, #16]
 8002e44:	e7b0      	b.n	8002da8 <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 8002e46:	690b      	ldr	r3, [r1, #16]
 8002e48:	b11b      	cbz	r3, 8002e52 <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002e4a:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002e4e:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8002e52:	78cb      	ldrb	r3, [r1, #3]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d008      	beq.n	8002e6a <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002e58:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002e5c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002e64:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8002e68:	e783      	b.n	8002d72 <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002e6a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002e6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e72:	d108      	bne.n	8002e86 <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002e74:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002e78:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002e7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e80:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 8002e84:	e7e8      	b.n	8002e58 <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002e86:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8002e8a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 8002e96:	e7df      	b.n	8002e58 <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002e98:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002e9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ea0:	d10e      	bne.n	8002ec0 <USB_EPStartXfer+0x1ac>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002ea2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002ea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eaa:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8002eae:	4614      	mov	r4, r2
 8002eb0:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002eb2:	68c9      	ldr	r1, [r1, #12]
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	8a9b      	ldrh	r3, [r3, #20]
 8002eb8:	9400      	str	r4, [sp, #0]
 8002eba:	f7ff ff17 	bl	8002cec <USB_WritePacket>
 8002ebe:	e758      	b.n	8002d72 <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002ec0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 8002ecc:	e7ef      	b.n	8002eae <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002ece:	688e      	ldr	r6, [r1, #8]
 8002ed0:	4435      	add	r5, r6
 8002ed2:	3d01      	subs	r5, #1
 8002ed4:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002ed8:	691e      	ldr	r6, [r3, #16]
 8002eda:	4f14      	ldr	r7, [pc, #80]	; (8002f2c <USB_EPStartXfer+0x218>)
 8002edc:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8002ee0:	433e      	orrs	r6, r7
 8002ee2:	611e      	str	r6, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002ee4:	691f      	ldr	r7, [r3, #16]
 8002ee6:	688e      	ldr	r6, [r1, #8]
 8002ee8:	b2ad      	uxth	r5, r5
 8002eea:	fb06 f505 	mul.w	r5, r6, r5
 8002eee:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002ef2:	433d      	orrs	r5, r7
 8002ef4:	611d      	str	r5, [r3, #16]
 8002ef6:	e72f      	b.n	8002d58 <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002ef8:	68ca      	ldr	r2, [r1, #12]
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	f43f af2f 	beq.w	8002d5e <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002f00:	615a      	str	r2, [r3, #20]
 8002f02:	e72c      	b.n	8002d5e <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002f04:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002f08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f0c:	d106      	bne.n	8002f1c <USB_EPStartXfer+0x208>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002f0e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f16:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8002f1a:	e724      	b.n	8002d66 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002f1c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8002f28:	e71d      	b.n	8002d66 <USB_EPStartXfer+0x52>
 8002f2a:	bf00      	nop
 8002f2c:	1ff80000 	.word	0x1ff80000

08002f30 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002f30:	3203      	adds	r2, #3
 8002f32:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d20c      	bcs.n	8002f54 <USB_ReadPacket+0x24>
{
 8002f3a:	b410      	push	{r4}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002f3c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002f40:	6824      	ldr	r4, [r4, #0]
 8002f42:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8002f46:	3301      	adds	r3, #1
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d3f7      	bcc.n	8002f3c <USB_ReadPacket+0xc>
}
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	4608      	mov	r0, r1
 8002f56:	4770      	bx	lr

08002f58 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002f58:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002f5a:	784a      	ldrb	r2, [r1, #1]
 8002f5c:	2a01      	cmp	r2, #1
 8002f5e:	d014      	beq.n	8002f8a <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002f60:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002f64:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	db06      	blt.n	8002f7a <USB_EPSetStall+0x22>
 8002f6c:	b12b      	cbz	r3, 8002f7a <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002f6e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002f72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f76:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002f7a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002f7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f82:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002f86:	2000      	movs	r0, #0
 8002f88:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002f8a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002f8e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	db06      	blt.n	8002fa4 <USB_EPSetStall+0x4c>
 8002f96:	b12b      	cbz	r3, 8002fa4 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002f98:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002f9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fa0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002fa4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fac:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002fb0:	e7e9      	b.n	8002f86 <USB_EPSetStall+0x2e>

08002fb2 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002fb2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002fb4:	784a      	ldrb	r2, [r1, #1]
 8002fb6:	2a01      	cmp	r2, #1
 8002fb8:	d00e      	beq.n	8002fd8 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002fbe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fc6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002fca:	78cb      	ldrb	r3, [r1, #3]
 8002fcc:	3b02      	subs	r3, #2
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d915      	bls.n	8003000 <USB_EPClearStall+0x4e>
}
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fd8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002fdc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fe4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002fe8:	78cb      	ldrb	r3, [r1, #3]
 8002fea:	3b02      	subs	r3, #2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d8f0      	bhi.n	8002fd4 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002ff2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002ffe:	e7e9      	b.n	8002fd4 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003000:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800300c:	e7e2      	b.n	8002fd4 <USB_EPClearStall+0x22>

0800300e <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800300e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003012:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003016:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800301a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800301e:	0109      	lsls	r1, r1, #4
 8003020:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003024:	430b      	orrs	r3, r1
 8003026:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 800302a:	2000      	movs	r0, #0
 800302c:	4770      	bx	lr

0800302e <USB_DevConnect>:
{
 800302e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003030:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003034:	f023 0302 	bic.w	r3, r3, #2
 8003038:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800303c:	2003      	movs	r0, #3
 800303e:	f7fd faab 	bl	8000598 <HAL_Delay>
}
 8003042:	2000      	movs	r0, #0
 8003044:	bd08      	pop	{r3, pc}

08003046 <USB_DevDisconnect>:
{
 8003046:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003048:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003054:	2003      	movs	r0, #3
 8003056:	f7fd fa9f 	bl	8000598 <HAL_Delay>
}
 800305a:	2000      	movs	r0, #0
 800305c:	bd08      	pop	{r3, pc}

0800305e <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800305e:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003060:	6980      	ldr	r0, [r0, #24]
}
 8003062:	4010      	ands	r0, r2
 8003064:	4770      	bx	lr

08003066 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003066:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800306a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800306e:	69c0      	ldr	r0, [r0, #28]
 8003070:	4018      	ands	r0, r3
}
 8003072:	0c00      	lsrs	r0, r0, #16
 8003074:	4770      	bx	lr

08003076 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003076:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800307a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800307e:	69c0      	ldr	r0, [r0, #28]
 8003080:	4018      	ands	r0, r3
}
 8003082:	b280      	uxth	r0, r0
 8003084:	4770      	bx	lr

08003086 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003086:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800308a:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800308e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003092:	6940      	ldr	r0, [r0, #20]
}
 8003094:	4010      	ands	r0, r2
 8003096:	4770      	bx	lr

08003098 <USB_ReadDevInEPInterrupt>:
{
 8003098:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800309a:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800309e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80030a2:	f001 040f 	and.w	r4, r1, #15
 80030a6:	40e3      	lsrs	r3, r4
 80030a8:	01db      	lsls	r3, r3, #7
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80030ae:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80030b2:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
}
 80030b6:	4018      	ands	r0, r3
 80030b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030bc:	4770      	bx	lr

080030be <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80030be:	6940      	ldr	r0, [r0, #20]
}
 80030c0:	f000 0001 	and.w	r0, r0, #1
 80030c4:	4770      	bx	lr

080030c6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80030c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80030ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030ce:	f023 0307 	bic.w	r3, r3, #7
 80030d2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80030d6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	f002 0206 	and.w	r2, r2, #6
 80030e0:	2a04      	cmp	r2, #4
 80030e2:	d005      	beq.n	80030f0 <USB_ActivateSetup+0x2a>
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ea:	605a      	str	r2, [r3, #4]
}
 80030ec:	2000      	movs	r0, #0
 80030ee:	4770      	bx	lr
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80030f0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80030f4:	f042 0203 	orr.w	r2, r2, #3
 80030f8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80030fc:	e7f2      	b.n	80030e4 <USB_ActivateSetup+0x1e>
	...

08003100 <USB_EP0_OutStart>:
{
 8003100:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003102:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003104:	4b15      	ldr	r3, [pc, #84]	; (800315c <USB_EP0_OutStart+0x5c>)
 8003106:	429c      	cmp	r4, r3
 8003108:	d903      	bls.n	8003112 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800310a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800310e:	2b00      	cmp	r3, #0
 8003110:	db16      	blt.n	8003140 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003112:	2400      	movs	r4, #0
 8003114:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003118:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800311c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003120:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003124:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003128:	f044 0418 	orr.w	r4, r4, #24
 800312c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003130:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003134:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003138:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800313c:	2901      	cmp	r1, #1
 800313e:	d003      	beq.n	8003148 <USB_EP0_OutStart+0x48>
}
 8003140:	2000      	movs	r0, #0
 8003142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003146:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003148:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800314c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003150:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003154:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003158:	e7f2      	b.n	8003140 <USB_EP0_OutStart+0x40>
 800315a:	bf00      	nop
 800315c:	4f54300a 	.word	0x4f54300a

08003160 <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgFSDesc);
 8003160:	2322      	movs	r3, #34	; 0x22
 8003162:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgFSDesc;
}
 8003164:	4800      	ldr	r0, [pc, #0]	; (8003168 <USBD_HID_GetFSCfgDesc+0x8>)
 8003166:	4770      	bx	lr
 8003168:	20000090 	.word	0x20000090

0800316c <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgHSDesc);
 800316c:	2322      	movs	r3, #34	; 0x22
 800316e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgHSDesc;
}
 8003170:	4800      	ldr	r0, [pc, #0]	; (8003174 <USBD_HID_GetHSCfgDesc+0x8>)
 8003172:	4770      	bx	lr
 8003174:	200000b4 	.word	0x200000b4

08003178 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 8003178:	2322      	movs	r3, #34	; 0x22
 800317a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_OtherSpeedCfgDesc;
}
 800317c:	4800      	ldr	r0, [pc, #0]	; (8003180 <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
 800317e:	4770      	bx	lr
 8003180:	200000f0 	.word	0x200000f0

08003184 <USBD_HID_DataIn>:
                              uint8_t epnum)
{

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003184:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8003188:	2000      	movs	r0, #0
 800318a:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 800318c:	4770      	bx	lr
	...

08003190 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8003190:	230a      	movs	r3, #10
 8003192:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8003194:	4800      	ldr	r0, [pc, #0]	; (8003198 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8003196:	4770      	bx	lr
 8003198:	200000e4 	.word	0x200000e4

0800319c <USBD_HID_Setup>:
{
 800319c:	b510      	push	{r4, lr}
 800319e:	b082      	sub	sp, #8
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 80031a0:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  uint16_t status_info = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031aa:	780b      	ldrb	r3, [r1, #0]
 80031ac:	f013 0360 	ands.w	r3, r3, #96	; 0x60
 80031b0:	d025      	beq.n	80031fe <USBD_HID_Setup+0x62>
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d175      	bne.n	80032a2 <USBD_HID_Setup+0x106>
    switch (req->bRequest)
 80031b6:	784b      	ldrb	r3, [r1, #1]
 80031b8:	3b02      	subs	r3, #2
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d81b      	bhi.n	80031f6 <USBD_HID_Setup+0x5a>
 80031be:	e8df f003 	tbb	[pc, r3]
 80031c2:	0914      	.short	0x0914
 80031c4:	1a1a1a1a 	.word	0x1a1a1a1a
 80031c8:	050f1a1a 	.word	0x050f1a1a
      hhid->Protocol = (uint8_t)(req->wValue);
 80031cc:	788b      	ldrb	r3, [r1, #2]
 80031ce:	6023      	str	r3, [r4, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80031d0:	2000      	movs	r0, #0
      break;
 80031d2:	e069      	b.n	80032a8 <USBD_HID_Setup+0x10c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80031d4:	2201      	movs	r2, #1
 80031d6:	4621      	mov	r1, r4
 80031d8:	f000 fd3a 	bl	8003c50 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80031dc:	2000      	movs	r0, #0
      break;
 80031de:	e063      	b.n	80032a8 <USBD_HID_Setup+0x10c>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80031e0:	884b      	ldrh	r3, [r1, #2]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	6063      	str	r3, [r4, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80031e6:	2000      	movs	r0, #0
      break;
 80031e8:	e05e      	b.n	80032a8 <USBD_HID_Setup+0x10c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80031ea:	2201      	movs	r2, #1
 80031ec:	1d21      	adds	r1, r4, #4
 80031ee:	f000 fd2f 	bl	8003c50 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80031f2:	2000      	movs	r0, #0
      break;
 80031f4:	e058      	b.n	80032a8 <USBD_HID_Setup+0x10c>
      USBD_CtlError (pdev, req);
 80031f6:	f000 fa30 	bl	800365a <USBD_CtlError>
      ret = USBD_FAIL;
 80031fa:	2002      	movs	r0, #2
      break;
 80031fc:	e054      	b.n	80032a8 <USBD_HID_Setup+0x10c>
    switch (req->bRequest)
 80031fe:	784b      	ldrb	r3, [r1, #1]
 8003200:	2b0b      	cmp	r3, #11
 8003202:	d84a      	bhi.n	800329a <USBD_HID_Setup+0xfe>
 8003204:	e8df f003 	tbb	[pc, r3]
 8003208:	49494906 	.word	0x49494906
 800320c:	49154949 	.word	0x49154949
 8003210:	3d2e4949 	.word	0x3d2e4949
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003214:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003218:	2b03      	cmp	r3, #3
 800321a:	d003      	beq.n	8003224 <USBD_HID_Setup+0x88>
        USBD_CtlError (pdev, req);
 800321c:	f000 fa1d 	bl	800365a <USBD_CtlError>
			  ret = USBD_FAIL;
 8003220:	2002      	movs	r0, #2
 8003222:	e041      	b.n	80032a8 <USBD_HID_Setup+0x10c>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8003224:	2202      	movs	r2, #2
 8003226:	f10d 0106 	add.w	r1, sp, #6
 800322a:	f000 fd11 	bl	8003c50 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800322e:	2000      	movs	r0, #0
 8003230:	e03a      	b.n	80032a8 <USBD_HID_Setup+0x10c>
      if(req->wValue >> 8 == HID_REPORT_DESC)
 8003232:	884b      	ldrh	r3, [r1, #2]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	2b22      	cmp	r3, #34	; 0x22
 8003238:	d005      	beq.n	8003246 <USBD_HID_Setup+0xaa>
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800323a:	2b21      	cmp	r3, #33	; 0x21
 800323c:	d00c      	beq.n	8003258 <USBD_HID_Setup+0xbc>
        USBD_CtlError (pdev, req);
 800323e:	f000 fa0c 	bl	800365a <USBD_CtlError>
        ret = USBD_FAIL;
 8003242:	2002      	movs	r0, #2
        break;
 8003244:	e030      	b.n	80032a8 <USBD_HID_Setup+0x10c>
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 8003246:	88ca      	ldrh	r2, [r1, #6]
 8003248:	2a4e      	cmp	r2, #78	; 0x4e
 800324a:	bf28      	it	cs
 800324c:	224e      	movcs	r2, #78	; 0x4e
        pbuf = HID_CUSTOM_ReportDesc;
 800324e:	4917      	ldr	r1, [pc, #92]	; (80032ac <USBD_HID_Setup+0x110>)
      USBD_CtlSendData (pdev, pbuf, len);
 8003250:	f000 fcfe 	bl	8003c50 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003254:	2000      	movs	r0, #0
      break;
 8003256:	e027      	b.n	80032a8 <USBD_HID_Setup+0x10c>
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8003258:	88ca      	ldrh	r2, [r1, #6]
 800325a:	2a09      	cmp	r2, #9
 800325c:	bf28      	it	cs
 800325e:	2209      	movcs	r2, #9
        pbuf = USBD_HID_Desc;
 8003260:	4913      	ldr	r1, [pc, #76]	; (80032b0 <USBD_HID_Setup+0x114>)
 8003262:	e7f5      	b.n	8003250 <USBD_HID_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003264:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003268:	2b03      	cmp	r3, #3
 800326a:	d003      	beq.n	8003274 <USBD_HID_Setup+0xd8>
        USBD_CtlError (pdev, req);
 800326c:	f000 f9f5 	bl	800365a <USBD_CtlError>
			  ret = USBD_FAIL;
 8003270:	2002      	movs	r0, #2
 8003272:	e019      	b.n	80032a8 <USBD_HID_Setup+0x10c>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8003274:	2201      	movs	r2, #1
 8003276:	f104 0108 	add.w	r1, r4, #8
 800327a:	f000 fce9 	bl	8003c50 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800327e:	2000      	movs	r0, #0
 8003280:	e012      	b.n	80032a8 <USBD_HID_Setup+0x10c>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003282:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003286:	2b03      	cmp	r3, #3
 8003288:	d003      	beq.n	8003292 <USBD_HID_Setup+0xf6>
        USBD_CtlError (pdev, req);
 800328a:	f000 f9e6 	bl	800365a <USBD_CtlError>
			  ret = USBD_FAIL;
 800328e:	2002      	movs	r0, #2
 8003290:	e00a      	b.n	80032a8 <USBD_HID_Setup+0x10c>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8003292:	788b      	ldrb	r3, [r1, #2]
 8003294:	60a3      	str	r3, [r4, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8003296:	2000      	movs	r0, #0
 8003298:	e006      	b.n	80032a8 <USBD_HID_Setup+0x10c>
      USBD_CtlError (pdev, req);
 800329a:	f000 f9de 	bl	800365a <USBD_CtlError>
      ret = USBD_FAIL;
 800329e:	2002      	movs	r0, #2
      break;
 80032a0:	e002      	b.n	80032a8 <USBD_HID_Setup+0x10c>
    USBD_CtlError (pdev, req);
 80032a2:	f000 f9da 	bl	800365a <USBD_CtlError>
    ret = USBD_FAIL;
 80032a6:	2002      	movs	r0, #2
}
 80032a8:	b002      	add	sp, #8
 80032aa:	bd10      	pop	{r4, pc}
 80032ac:	20000008 	.word	0x20000008
 80032b0:	200000d8 	.word	0x200000d8

080032b4 <USBD_HID_DeInit>:
{
 80032b4:	b510      	push	{r4, lr}
 80032b6:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80032b8:	2181      	movs	r1, #129	; 0x81
 80032ba:	f001 fd16 	bl	8004cea <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if(pdev->pClassData != NULL)
 80032c2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 80032c6:	b120      	cbz	r0, 80032d2 <USBD_HID_DeInit+0x1e>
    USBD_free(pdev->pClassData);
 80032c8:	f001 fe2c 	bl	8004f24 <free>
    pdev->pClassData = NULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
}
 80032d2:	2000      	movs	r0, #0
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <USBD_HID_Init>:
{
 80032d6:	b510      	push	{r4, lr}
 80032d8:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80032da:	2305      	movs	r3, #5
 80032dc:	2203      	movs	r2, #3
 80032de:	2181      	movs	r1, #129	; 0x81
 80032e0:	f001 fcf8 	bl	8004cd4 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80032e4:	2301      	movs	r3, #1
 80032e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80032e8:	2010      	movs	r0, #16
 80032ea:	f001 fe13 	bl	8004f14 <malloc>
 80032ee:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if (pdev->pClassData == NULL)
 80032f2:	b118      	cbz	r0, 80032fc <USBD_HID_Init+0x26>
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	7303      	strb	r3, [r0, #12]
  return USBD_OK;
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80032fc:	2002      	movs	r0, #2
}
 80032fe:	bd10      	pop	{r4, pc}

08003300 <USBD_HID_SendReport>:
{
 8003300:	b538      	push	{r3, r4, r5, lr}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8003302:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8003306:	f890 4274 	ldrb.w	r4, [r0, #628]	; 0x274
 800330a:	2c03      	cmp	r4, #3
 800330c:	d001      	beq.n	8003312 <USBD_HID_SendReport+0x12>
}
 800330e:	2000      	movs	r0, #0
 8003310:	bd38      	pop	{r3, r4, r5, pc}
    if(hhid->state == HID_IDLE)
 8003312:	7b2b      	ldrb	r3, [r5, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1fa      	bne.n	800330e <USBD_HID_SendReport+0xe>
 8003318:	4613      	mov	r3, r2
 800331a:	460a      	mov	r2, r1
      hhid->state = HID_BUSY;
 800331c:	2101      	movs	r1, #1
 800331e:	7329      	strb	r1, [r5, #12]
      USBD_LL_Transmit (pdev,
 8003320:	2181      	movs	r1, #129	; 0x81
 8003322:	f001 fd02 	bl	8004d2a <USBD_LL_Transmit>
 8003326:	e7f2      	b.n	800330e <USBD_HID_SendReport+0xe>

08003328 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003328:	b198      	cbz	r0, 8003352 <USBD_Init+0x2a>
{
 800332a:	b508      	push	{r3, lr}
 800332c:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800332e:	f8d0 028c 	ldr.w	r0, [r0, #652]	; 0x28c
 8003332:	b110      	cbz	r0, 800333a <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003334:	2000      	movs	r0, #0
 8003336:	f8c3 028c 	str.w	r0, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800333a:	b109      	cbz	r1, 8003340 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800333c:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
 8003340:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003342:	2301      	movs	r3, #1
 8003344:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8003348:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800334a:	f001 fc67 	bl	8004c1c <USBD_LL_Init>

  return USBD_OK;
 800334e:	2000      	movs	r0, #0
 8003350:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003352:	2002      	movs	r0, #2
 8003354:	4770      	bx	lr

08003356 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003356:	b119      	cbz	r1, 8003360 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003358:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800335c:	2000      	movs	r0, #0
 800335e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003360:	2002      	movs	r0, #2
  }

  return status;
}
 8003362:	4770      	bx	lr

08003364 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003364:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003366:	f001 fcad 	bl	8004cc4 <USBD_LL_Start>

  return USBD_OK;
}
 800336a:	2000      	movs	r0, #0
 800336c:	bd08      	pop	{r3, pc}

0800336e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800336e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8003370:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003374:	b123      	cbz	r3, 8003380 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4798      	blx	r3
 800337a:	b118      	cbz	r0, 8003384 <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800337c:	2002      	movs	r0, #2
 800337e:	bd08      	pop	{r3, pc}
 8003380:	2002      	movs	r0, #2
 8003382:	bd08      	pop	{r3, pc}
    {
      ret = USBD_OK;
 8003384:	2000      	movs	r0, #0
    }
  }

  return ret;
}
 8003386:	bd08      	pop	{r3, pc}

08003388 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003388:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800338a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4798      	blx	r3
  return USBD_OK;
}
 8003392:	2000      	movs	r0, #0
 8003394:	bd08      	pop	{r3, pc}

08003396 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003396:	b538      	push	{r3, r4, r5, lr}
 8003398:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800339a:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f947 	bl	8003632 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80033aa:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80033ae:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80033b2:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 80033b6:	f001 031f 	and.w	r3, r1, #31
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d00e      	beq.n	80033dc <USBD_LL_SetupStage+0x46>
 80033be:	b13b      	cbz	r3, 80033d0 <USBD_LL_SetupStage+0x3a>
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d010      	beq.n	80033e6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80033c4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80033c8:	4620      	mov	r0, r4
 80033ca:	f001 fc96 	bl	8004cfa <USBD_LL_StallEP>
    break;
 80033ce:	e003      	b.n	80033d8 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80033d0:	4629      	mov	r1, r5
 80033d2:	4620      	mov	r0, r4
 80033d4:	f000 fab7 	bl	8003946 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80033d8:	2000      	movs	r0, #0
 80033da:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80033dc:	4629      	mov	r1, r5
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 fae5 	bl	80039ae <USBD_StdItfReq>
    break;
 80033e4:	e7f8      	b.n	80033d8 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 80033e6:	4629      	mov	r1, r5
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 fb10 	bl	8003a0e <USBD_StdEPReq>
    break;
 80033ee:	e7f3      	b.n	80033d8 <USBD_LL_SetupStage+0x42>

080033f0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80033f4:	bba9      	cbnz	r1, 8003462 <USBD_LL_DataOutStage+0x72>
 80033f6:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80033f8:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d003      	beq.n	8003408 <USBD_LL_DataOutStage+0x18>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003400:	2b05      	cmp	r3, #5
 8003402:	d025      	beq.n	8003450 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003404:	2000      	movs	r0, #0
 8003406:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 8003408:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800340c:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 8003410:	4293      	cmp	r3, r2
 8003412:	d90d      	bls.n	8003430 <USBD_LL_DataOutStage+0x40>
        pep->rem_length -=  pep->maxpacket;
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800341a:	429a      	cmp	r2, r3
 800341c:	d906      	bls.n	800342c <USBD_LL_DataOutStage+0x3c>
 800341e:	b29a      	uxth	r2, r3
 8003420:	4601      	mov	r1, r0
 8003422:	4620      	mov	r0, r4
 8003424:	f000 fc29 	bl	8003c7a <USBD_CtlContinueRx>
  return USBD_OK;
 8003428:	2000      	movs	r0, #0
 800342a:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlContinueRx (pdev,
 800342c:	b292      	uxth	r2, r2
 800342e:	e7f7      	b.n	8003420 <USBD_LL_DataOutStage+0x30>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003430:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	b11b      	cbz	r3, 8003440 <USBD_LL_DataOutStage+0x50>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003438:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800343c:	2a03      	cmp	r2, #3
 800343e:	d004      	beq.n	800344a <USBD_LL_DataOutStage+0x5a>
        USBD_CtlSendStatus(pdev);
 8003440:	4620      	mov	r0, r4
 8003442:	f000 fc22 	bl	8003c8a <USBD_CtlSendStatus>
  return USBD_OK;
 8003446:	2000      	movs	r0, #0
 8003448:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800344a:	4620      	mov	r0, r4
 800344c:	4798      	blx	r3
 800344e:	e7f7      	b.n	8003440 <USBD_LL_DataOutStage+0x50>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003450:	2500      	movs	r5, #0
 8003452:	f8c4 526c 	str.w	r5, [r4, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8003456:	4629      	mov	r1, r5
 8003458:	4620      	mov	r0, r4
 800345a:	f001 fc4e 	bl	8004cfa <USBD_LL_StallEP>
  return USBD_OK;
 800345e:	4628      	mov	r0, r5
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL) &&
 8003464:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	b14b      	cbz	r3, 8003480 <USBD_LL_DataOutStage+0x90>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800346c:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8003470:	2903      	cmp	r1, #3
 8003472:	d001      	beq.n	8003478 <USBD_LL_DataOutStage+0x88>
    return USBD_FAIL;
 8003474:	2002      	movs	r0, #2
}
 8003476:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->DataOut(pdev, epnum);
 8003478:	4611      	mov	r1, r2
 800347a:	4798      	blx	r3
  return USBD_OK;
 800347c:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800347e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003480:	2002      	movs	r0, #2
 8003482:	bd38      	pop	{r3, r4, r5, pc}

08003484 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8003484:	b510      	push	{r4, lr}
 8003486:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8003488:	2900      	cmp	r1, #0
 800348a:	d154      	bne.n	8003536 <USBD_LL_DataInStage+0xb2>
 800348c:	4610      	mov	r0, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800348e:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
 8003492:	2b02      	cmp	r3, #2
 8003494:	d00c      	beq.n	80034b0 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003496:	2b04      	cmp	r3, #4
 8003498:	d000      	beq.n	800349c <USBD_LL_DataInStage+0x18>
 800349a:	b91b      	cbnz	r3, 80034a4 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	4620      	mov	r0, r4
 80034a0:	f001 fc2b 	bl	8004cfa <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80034a4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d040      	beq.n	800352e <USBD_LL_DataInStage+0xaa>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80034ac:	2000      	movs	r0, #0
 80034ae:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80034b0:	6a23      	ldr	r3, [r4, #32]
 80034b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d81b      	bhi.n	80034f0 <USBD_LL_DataInStage+0x6c>
        if((pep->total_length % pep->maxpacket == 0U) &&
 80034b8:	69e1      	ldr	r1, [r4, #28]
 80034ba:	fbb1 f3f2 	udiv	r3, r1, r2
 80034be:	fb02 1313 	mls	r3, r2, r3, r1
 80034c2:	b92b      	cbnz	r3, 80034d0 <USBD_LL_DataInStage+0x4c>
 80034c4:	428a      	cmp	r2, r1
 80034c6:	d803      	bhi.n	80034d0 <USBD_LL_DataInStage+0x4c>
           (pep->total_length < pdev->ep0_data_len))
 80034c8:	f8d4 3270 	ldr.w	r3, [r4, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80034cc:	4299      	cmp	r1, r3
 80034ce:	d31d      	bcc.n	800350c <USBD_LL_DataInStage+0x88>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80034d0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	b11b      	cbz	r3, 80034e0 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80034d8:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80034dc:	2a03      	cmp	r2, #3
 80034de:	d023      	beq.n	8003528 <USBD_LL_DataInStage+0xa4>
          USBD_LL_StallEP(pdev, 0x80U);
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	4620      	mov	r0, r4
 80034e4:	f001 fc09 	bl	8004cfa <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 fbd9 	bl	8003ca0 <USBD_CtlReceiveStatus>
 80034ee:	e7d9      	b.n	80034a4 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 80034f0:	1a9a      	subs	r2, r3, r2
 80034f2:	6222      	str	r2, [r4, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80034f4:	b292      	uxth	r2, r2
 80034f6:	4601      	mov	r1, r0
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 fbb6 	bl	8003c6a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80034fe:	2300      	movs	r3, #0
 8003500:	461a      	mov	r2, r3
 8003502:	4619      	mov	r1, r3
 8003504:	4620      	mov	r0, r4
 8003506:	f001 fc18 	bl	8004d3a <USBD_LL_PrepareReceive>
 800350a:	e7cb      	b.n	80034a4 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800350c:	2200      	movs	r2, #0
 800350e:	4611      	mov	r1, r2
 8003510:	4620      	mov	r0, r4
 8003512:	f000 fbaa 	bl	8003c6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003516:	2100      	movs	r1, #0
 8003518:	f8c4 1270 	str.w	r1, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800351c:	460b      	mov	r3, r1
 800351e:	460a      	mov	r2, r1
 8003520:	4620      	mov	r0, r4
 8003522:	f001 fc0a 	bl	8004d3a <USBD_LL_PrepareReceive>
 8003526:	e7bd      	b.n	80034a4 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8003528:	4620      	mov	r0, r4
 800352a:	4798      	blx	r3
 800352c:	e7d8      	b.n	80034e0 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 800352e:	2000      	movs	r0, #0
 8003530:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8003534:	bd10      	pop	{r4, pc}
 8003536:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL) &&
 8003538:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	b14b      	cbz	r3, 8003554 <USBD_LL_DataInStage+0xd0>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003540:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8003544:	2903      	cmp	r1, #3
 8003546:	d001      	beq.n	800354c <USBD_LL_DataInStage+0xc8>
    return USBD_FAIL;
 8003548:	2002      	movs	r0, #2
}
 800354a:	bd10      	pop	{r4, pc}
    pdev->pClass->DataIn(pdev, epnum);
 800354c:	4611      	mov	r1, r2
 800354e:	4798      	blx	r3
  return USBD_OK;
 8003550:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003552:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003554:	2002      	movs	r0, #2
 8003556:	bd10      	pop	{r4, pc}

08003558 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800355c:	2340      	movs	r3, #64	; 0x40
 800355e:	2200      	movs	r2, #0
 8003560:	4611      	mov	r1, r2
 8003562:	f001 fbb7 	bl	8004cd4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003566:	2501      	movs	r5, #1
 8003568:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800356c:	2640      	movs	r6, #64	; 0x40
 800356e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003572:	4633      	mov	r3, r6
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	4620      	mov	r0, r4
 800357a:	f001 fbab 	bl	8004cd4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800357e:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003580:	6266      	str	r6, [r4, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003582:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800358c:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800358e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c

  if (pdev->pClassData)
 8003592:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8003596:	b12b      	cbz	r3, 80035a4 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003598:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2100      	movs	r1, #0
 80035a0:	4620      	mov	r0, r4
 80035a2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80035a4:	2000      	movs	r0, #0
 80035a6:	bd70      	pop	{r4, r5, r6, pc}

080035a8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80035a8:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80035aa:	2000      	movs	r0, #0
 80035ac:	4770      	bx	lr

080035ae <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80035ae:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80035b2:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80035b6:	2304      	movs	r3, #4
 80035b8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80035bc:	2000      	movs	r0, #0
 80035be:	4770      	bx	lr

080035c0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 80035c0:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80035c4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80035c8:	2000      	movs	r0, #0
 80035ca:	4770      	bx	lr

080035cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80035cc:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80035ce:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d001      	beq.n	80035da <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80035d6:	2000      	movs	r0, #0
 80035d8:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 80035da:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f8      	beq.n	80035d6 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80035e4:	4798      	blx	r3
 80035e6:	e7f6      	b.n	80035d6 <USBD_LL_SOF+0xa>

080035e8 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80035e8:	2000      	movs	r0, #0
 80035ea:	4770      	bx	lr

080035ec <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80035ec:	2000      	movs	r0, #0
 80035ee:	4770      	bx	lr

080035f0 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80035f0:	2000      	movs	r0, #0
 80035f2:	4770      	bx	lr

080035f4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80035f4:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80035f6:	2201      	movs	r2, #1
 80035f8:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80035fc:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8003600:	6852      	ldr	r2, [r2, #4]
 8003602:	7901      	ldrb	r1, [r0, #4]
 8003604:	4790      	blx	r2

  return USBD_OK;
}
 8003606:	2000      	movs	r0, #0
 8003608:	bd08      	pop	{r3, pc}

0800360a <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;
 800360a:	2300      	movs	r3, #0

    while (*buf != '\0')
 800360c:	e002      	b.n	8003614 <USBD_GetLen+0xa>
    {
        len++;
 800360e:	3301      	adds	r3, #1
 8003610:	b2db      	uxtb	r3, r3
        buf++;
 8003612:	3001      	adds	r0, #1
    while (*buf != '\0')
 8003614:	7802      	ldrb	r2, [r0, #0]
 8003616:	2a00      	cmp	r2, #0
 8003618:	d1f9      	bne.n	800360e <USBD_GetLen+0x4>
    }

    return len;
}
 800361a:	4618      	mov	r0, r3
 800361c:	4770      	bx	lr

0800361e <USBD_SetFeature>:
{
 800361e:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003620:	884b      	ldrh	r3, [r1, #2]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d000      	beq.n	8003628 <USBD_SetFeature+0xa>
 8003626:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003628:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800362c:	f000 fb2d 	bl	8003c8a <USBD_CtlSendStatus>
}
 8003630:	e7f9      	b.n	8003626 <USBD_SetFeature+0x8>

08003632 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003632:	780b      	ldrb	r3, [r1, #0]
 8003634:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003636:	784b      	ldrb	r3, [r1, #1]
 8003638:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800363a:	788b      	ldrb	r3, [r1, #2]
 800363c:	78ca      	ldrb	r2, [r1, #3]
 800363e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003642:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003644:	790b      	ldrb	r3, [r1, #4]
 8003646:	794a      	ldrb	r2, [r1, #5]
 8003648:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800364c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800364e:	798b      	ldrb	r3, [r1, #6]
 8003650:	79ca      	ldrb	r2, [r1, #7]
 8003652:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003656:	80c3      	strh	r3, [r0, #6]
 8003658:	4770      	bx	lr

0800365a <USBD_CtlError>:
{
 800365a:	b510      	push	{r4, lr}
 800365c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	f001 fb4b 	bl	8004cfa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003664:	2100      	movs	r1, #0
 8003666:	4620      	mov	r0, r4
 8003668:	f001 fb47 	bl	8004cfa <USBD_LL_StallEP>
 800366c:	bd10      	pop	{r4, pc}

0800366e <USBD_GetDescriptor>:
{
 800366e:	b530      	push	{r4, r5, lr}
 8003670:	b083      	sub	sp, #12
 8003672:	4605      	mov	r5, r0
 8003674:	460c      	mov	r4, r1
  switch (req->wValue >> 8)
 8003676:	884a      	ldrh	r2, [r1, #2]
 8003678:	0a13      	lsrs	r3, r2, #8
 800367a:	3b01      	subs	r3, #1
 800367c:	2b06      	cmp	r3, #6
 800367e:	f200 8084 	bhi.w	800378a <USBD_GetDescriptor+0x11c>
 8003682:	e8df f003 	tbb	[pc, r3]
 8003686:	1604      	.short	0x1604
 8003688:	6682822a 	.word	0x6682822a
 800368c:	73          	.byte	0x73
 800368d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800368e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f10d 0106 	add.w	r1, sp, #6
 8003698:	7c00      	ldrb	r0, [r0, #16]
 800369a:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 800369c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80036a0:	b112      	cbz	r2, 80036a8 <USBD_GetDescriptor+0x3a>
 80036a2:	88e3      	ldrh	r3, [r4, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d174      	bne.n	8003792 <USBD_GetDescriptor+0x124>
  if(req->wLength == 0U)
 80036a8:	88e3      	ldrh	r3, [r4, #6]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d07b      	beq.n	80037a6 <USBD_GetDescriptor+0x138>
}
 80036ae:	b003      	add	sp, #12
 80036b0:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80036b2:	7c03      	ldrb	r3, [r0, #16]
 80036b4:	b943      	cbnz	r3, 80036c8 <USBD_GetDescriptor+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80036b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	f10d 0006 	add.w	r0, sp, #6
 80036c0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80036c2:	2302      	movs	r3, #2
 80036c4:	7043      	strb	r3, [r0, #1]
 80036c6:	e7e9      	b.n	800369c <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80036c8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f10d 0006 	add.w	r0, sp, #6
 80036d2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80036d4:	2302      	movs	r3, #2
 80036d6:	7043      	strb	r3, [r0, #1]
 80036d8:	e7e0      	b.n	800369c <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	2a05      	cmp	r2, #5
 80036de:	d834      	bhi.n	800374a <USBD_GetDescriptor+0xdc>
 80036e0:	e8df f002 	tbb	[pc, r2]
 80036e4:	1b130b03 	.word	0x1b130b03
 80036e8:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80036ea:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f10d 0106 	add.w	r1, sp, #6
 80036f4:	7c00      	ldrb	r0, [r0, #16]
 80036f6:	4798      	blx	r3
      break;
 80036f8:	e7d0      	b.n	800369c <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80036fa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f10d 0106 	add.w	r1, sp, #6
 8003704:	7c00      	ldrb	r0, [r0, #16]
 8003706:	4798      	blx	r3
      break;
 8003708:	e7c8      	b.n	800369c <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800370a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f10d 0106 	add.w	r1, sp, #6
 8003714:	7c00      	ldrb	r0, [r0, #16]
 8003716:	4798      	blx	r3
      break;
 8003718:	e7c0      	b.n	800369c <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800371a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f10d 0106 	add.w	r1, sp, #6
 8003724:	7c00      	ldrb	r0, [r0, #16]
 8003726:	4798      	blx	r3
      break;
 8003728:	e7b8      	b.n	800369c <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800372a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f10d 0106 	add.w	r1, sp, #6
 8003734:	7c00      	ldrb	r0, [r0, #16]
 8003736:	4798      	blx	r3
      break;
 8003738:	e7b0      	b.n	800369c <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800373a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f10d 0106 	add.w	r1, sp, #6
 8003744:	7c00      	ldrb	r0, [r0, #16]
 8003746:	4798      	blx	r3
      break;
 8003748:	e7a8      	b.n	800369c <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 800374a:	4621      	mov	r1, r4
 800374c:	f7ff ff85 	bl	800365a <USBD_CtlError>
      return;
 8003750:	e7ad      	b.n	80036ae <USBD_GetDescriptor+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003752:	7c03      	ldrb	r3, [r0, #16]
 8003754:	b933      	cbnz	r3, 8003764 <USBD_GetDescriptor+0xf6>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003756:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	f10d 0006 	add.w	r0, sp, #6
 8003760:	4798      	blx	r3
      break;
 8003762:	e79b      	b.n	800369c <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8003764:	4621      	mov	r1, r4
 8003766:	f7ff ff78 	bl	800365a <USBD_CtlError>
      return;
 800376a:	e7a0      	b.n	80036ae <USBD_GetDescriptor+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800376c:	7c03      	ldrb	r3, [r0, #16]
 800376e:	b943      	cbnz	r3, 8003782 <USBD_GetDescriptor+0x114>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003770:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f10d 0006 	add.w	r0, sp, #6
 800377a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800377c:	2307      	movs	r3, #7
 800377e:	7043      	strb	r3, [r0, #1]
      break;
 8003780:	e78c      	b.n	800369c <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 8003782:	4621      	mov	r1, r4
 8003784:	f7ff ff69 	bl	800365a <USBD_CtlError>
      return;
 8003788:	e791      	b.n	80036ae <USBD_GetDescriptor+0x40>
     USBD_CtlError(pdev , req);
 800378a:	4621      	mov	r1, r4
 800378c:	f7ff ff65 	bl	800365a <USBD_CtlError>
    return;
 8003790:	e78d      	b.n	80036ae <USBD_GetDescriptor+0x40>
    len = MIN(len, req->wLength);
 8003792:	429a      	cmp	r2, r3
 8003794:	bf28      	it	cs
 8003796:	461a      	movcs	r2, r3
 8003798:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800379c:	4601      	mov	r1, r0
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 fa56 	bl	8003c50 <USBD_CtlSendData>
 80037a4:	e780      	b.n	80036a8 <USBD_GetDescriptor+0x3a>
   USBD_CtlSendStatus(pdev);
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 fa6f 	bl	8003c8a <USBD_CtlSendStatus>
 80037ac:	e77f      	b.n	80036ae <USBD_GetDescriptor+0x40>

080037ae <USBD_SetAddress>:
{
 80037ae:	b538      	push	{r3, r4, r5, lr}
 80037b0:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80037b2:	888b      	ldrh	r3, [r1, #4]
 80037b4:	b9f3      	cbnz	r3, 80037f4 <USBD_SetAddress+0x46>
 80037b6:	88cb      	ldrh	r3, [r1, #6]
 80037b8:	b9e3      	cbnz	r3, 80037f4 <USBD_SetAddress+0x46>
 80037ba:	884b      	ldrh	r3, [r1, #2]
 80037bc:	2b7f      	cmp	r3, #127	; 0x7f
 80037be:	d819      	bhi.n	80037f4 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80037c0:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037c4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d00c      	beq.n	80037e6 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80037cc:	f880 5276 	strb.w	r5, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80037d0:	4629      	mov	r1, r5
 80037d2:	f001 faa2 	bl	8004d1a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 fa57 	bl	8003c8a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80037dc:	b135      	cbz	r5, 80037ec <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80037de:	2302      	movs	r3, #2
 80037e0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev , req);
 80037e6:	f7ff ff38 	bl	800365a <USBD_CtlError>
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_DEFAULT;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
    USBD_CtlError(pdev, req);
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff ff30 	bl	800365a <USBD_CtlError>
 80037fa:	bd38      	pop	{r3, r4, r5, pc}

080037fc <USBD_SetConfig>:
{
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4604      	mov	r4, r0
 8003800:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8003802:	7889      	ldrb	r1, [r1, #2]
 8003804:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <USBD_SetConfig+0xac>)
 8003806:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003808:	2901      	cmp	r1, #1
 800380a:	d80e      	bhi.n	800382a <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 800380c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003810:	2b02      	cmp	r3, #2
 8003812:	d00e      	beq.n	8003832 <USBD_SetConfig+0x36>
 8003814:	2b03      	cmp	r3, #3
 8003816:	d021      	beq.n	800385c <USBD_SetConfig+0x60>
      USBD_CtlError(pdev, req);
 8003818:	4629      	mov	r1, r5
 800381a:	f7ff ff1e 	bl	800365a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <USBD_SetConfig+0xac>)
 8003820:	7819      	ldrb	r1, [r3, #0]
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff fdb0 	bl	8003388 <USBD_ClrClassConfig>
 8003828:	bd38      	pop	{r3, r4, r5, pc}
    USBD_CtlError(pdev, req);
 800382a:	4629      	mov	r1, r5
 800382c:	f7ff ff15 	bl	800365a <USBD_CtlError>
 8003830:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx)
 8003832:	b181      	cbz	r1, 8003856 <USBD_SetConfig+0x5a>
        pdev->dev_config = cfgidx;
 8003834:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003836:	2303      	movs	r3, #3
 8003838:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800383c:	f7ff fd97 	bl	800336e <USBD_SetClassConfig>
 8003840:	2802      	cmp	r0, #2
 8003842:	d003      	beq.n	800384c <USBD_SetConfig+0x50>
        USBD_CtlSendStatus(pdev);
 8003844:	4620      	mov	r0, r4
 8003846:	f000 fa20 	bl	8003c8a <USBD_CtlSendStatus>
 800384a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800384c:	4629      	mov	r1, r5
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ff03 	bl	800365a <USBD_CtlError>
          return;
 8003854:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 8003856:	f000 fa18 	bl	8003c8a <USBD_CtlSendStatus>
 800385a:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx == 0U)
 800385c:	b189      	cbz	r1, 8003882 <USBD_SetConfig+0x86>
      else if (cfgidx != pdev->dev_config)
 800385e:	6843      	ldr	r3, [r0, #4]
 8003860:	4299      	cmp	r1, r3
 8003862:	d01d      	beq.n	80038a0 <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	f7ff fd8f 	bl	8003388 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <USBD_SetConfig+0xac>)
 800386c:	7819      	ldrb	r1, [r3, #0]
 800386e:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff fd7c 	bl	800336e <USBD_SetClassConfig>
 8003876:	2802      	cmp	r0, #2
 8003878:	d00d      	beq.n	8003896 <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 800387a:	4620      	mov	r0, r4
 800387c:	f000 fa05 	bl	8003c8a <USBD_CtlSendStatus>
 8003880:	bd38      	pop	{r3, r4, r5, pc}
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003882:	2302      	movs	r3, #2
 8003884:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8003888:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800388a:	f7ff fd7d 	bl	8003388 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800388e:	4620      	mov	r0, r4
 8003890:	f000 f9fb 	bl	8003c8a <USBD_CtlSendStatus>
 8003894:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003896:	4629      	mov	r1, r5
 8003898:	4620      	mov	r0, r4
 800389a:	f7ff fede 	bl	800365a <USBD_CtlError>
          return;
 800389e:	bd38      	pop	{r3, r4, r5, pc}
        USBD_CtlSendStatus(pdev);
 80038a0:	f000 f9f3 	bl	8003c8a <USBD_CtlSendStatus>
 80038a4:	bd38      	pop	{r3, r4, r5, pc}
 80038a6:	bf00      	nop
 80038a8:	200001e8 	.word	0x200001e8

080038ac <USBD_GetConfig>:
{
 80038ac:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80038ae:	88cb      	ldrh	r3, [r1, #6]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d10b      	bne.n	80038cc <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80038b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80038b8:	b19b      	cbz	r3, 80038e2 <USBD_GetConfig+0x36>
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d909      	bls.n	80038d2 <USBD_GetConfig+0x26>
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d10f      	bne.n	80038e2 <USBD_GetConfig+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80038c2:	2201      	movs	r2, #1
 80038c4:	1d01      	adds	r1, r0, #4
 80038c6:	f000 f9c3 	bl	8003c50 <USBD_CtlSendData>
      break;
 80038ca:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);
 80038cc:	f7ff fec5 	bl	800365a <USBD_CtlError>
 80038d0:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 80038d2:	4601      	mov	r1, r0
 80038d4:	2300      	movs	r3, #0
 80038d6:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80038da:	2201      	movs	r2, #1
 80038dc:	f000 f9b8 	bl	8003c50 <USBD_CtlSendData>
      break;
 80038e0:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev , req);
 80038e2:	f7ff feba 	bl	800365a <USBD_CtlError>
 80038e6:	bd08      	pop	{r3, pc}

080038e8 <USBD_GetStatus>:
{
 80038e8:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80038ea:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80038ee:	3b01      	subs	r3, #1
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d812      	bhi.n	800391a <USBD_GetStatus+0x32>
    if(req->wLength != 0x2U)
 80038f4:	88cb      	ldrh	r3, [r1, #6]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d10c      	bne.n	8003914 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80038fa:	2301      	movs	r3, #1
 80038fc:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80038fe:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8003902:	b10b      	cbz	r3, 8003908 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003904:	2303      	movs	r3, #3
 8003906:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003908:	2202      	movs	r2, #2
 800390a:	f100 010c 	add.w	r1, r0, #12
 800390e:	f000 f99f 	bl	8003c50 <USBD_CtlSendData>
    break;
 8003912:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8003914:	f7ff fea1 	bl	800365a <USBD_CtlError>
      break;
 8003918:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);
 800391a:	f7ff fe9e 	bl	800365a <USBD_CtlError>
 800391e:	bd08      	pop	{r3, pc}

08003920 <USBD_ClrFeature>:
{
 8003920:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003922:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003926:	3b01      	subs	r3, #1
 8003928:	2b02      	cmp	r3, #2
 800392a:	d809      	bhi.n	8003940 <USBD_ClrFeature+0x20>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800392c:	884b      	ldrh	r3, [r1, #2]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d000      	beq.n	8003934 <USBD_ClrFeature+0x14>
 8003932:	bd08      	pop	{r3, pc}
      pdev->dev_remote_wakeup = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800393a:	f000 f9a6 	bl	8003c8a <USBD_CtlSendStatus>
 800393e:	bd08      	pop	{r3, pc}
     USBD_CtlError(pdev , req);
 8003940:	f7ff fe8b 	bl	800365a <USBD_CtlError>
}
 8003944:	e7f5      	b.n	8003932 <USBD_ClrFeature+0x12>

08003946 <USBD_StdDevReq>:
{
 8003946:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003948:	780b      	ldrb	r3, [r1, #0]
 800394a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800394e:	2b20      	cmp	r3, #32
 8003950:	d005      	beq.n	800395e <USBD_StdDevReq+0x18>
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d003      	beq.n	800395e <USBD_StdDevReq+0x18>
 8003956:	b143      	cbz	r3, 800396a <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 8003958:	f7ff fe7f 	bl	800365a <USBD_CtlError>
    break;
 800395c:	e003      	b.n	8003966 <USBD_StdDevReq+0x20>
    pdev->pClass->Setup(pdev, req);
 800395e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4798      	blx	r3
}
 8003966:	2000      	movs	r0, #0
 8003968:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 800396a:	784b      	ldrb	r3, [r1, #1]
 800396c:	2b09      	cmp	r3, #9
 800396e:	d81b      	bhi.n	80039a8 <USBD_StdDevReq+0x62>
 8003970:	e8df f003 	tbb	[pc, r3]
 8003974:	141a1711 	.word	0x141a1711
 8003978:	1a05081a 	.word	0x1a05081a
 800397c:	0b0e      	.short	0x0b0e
      USBD_GetDescriptor (pdev, req);
 800397e:	f7ff fe76 	bl	800366e <USBD_GetDescriptor>
      break;
 8003982:	e7f0      	b.n	8003966 <USBD_StdDevReq+0x20>
      USBD_SetAddress (pdev, req);
 8003984:	f7ff ff13 	bl	80037ae <USBD_SetAddress>
      break;
 8003988:	e7ed      	b.n	8003966 <USBD_StdDevReq+0x20>
      USBD_SetConfig (pdev, req);
 800398a:	f7ff ff37 	bl	80037fc <USBD_SetConfig>
      break;
 800398e:	e7ea      	b.n	8003966 <USBD_StdDevReq+0x20>
      USBD_GetConfig (pdev, req);
 8003990:	f7ff ff8c 	bl	80038ac <USBD_GetConfig>
      break;
 8003994:	e7e7      	b.n	8003966 <USBD_StdDevReq+0x20>
      USBD_GetStatus (pdev, req);
 8003996:	f7ff ffa7 	bl	80038e8 <USBD_GetStatus>
      break;
 800399a:	e7e4      	b.n	8003966 <USBD_StdDevReq+0x20>
      USBD_SetFeature (pdev, req);
 800399c:	f7ff fe3f 	bl	800361e <USBD_SetFeature>
      break;
 80039a0:	e7e1      	b.n	8003966 <USBD_StdDevReq+0x20>
      USBD_ClrFeature (pdev, req);
 80039a2:	f7ff ffbd 	bl	8003920 <USBD_ClrFeature>
      break;
 80039a6:	e7de      	b.n	8003966 <USBD_StdDevReq+0x20>
      USBD_CtlError(pdev, req);
 80039a8:	f7ff fe57 	bl	800365a <USBD_CtlError>
      break;
 80039ac:	e7db      	b.n	8003966 <USBD_StdDevReq+0x20>

080039ae <USBD_StdItfReq>:
{
 80039ae:	b538      	push	{r3, r4, r5, lr}
 80039b0:	4605      	mov	r5, r0
 80039b2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80039b4:	780b      	ldrb	r3, [r1, #0]
 80039b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d005      	beq.n	80039ca <USBD_StdItfReq+0x1c>
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d003      	beq.n	80039ca <USBD_StdItfReq+0x1c>
 80039c2:	b113      	cbz	r3, 80039ca <USBD_StdItfReq+0x1c>
    USBD_CtlError(pdev, req);
 80039c4:	f7ff fe49 	bl	800365a <USBD_CtlError>
    break;
 80039c8:	e00b      	b.n	80039e2 <USBD_StdItfReq+0x34>
    switch (pdev->dev_state)
 80039ca:	f895 3274 	ldrb.w	r3, [r5, #628]	; 0x274
 80039ce:	3b01      	subs	r3, #1
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d817      	bhi.n	8003a04 <USBD_StdItfReq+0x56>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80039d4:	7923      	ldrb	r3, [r4, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d905      	bls.n	80039e6 <USBD_StdItfReq+0x38>
        USBD_CtlError(pdev, req);
 80039da:	4621      	mov	r1, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	f7ff fe3c 	bl	800365a <USBD_CtlError>
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	bd38      	pop	{r3, r4, r5, pc}
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80039e6:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80039f2:	88e3      	ldrh	r3, [r4, #6]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f4      	bne.n	80039e2 <USBD_StdItfReq+0x34>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d1f2      	bne.n	80039e2 <USBD_StdItfReq+0x34>
          USBD_CtlSendStatus(pdev);
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 f944 	bl	8003c8a <USBD_CtlSendStatus>
 8003a02:	e7ee      	b.n	80039e2 <USBD_StdItfReq+0x34>
      USBD_CtlError(pdev, req);
 8003a04:	4621      	mov	r1, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	f7ff fe27 	bl	800365a <USBD_CtlError>
      break;
 8003a0c:	e7e9      	b.n	80039e2 <USBD_StdItfReq+0x34>

08003a0e <USBD_StdEPReq>:
{
 8003a0e:	b538      	push	{r3, r4, r5, lr}
 8003a10:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8003a12:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003a14:	780b      	ldrb	r3, [r1, #0]
 8003a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d008      	beq.n	8003a30 <USBD_StdEPReq+0x22>
 8003a1e:	b2d0      	uxtb	r0, r2
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d005      	beq.n	8003a30 <USBD_StdEPReq+0x22>
 8003a24:	b15b      	cbz	r3, 8003a3e <USBD_StdEPReq+0x30>
    USBD_CtlError(pdev, req);
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7ff fe17 	bl	800365a <USBD_CtlError>
  return ret;
 8003a2c:	2000      	movs	r0, #0
    break;
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 8003a30:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4620      	mov	r0, r4
 8003a38:	4798      	blx	r3
  return ret;
 8003a3a:	2000      	movs	r0, #0
    break;
 8003a3c:	bd38      	pop	{r3, r4, r5, pc}
    if ((req->bmRequest & 0x60U) == 0x20U)
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d012      	beq.n	8003a68 <USBD_StdEPReq+0x5a>
    switch (req->bRequest)
 8003a42:	784b      	ldrb	r3, [r1, #1]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d038      	beq.n	8003aba <USBD_StdEPReq+0xac>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d064      	beq.n	8003b16 <USBD_StdEPReq+0x108>
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	f040 80dc 	bne.w	8003c0a <USBD_StdEPReq+0x1fc>
      switch (pdev->dev_state)
 8003a52:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d00c      	beq.n	8003a74 <USBD_StdEPReq+0x66>
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d01c      	beq.n	8003a98 <USBD_StdEPReq+0x8a>
        USBD_CtlError(pdev, req);
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7ff fdfb 	bl	800365a <USBD_CtlError>
  return ret;
 8003a64:	2000      	movs	r0, #0
        break;
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003a68:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4620      	mov	r0, r4
 8003a70:	4798      	blx	r3
      return ret;
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a74:	b158      	cbz	r0, 8003a8e <USBD_StdEPReq+0x80>
 8003a76:	2880      	cmp	r0, #128	; 0x80
 8003a78:	d009      	beq.n	8003a8e <USBD_StdEPReq+0x80>
          USBD_LL_StallEP(pdev, ep_addr);
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f001 f93c 	bl	8004cfa <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003a82:	2180      	movs	r1, #128	; 0x80
 8003a84:	4620      	mov	r0, r4
 8003a86:	f001 f938 	bl	8004cfa <USBD_LL_StallEP>
  return ret;
 8003a8a:	2000      	movs	r0, #0
          USBD_LL_StallEP(pdev, 0x80U);
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff fde3 	bl	800365a <USBD_CtlError>
  return ret;
 8003a94:	2000      	movs	r0, #0
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003a98:	884b      	ldrh	r3, [r1, #2]
 8003a9a:	b923      	cbnz	r3, 8003aa6 <USBD_StdEPReq+0x98>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003a9c:	b118      	cbz	r0, 8003aa6 <USBD_StdEPReq+0x98>
 8003a9e:	2880      	cmp	r0, #128	; 0x80
 8003aa0:	d001      	beq.n	8003aa6 <USBD_StdEPReq+0x98>
 8003aa2:	88cb      	ldrh	r3, [r1, #6]
 8003aa4:	b123      	cbz	r3, 8003ab0 <USBD_StdEPReq+0xa2>
        USBD_CtlSendStatus(pdev);
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f000 f8ef 	bl	8003c8a <USBD_CtlSendStatus>
  return ret;
 8003aac:	2000      	movs	r0, #0
        break;
 8003aae:	bd38      	pop	{r3, r4, r5, pc}
            USBD_LL_StallEP(pdev, ep_addr);
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f001 f921 	bl	8004cfa <USBD_LL_StallEP>
 8003ab8:	e7f5      	b.n	8003aa6 <USBD_StdEPReq+0x98>
      switch (pdev->dev_state)
 8003aba:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d006      	beq.n	8003ad0 <USBD_StdEPReq+0xc2>
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d016      	beq.n	8003af4 <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7ff fdc7 	bl	800365a <USBD_CtlError>
  return ret;
 8003acc:	2000      	movs	r0, #0
        break;
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ad0:	b158      	cbz	r0, 8003aea <USBD_StdEPReq+0xdc>
 8003ad2:	2880      	cmp	r0, #128	; 0x80
 8003ad4:	d009      	beq.n	8003aea <USBD_StdEPReq+0xdc>
          USBD_LL_StallEP(pdev, ep_addr);
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f001 f90e 	bl	8004cfa <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f001 f90a 	bl	8004cfa <USBD_LL_StallEP>
  return ret;
 8003ae6:	2000      	movs	r0, #0
          USBD_LL_StallEP(pdev, 0x80U);
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7ff fdb5 	bl	800365a <USBD_CtlError>
  return ret;
 8003af0:	2000      	movs	r0, #0
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003af4:	884b      	ldrh	r3, [r1, #2]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f040 808c 	bne.w	8003c14 <USBD_StdEPReq+0x206>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003afc:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8003b00:	d104      	bne.n	8003b0c <USBD_StdEPReq+0xfe>
          USBD_CtlSendStatus(pdev);
 8003b02:	4620      	mov	r0, r4
 8003b04:	f000 f8c1 	bl	8003c8a <USBD_CtlSendStatus>
  return ret;
 8003b08:	2000      	movs	r0, #0
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003b0c:	4601      	mov	r1, r0
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f001 f8fb 	bl	8004d0a <USBD_LL_ClearStallEP>
 8003b14:	e7f5      	b.n	8003b02 <USBD_StdEPReq+0xf4>
      switch (pdev->dev_state)
 8003b16:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d006      	beq.n	8003b2c <USBD_StdEPReq+0x11e>
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d029      	beq.n	8003b76 <USBD_StdEPReq+0x168>
        USBD_CtlError(pdev, req);
 8003b22:	4620      	mov	r0, r4
 8003b24:	f7ff fd99 	bl	800365a <USBD_CtlError>
  return ret;
 8003b28:	2000      	movs	r0, #0
        break;
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003b2c:	b108      	cbz	r0, 8003b32 <USBD_StdEPReq+0x124>
 8003b2e:	2880      	cmp	r0, #128	; 0x80
 8003b30:	d112      	bne.n	8003b58 <USBD_StdEPReq+0x14a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b32:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b36:	d114      	bne.n	8003b62 <USBD_StdEPReq+0x154>
          &pdev->ep_out[ep_addr & 0x7FU];
 8003b38:	f000 007f 	and.w	r0, r0, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b40:	0083      	lsls	r3, r0, #2
 8003b42:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003b46:	18e1      	adds	r1, r4, r3
          pep->status = 0x0000U;
 8003b48:	2500      	movs	r5, #0
 8003b4a:	600d      	str	r5, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 f87e 	bl	8003c50 <USBD_CtlSendData>
  return ret;
 8003b54:	4628      	mov	r0, r5
          break;
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff fd7e 	bl	800365a <USBD_CtlError>
  return ret;
 8003b5e:	2000      	movs	r0, #0
          break;
 8003b60:	bd38      	pop	{r3, r4, r5, pc}
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b62:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003b66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b6a:	0083      	lsls	r3, r0, #2
 8003b6c:	f103 0110 	add.w	r1, r3, #16
 8003b70:	4421      	add	r1, r4
 8003b72:	3104      	adds	r1, #4
 8003b74:	e7e8      	b.n	8003b48 <USBD_StdEPReq+0x13a>
        if((ep_addr & 0x80U) == 0x80U)
 8003b76:	b252      	sxtb	r2, r2
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	db1d      	blt.n	8003bb8 <USBD_StdEPReq+0x1aa>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003b7c:	f000 030f 	and.w	r3, r0, #15
 8003b80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b84:	009d      	lsls	r5, r3, #2
 8003b86:	4425      	add	r5, r4
 8003b88:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 8003b8c:	b313      	cbz	r3, 8003bd4 <USBD_StdEPReq+0x1c6>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b8e:	2a00      	cmp	r2, #0
 8003b90:	db25      	blt.n	8003bde <USBD_StdEPReq+0x1d0>
          &pdev->ep_out[ep_addr & 0x7FU];
 8003b92:	f000 027f 	and.w	r2, r0, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003b96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b9a:	0093      	lsls	r3, r2, #2
 8003b9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003ba0:	18e5      	adds	r5, r4, r3
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003ba2:	b330      	cbz	r0, 8003bf2 <USBD_StdEPReq+0x1e4>
 8003ba4:	2880      	cmp	r0, #128	; 0x80
 8003ba6:	d024      	beq.n	8003bf2 <USBD_StdEPReq+0x1e4>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4620      	mov	r0, r4
 8003bac:	f001 f86a 	bl	8004c84 <USBD_LL_IsStallEP>
 8003bb0:	b340      	cbz	r0, 8003c04 <USBD_StdEPReq+0x1f6>
            pep->status = 0x0001U;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	e01e      	b.n	8003bf6 <USBD_StdEPReq+0x1e8>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003bb8:	f000 030f 	and.w	r3, r0, #15
 8003bbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bc0:	009d      	lsls	r5, r3, #2
 8003bc2:	4425      	add	r5, r4
 8003bc4:	69ab      	ldr	r3, [r5, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e1      	bne.n	8003b8e <USBD_StdEPReq+0x180>
            USBD_CtlError(pdev, req);
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff fd45 	bl	800365a <USBD_CtlError>
  return ret;
 8003bd0:	2000      	movs	r0, #0
            break;
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
            USBD_CtlError(pdev, req);
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff fd40 	bl	800365a <USBD_CtlError>
  return ret;
 8003bda:	2000      	movs	r0, #0
            break;
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003bde:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003be2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003be6:	0093      	lsls	r3, r2, #2
 8003be8:	f103 0510 	add.w	r5, r3, #16
 8003bec:	4425      	add	r5, r4
 8003bee:	3504      	adds	r5, #4
 8003bf0:	e7d7      	b.n	8003ba2 <USBD_StdEPReq+0x194>
            pep->status = 0x0000U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f000 f828 	bl	8003c50 <USBD_CtlSendData>
  return ret;
 8003c00:	2000      	movs	r0, #0
          break;
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
            pep->status = 0x0000U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	602b      	str	r3, [r5, #0]
 8003c08:	e7f5      	b.n	8003bf6 <USBD_StdEPReq+0x1e8>
      USBD_CtlError(pdev, req);
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff fd25 	bl	800365a <USBD_CtlError>
  return ret;
 8003c10:	2000      	movs	r0, #0
      break;
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
  return ret;
 8003c14:	2000      	movs	r0, #0
}
 8003c16:	bd38      	pop	{r3, r4, r5, pc}

08003c18 <USBD_GetString>:
  if (desc != NULL)
 8003c18:	b1c8      	cbz	r0, 8003c4e <USBD_GetString+0x36>
{
 8003c1a:	b570      	push	{r4, r5, r6, lr}
 8003c1c:	460d      	mov	r5, r1
 8003c1e:	4616      	mov	r6, r2
 8003c20:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003c22:	f7ff fcf2 	bl	800360a <USBD_GetLen>
 8003c26:	3001      	adds	r0, #1
 8003c28:	0040      	lsls	r0, r0, #1
 8003c2a:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003c2c:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	706b      	strb	r3, [r5, #1]
 8003c32:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003c34:	e007      	b.n	8003c46 <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	3401      	adds	r4, #1
 8003c3c:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0U;
 8003c3e:	3302      	adds	r3, #2
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2100      	movs	r1, #0
 8003c44:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8003c46:	7821      	ldrb	r1, [r4, #0]
 8003c48:	2900      	cmp	r1, #0
 8003c4a:	d1f4      	bne.n	8003c36 <USBD_GetString+0x1e>
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	4770      	bx	lr

08003c50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003c54:	2202      	movs	r2, #2
 8003c56:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8003c5a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8003c5c:	6203      	str	r3, [r0, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c5e:	460a      	mov	r2, r1
 8003c60:	2100      	movs	r1, #0
 8003c62:	f001 f862 	bl	8004d2a <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c66:	2000      	movs	r0, #0
 8003c68:	bd10      	pop	{r4, pc}

08003c6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8003c6a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	460a      	mov	r2, r1
 8003c70:	2100      	movs	r1, #0
 8003c72:	f001 f85a 	bl	8004d2a <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c76:	2000      	movs	r0, #0
 8003c78:	bd08      	pop	{r3, pc}

08003c7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8003c7a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	460a      	mov	r2, r1
 8003c80:	2100      	movs	r1, #0
 8003c82:	f001 f85a 	bl	8004d3a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003c86:	2000      	movs	r0, #0
 8003c88:	bd08      	pop	{r3, pc}

08003c8a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8003c8a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003c92:	2300      	movs	r3, #0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4619      	mov	r1, r3
 8003c98:	f001 f847 	bl	8004d2a <USBD_LL_Transmit>

  return USBD_OK;
}
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	bd08      	pop	{r3, pc}

08003ca0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8003ca0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003ca2:	2305      	movs	r3, #5
 8003ca4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	461a      	mov	r2, r3
 8003cac:	4619      	mov	r1, r3
 8003cae:	f001 f844 	bl	8004d3a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	bd08      	pop	{r3, pc}
	...

08003cb8 <charToInt>:
#define bufferSizePerKey 100
#define totalLayoutBufferLen 2400
#include "keyboardBinds.h"


uint32_t charToInt(char * c, uint8_t * charsRead) {
 8003cb8:	b470      	push	{r4, r5, r6}
	uint32_t total = 0;
	uint8_t curIndex = *charsRead;
 8003cba:	780c      	ldrb	r4, [r1, #0]
	uint8_t charIndex = curIndex;
	uint16_t curMultiplier = 1;
	charIndex++;
 8003cbc:	1c65      	adds	r5, r4, #1
 8003cbe:	b2ed      	uxtb	r5, r5
	uint16_t curMultiplier = 1;
 8003cc0:	2301      	movs	r3, #1
	while ((c[charIndex] >= '0') && (c[charIndex] <= '9')) {
 8003cc2:	e005      	b.n	8003cd0 <charToInt+0x18>
		charIndex++;
 8003cc4:	3501      	adds	r5, #1
 8003cc6:	b2ed      	uxtb	r5, r5
		curMultiplier *= 10;
 8003cc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	b293      	uxth	r3, r2
	while ((c[charIndex] >= '0') && (c[charIndex] <= '9')) {
 8003cd0:	5d42      	ldrb	r2, [r0, r5]
 8003cd2:	3a30      	subs	r2, #48	; 0x30
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	2a09      	cmp	r2, #9
 8003cd8:	d9f4      	bls.n	8003cc4 <charToInt+0xc>
 8003cda:	2600      	movs	r6, #0
 8003cdc:	e009      	b.n	8003cf2 <charToInt+0x3a>
	}

	while ((c[curIndex] >= '0') && (c[curIndex] <= '9')) {
		total += (c[curIndex] - '0')*curMultiplier;
 8003cde:	3a30      	subs	r2, #48	; 0x30
 8003ce0:	fb02 6603 	mla	r6, r2, r3, r6
		curMultiplier /= 10;
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <charToInt+0x50>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	f3c3 03cf 	ubfx	r3, r3, #3, #16

		curIndex++;
 8003cee:	3401      	adds	r4, #1
 8003cf0:	b2e4      	uxtb	r4, r4
	while ((c[curIndex] >= '0') && (c[curIndex] <= '9')) {
 8003cf2:	5d02      	ldrb	r2, [r0, r4]
 8003cf4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003cf8:	b2ed      	uxtb	r5, r5
 8003cfa:	2d09      	cmp	r5, #9
 8003cfc:	d9ef      	bls.n	8003cde <charToInt+0x26>
	}
	*charsRead = curIndex;
 8003cfe:	700c      	strb	r4, [r1, #0]
	return(total);

}
 8003d00:	4630      	mov	r0, r6
 8003d02:	bc70      	pop	{r4, r5, r6}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	cccccccd 	.word	0xcccccccd

08003d0c <layoutCodeParser>:

struct t_macro layoutCodeParser(char * lCode,uint8_t * pReadHead,uint8_t maxLen) {
 8003d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	4606      	mov	r6, r0
 8003d14:	460c      	mov	r4, r1
 8003d16:	4691      	mov	r9, r2
	uint8_t curIndex = *pReadHead;
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	f88d 2007 	strb.w	r2, [sp, #7]

	while ((lCode[curIndex] !='k')&&(lCode[curIndex] !='u')&&(curIndex<maxLen)) { curIndex++; }
 8003d1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003d22:	5ca1      	ldrb	r1, [r4, r2]
 8003d24:	296b      	cmp	r1, #107	; 0x6b
 8003d26:	d007      	beq.n	8003d38 <layoutCodeParser+0x2c>
 8003d28:	2975      	cmp	r1, #117	; 0x75
 8003d2a:	d005      	beq.n	8003d38 <layoutCodeParser+0x2c>
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d203      	bcs.n	8003d38 <layoutCodeParser+0x2c>
 8003d30:	3201      	adds	r2, #1
 8003d32:	f88d 2007 	strb.w	r2, [sp, #7]
 8003d36:	e7f2      	b.n	8003d1e <layoutCodeParser+0x12>
	uint8_t lenOfMacro = 1;
	uint8_t tempIndex=curIndex+1;
 8003d38:	3201      	adds	r2, #1
 8003d3a:	b2d2      	uxtb	r2, r2
	char curChar=lCode[tempIndex];
 8003d3c:	5ca1      	ldrb	r1, [r4, r2]
	uint8_t lenOfMacro = 1;
 8003d3e:	2701      	movs	r7, #1
	while (( curChar!= ';') && (curChar != 0) && (tempIndex+1<maxLen)) {
 8003d40:	e002      	b.n	8003d48 <layoutCodeParser+0x3c>
		if (curChar == ',') {
			lenOfMacro++;
		}
		tempIndex++;
 8003d42:	3201      	adds	r2, #1
 8003d44:	b2d2      	uxtb	r2, r2
		curChar=lCode[tempIndex];
 8003d46:	5ca1      	ldrb	r1, [r4, r2]
	while (( curChar!= ';') && (curChar != 0) && (tempIndex+1<maxLen)) {
 8003d48:	293b      	cmp	r1, #59	; 0x3b
 8003d4a:	d008      	beq.n	8003d5e <layoutCodeParser+0x52>
 8003d4c:	b139      	cbz	r1, 8003d5e <layoutCodeParser+0x52>
 8003d4e:	1c50      	adds	r0, r2, #1
 8003d50:	4298      	cmp	r0, r3
 8003d52:	da04      	bge.n	8003d5e <layoutCodeParser+0x52>
		if (curChar == ',') {
 8003d54:	292c      	cmp	r1, #44	; 0x2c
 8003d56:	d1f4      	bne.n	8003d42 <layoutCodeParser+0x36>
			lenOfMacro++;
 8003d58:	3701      	adds	r7, #1
 8003d5a:	b2ff      	uxtb	r7, r7
 8003d5c:	e7f1      	b.n	8003d42 <layoutCodeParser+0x36>
	}



	//to skip over whitespace
	struct t_macro macro = { lenOfMacro,0,0,malloc(lenOfMacro),lenOfMacro>1?malloc(lenOfMacro - 1):0,0/*mod*/,0,0,0,0,0,0};
 8003d5e:	7833      	ldrb	r3, [r6, #0]
 8003d60:	f367 0303 	bfi	r3, r7, #0, #4
 8003d64:	f36f 1307 	bfc	r3, #4, #4
 8003d68:	7033      	strb	r3, [r6, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	8073      	strh	r3, [r6, #2]
 8003d6e:	4638      	mov	r0, r7
 8003d70:	f001 f8d0 	bl	8004f14 <malloc>
 8003d74:	6070      	str	r0, [r6, #4]
 8003d76:	2f01      	cmp	r7, #1
 8003d78:	d90f      	bls.n	8003d9a <layoutCodeParser+0x8e>
 8003d7a:	1e78      	subs	r0, r7, #1
 8003d7c:	f001 f8ca 	bl	8004f14 <malloc>
 8003d80:	60b0      	str	r0, [r6, #8]
 8003d82:	f04f 0800 	mov.w	r8, #0
 8003d86:	f886 800c 	strb.w	r8, [r6, #12]
 8003d8a:	7b73      	ldrb	r3, [r6, #13]
 8003d8c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003d90:	f368 1345 	bfi	r3, r8, #5, #1
 8003d94:	7373      	strb	r3, [r6, #13]
	uint16_t curTotalDelay=0;
	uint8_t curKeyPos = 0;
 8003d96:	4645      	mov	r5, r8
 8003d98:	e067      	b.n	8003e6a <layoutCodeParser+0x15e>
	struct t_macro macro = { lenOfMacro,0,0,malloc(lenOfMacro),lenOfMacro>1?malloc(lenOfMacro - 1):0,0/*mod*/,0,0,0,0,0,0};
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	e7f0      	b.n	8003d80 <layoutCodeParser+0x74>

	do {
		if ((curKeyPos != 0) && lCode[curIndex] == '.') {
			curIndex++;
 8003d9e:	3301      	adds	r3, #1
 8003da0:	a902      	add	r1, sp, #8
 8003da2:	f801 3d01 	strb.w	r3, [r1, #-1]!
			curTotalDelay+=charToInt(lCode, &curIndex);
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7ff ff86 	bl	8003cb8 <charToInt>
 8003dac:	4480      	add	r8, r0
 8003dae:	fa1f f888 	uxth.w	r8, r8
			macro.delayLst[curKeyPos] = curTotalDelay;
 8003db2:	68b3      	ldr	r3, [r6, #8]
 8003db4:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			curIndex++;//skips over the comma
 8003db8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f88d 3007 	strb.w	r3, [sp, #7]
			macro.len++;
 8003dc2:	7833      	ldrb	r3, [r6, #0]
 8003dc4:	f003 020f 	and.w	r2, r3, #15
 8003dc8:	3201      	adds	r2, #1
 8003dca:	f362 0303 	bfi	r3, r2, #0, #4
 8003dce:	7033      	strb	r3, [r6, #0]
			macro.simpleKeyFlag = 0;
 8003dd0:	7b73      	ldrb	r3, [r6, #13]
 8003dd2:	f36f 0382 	bfc	r3, #2, #1
 8003dd6:	7373      	strb	r3, [r6, #13]
 8003dd8:	e04d      	b.n	8003e76 <layoutCodeParser+0x16a>
		}


		curChar = lCode[curIndex];
		if (curChar != 'k'&&curChar != 'm') {
			*pReadHead = curIndex;
 8003dda:	f889 3000 	strb.w	r3, [r9]
			return(macro);
 8003dde:	e05c      	b.n	8003e9a <layoutCodeParser+0x18e>
		}
		if (curChar == 'm') {
			macro.forMediaFlag = 1;
 8003de0:	7b72      	ldrb	r2, [r6, #13]
 8003de2:	f042 0208 	orr.w	r2, r2, #8
 8003de6:	7372      	strb	r2, [r6, #13]
 8003de8:	e04e      	b.n	8003e88 <layoutCodeParser+0x17c>
		}
		curIndex++;
		curChar = lCode[curIndex];
		switch (curChar) {
		case 'c':
			curIndex++;
 8003dea:	3301      	adds	r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f88d 3007 	strb.w	r3, [sp, #7]
			curChar = lCode[curIndex];
 8003df2:	5ce3      	ldrb	r3, [r4, r3]
			macro.keyLst[curKeyPos] = 4 + curChar - 'a';
 8003df4:	6872      	ldr	r2, [r6, #4]
 8003df6:	3b5d      	subs	r3, #93	; 0x5d
 8003df8:	5553      	strb	r3, [r2, r5]
			curKeyPos++;
 8003dfa:	3501      	adds	r5, #1
 8003dfc:	b2ed      	uxtb	r5, r5
			curIndex++;
 8003dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e02:	3301      	adds	r3, #1
 8003e04:	f88d 3007 	strb.w	r3, [sp, #7]
			break;
 8003e08:	e020      	b.n	8003e4c <layoutCodeParser+0x140>
		case 'n':
			curIndex++;
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f88d 3007 	strb.w	r3, [sp, #7]
			curChar = lCode[curIndex];
 8003e12:	5ce3      	ldrb	r3, [r4, r3]
			macro.keyLst[curKeyPos] = curChar - '0';
 8003e14:	6872      	ldr	r2, [r6, #4]
 8003e16:	3b30      	subs	r3, #48	; 0x30
 8003e18:	5553      	strb	r3, [r2, r5]
			curKeyPos++;
 8003e1a:	3501      	adds	r5, #1
 8003e1c:	b2ed      	uxtb	r5, r5
			curIndex++;
 8003e1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e22:	3301      	adds	r3, #1
 8003e24:	f88d 3007 	strb.w	r3, [sp, #7]
			break;
 8003e28:	e010      	b.n	8003e4c <layoutCodeParser+0x140>
		case 'u':
			curIndex++;
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	a902      	add	r1, sp, #8
 8003e2e:	f801 3d01 	strb.w	r3, [r1, #-1]!
			macro.keyLst[curKeyPos] = charToInt(lCode, &curIndex);
 8003e32:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff ff3e 	bl	8003cb8 <charToInt>
 8003e3c:	f80a 0005 	strb.w	r0, [sl, r5]
			curKeyPos++;
 8003e40:	3501      	adds	r5, #1
 8003e42:	b2ed      	uxtb	r5, r5
			break;
 8003e44:	e002      	b.n	8003e4c <layoutCodeParser+0x140>
		default:
			return(macro);
			break;
		}

		while (lCode[curIndex] == ' ') { curIndex++; }
 8003e46:	3301      	adds	r3, #1
 8003e48:	f88d 3007 	strb.w	r3, [sp, #7]
 8003e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e50:	5ce2      	ldrb	r2, [r4, r3]
 8003e52:	2a20      	cmp	r2, #32
 8003e54:	d0f7      	beq.n	8003e46 <layoutCodeParser+0x13a>
		//skip whitespace

		curChar = lCode[curIndex];
		if (curChar == 'r') {
 8003e56:	2a72      	cmp	r2, #114	; 0x72
 8003e58:	d023      	beq.n	8003ea2 <layoutCodeParser+0x196>
			macro.repeatFlag = 1;
			curIndex++;
			curChar = lCode[curIndex];
		}

		if (curChar == 'q') {//for unique
 8003e5a:	2a71      	cmp	r2, #113	; 0x71
 8003e5c:	d02b      	beq.n	8003eb6 <layoutCodeParser+0x1aa>
			macro.noOtherKeysFlag = 1;
			curIndex++;
			curChar = lCode[curIndex];
		}

	} while ((curChar != ';') && (curChar != ':') && (curKeyPos < lenOfMacro));
 8003e5e:	3a3a      	subs	r2, #58	; 0x3a
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	2a01      	cmp	r2, #1
 8003e64:	d933      	bls.n	8003ece <layoutCodeParser+0x1c2>
 8003e66:	42af      	cmp	r7, r5
 8003e68:	d931      	bls.n	8003ece <layoutCodeParser+0x1c2>
		if ((curKeyPos != 0) && lCode[curIndex] == '.') {
 8003e6a:	b125      	cbz	r5, 8003e76 <layoutCodeParser+0x16a>
 8003e6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e70:	5ce2      	ldrb	r2, [r4, r3]
 8003e72:	2a2e      	cmp	r2, #46	; 0x2e
 8003e74:	d093      	beq.n	8003d9e <layoutCodeParser+0x92>
		curChar = lCode[curIndex];
 8003e76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e7a:	5ce2      	ldrb	r2, [r4, r3]
		if (curChar != 'k'&&curChar != 'm') {
 8003e7c:	2a6b      	cmp	r2, #107	; 0x6b
 8003e7e:	d001      	beq.n	8003e84 <layoutCodeParser+0x178>
 8003e80:	2a6d      	cmp	r2, #109	; 0x6d
 8003e82:	d1aa      	bne.n	8003dda <layoutCodeParser+0xce>
		if (curChar == 'm') {
 8003e84:	2a6d      	cmp	r2, #109	; 0x6d
 8003e86:	d0ab      	beq.n	8003de0 <layoutCodeParser+0xd4>
		curIndex++;
 8003e88:	3301      	adds	r3, #1
 8003e8a:	b2db      	uxtb	r3, r3
		curChar = lCode[curIndex];
 8003e8c:	5ce2      	ldrb	r2, [r4, r3]
		switch (curChar) {
 8003e8e:	2a6e      	cmp	r2, #110	; 0x6e
 8003e90:	d0bb      	beq.n	8003e0a <layoutCodeParser+0xfe>
 8003e92:	2a75      	cmp	r2, #117	; 0x75
 8003e94:	d0c9      	beq.n	8003e2a <layoutCodeParser+0x11e>
 8003e96:	2a63      	cmp	r2, #99	; 0x63
 8003e98:	d0a7      	beq.n	8003dea <layoutCodeParser+0xde>
	macro.completedFlag = 1;
	*pReadHead = curIndex;
	return(macro);

}
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	b002      	add	sp, #8
 8003e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			macro.repeatFlag = 1;
 8003ea2:	7b72      	ldrb	r2, [r6, #13]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	7372      	strb	r2, [r6, #13]
			curIndex++;
 8003eaa:	3301      	adds	r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f88d 3007 	strb.w	r3, [sp, #7]
			curChar = lCode[curIndex];
 8003eb2:	5ce2      	ldrb	r2, [r4, r3]
 8003eb4:	e7d1      	b.n	8003e5a <layoutCodeParser+0x14e>
			macro.noOtherKeysFlag = 1;
 8003eb6:	7b73      	ldrb	r3, [r6, #13]
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	7373      	strb	r3, [r6, #13]
			curIndex++;
 8003ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f88d 3007 	strb.w	r3, [sp, #7]
			curChar = lCode[curIndex];
 8003eca:	5ce2      	ldrb	r2, [r4, r3]
 8003ecc:	e7c7      	b.n	8003e5e <layoutCodeParser+0x152>
	macro.completedFlag = 1;
 8003ece:	7b73      	ldrb	r3, [r6, #13]
 8003ed0:	f043 0310 	orr.w	r3, r3, #16
 8003ed4:	7373      	strb	r3, [r6, #13]
	*pReadHead = curIndex;
 8003ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003eda:	f889 3000 	strb.w	r3, [r9]
	return(macro);
 8003ede:	e7dc      	b.n	8003e9a <layoutCodeParser+0x18e>

08003ee0 <createLayout>:

struct t_layout * createLayout(char * sKR1, char * sKR2, char * sKR3, char * sKR4, char * playoutName, char * joystickKeys, char * dialKeys) {
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	b089      	sub	sp, #36	; 0x24
 8003ee6:	4683      	mov	fp, r0
 8003ee8:	468a      	mov	sl, r1
 8003eea:	9200      	str	r2, [sp, #0]
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8003ef0:	9f14      	ldr	r7, [sp, #80]	; 0x50

	struct t_layout  * layout=malloc(sizeof(struct t_layout));
 8003ef2:	f44f 709a 	mov.w	r0, #308	; 0x134
 8003ef6:	f001 f80d 	bl	8004f14 <malloc>
 8003efa:	4680      	mov	r8, r0
	//layout.layoutName =malloc(strlen(playoutName));
	//memcpy(layout.layoutName,playoutName, strlen(playoutName)+1);
	strcpy(layout->layoutName, playoutName);
 8003efc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003efe:	f001 f8ec 	bl	80050da <strcpy>
	uint8_t readHeadInd = 0;
 8003f02:	2500      	movs	r5, #0
 8003f04:	f88d 501f 	strb.w	r5, [sp, #31]
	uint8_t neededStrLength = strlen(sKR1) + strlen(sKR2) + strlen(sKR3) + strlen(sKR4) + 5;
 8003f08:	4658      	mov	r0, fp
 8003f0a:	f7fc f963 	bl	80001d4 <strlen>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4650      	mov	r0, sl
 8003f12:	f7fc f95f 	bl	80001d4 <strlen>
 8003f16:	4404      	add	r4, r0
 8003f18:	b2e4      	uxtb	r4, r4
 8003f1a:	9800      	ldr	r0, [sp, #0]
 8003f1c:	f7fc f95a 	bl	80001d4 <strlen>
 8003f20:	4404      	add	r4, r0
 8003f22:	b2e4      	uxtb	r4, r4
 8003f24:	9801      	ldr	r0, [sp, #4]
 8003f26:	f7fc f955 	bl	80001d4 <strlen>
 8003f2a:	eb04 0900 	add.w	r9, r4, r0
 8003f2e:	fa5f f989 	uxtb.w	r9, r9
 8003f32:	f109 0905 	add.w	r9, r9, #5
 8003f36:	fa5f f989 	uxtb.w	r9, r9
	char * totalButtonStr = malloc(neededStrLength);
 8003f3a:	4648      	mov	r0, r9
 8003f3c:	f000 ffea 	bl	8004f14 <malloc>
 8003f40:	4604      	mov	r4, r0
	memset(totalButtonStr,0, neededStrLength);
 8003f42:	464a      	mov	r2, r9
 8003f44:	4629      	mov	r1, r5
 8003f46:	f000 fff5 	bl	8004f34 <memset>
	strcat(totalButtonStr,sKR1);
 8003f4a:	4659      	mov	r1, fp
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f001 f8b5 	bl	80050bc <strcat>
	strcat(totalButtonStr,sKR2);
 8003f52:	4651      	mov	r1, sl
 8003f54:	4620      	mov	r0, r4
 8003f56:	f001 f8b1 	bl	80050bc <strcat>
	strcat(totalButtonStr,sKR3);
 8003f5a:	9900      	ldr	r1, [sp, #0]
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f001 f8ad 	bl	80050bc <strcat>
	strcat(totalButtonStr,sKR4);
 8003f62:	9901      	ldr	r1, [sp, #4]
 8003f64:	4620      	mov	r0, r4
 8003f66:	f001 f8a9 	bl	80050bc <strcat>
	uint8_t maxLen=strlen(totalButtonStr);
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f7fc f932 	bl	80001d4 <strlen>
 8003f70:	fa5f f980 	uxtb.w	r9, r0

	for (uint8_t i = 0; i < keysInPad; i++) {
 8003f74:	e01c      	b.n	8003fb0 <createLayout+0xd0>
		while ((totalButtonStr[readHeadInd] != 'k') && (totalButtonStr[readHeadInd] != 'm')) { readHeadInd++; }
 8003f76:	3301      	adds	r3, #1
 8003f78:	f88d 301f 	strb.w	r3, [sp, #31]
 8003f7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003f80:	5ce2      	ldrb	r2, [r4, r3]
 8003f82:	2a6b      	cmp	r2, #107	; 0x6b
 8003f84:	d001      	beq.n	8003f8a <createLayout+0xaa>
 8003f86:	2a6d      	cmp	r2, #109	; 0x6d
 8003f88:	d1f5      	bne.n	8003f76 <createLayout+0x96>
		layout->keyBinds[i] = layoutCodeParser(totalButtonStr,&readHeadInd,maxLen);
 8003f8a:	3501      	adds	r5, #1
 8003f8c:	eb08 1b05 	add.w	fp, r8, r5, lsl #4
 8003f90:	f10d 0a08 	add.w	sl, sp, #8
 8003f94:	464b      	mov	r3, r9
 8003f96:	f10d 021f 	add.w	r2, sp, #31
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	f7ff feb5 	bl	8003d0c <layoutCodeParser>
 8003fa2:	f10b 0e04 	add.w	lr, fp, #4
 8003fa6:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8003faa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	for (uint8_t i = 0; i < keysInPad; i++) {
 8003fae:	b2ed      	uxtb	r5, r5
 8003fb0:	2d0b      	cmp	r5, #11
 8003fb2:	d9e3      	bls.n	8003f7c <createLayout+0x9c>
	}
	readHeadInd = 0;
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	f88d 501f 	strb.w	r5, [sp, #31]
	for (uint8_t i = 0; i < 4; i++) {
 8003fba:	e021      	b.n	8004000 <createLayout+0x120>
		while ((joystickKeys[readHeadInd] != 'k') && (joystickKeys[readHeadInd] != 'm')) { readHeadInd++; }
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f88d 301f 	strb.w	r3, [sp, #31]
 8003fc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003fc6:	5cf2      	ldrb	r2, [r6, r3]
 8003fc8:	2a6b      	cmp	r2, #107	; 0x6b
 8003fca:	d001      	beq.n	8003fd0 <createLayout+0xf0>
 8003fcc:	2a6d      	cmp	r2, #109	; 0x6d
 8003fce:	d1f5      	bne.n	8003fbc <createLayout+0xdc>
		layout->joystickKeys[i] = layoutCodeParser(joystickKeys ,&readHeadInd,strlen(joystickKeys));
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f7fc f8ff 	bl	80001d4 <strlen>
 8003fd6:	f105 0e0d 	add.w	lr, r5, #13
 8003fda:	eb08 190e 	add.w	r9, r8, lr, lsl #4
 8003fde:	f10d 0a08 	add.w	sl, sp, #8
 8003fe2:	b2c3      	uxtb	r3, r0
 8003fe4:	f10d 021f 	add.w	r2, sp, #31
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4650      	mov	r0, sl
 8003fec:	f7ff fe8e 	bl	8003d0c <layoutCodeParser>
 8003ff0:	f109 0e04 	add.w	lr, r9, #4
 8003ff4:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8003ff8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	for (uint8_t i = 0; i < 4; i++) {
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	b2ed      	uxtb	r5, r5
 8004000:	2d03      	cmp	r5, #3
 8004002:	d9de      	bls.n	8003fc2 <createLayout+0xe2>
	}
	readHeadInd = 0;
 8004004:	2600      	movs	r6, #0
 8004006:	f88d 601f 	strb.w	r6, [sp, #31]
	for (uint8_t i = 0; i < 2; i++) {
 800400a:	e020      	b.n	800404e <createLayout+0x16e>
		while ((dialKeys[readHeadInd] != 'k') && (dialKeys[readHeadInd] != 'm')) { readHeadInd++; }
 800400c:	3301      	adds	r3, #1
 800400e:	f88d 301f 	strb.w	r3, [sp, #31]
 8004012:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004016:	5cfa      	ldrb	r2, [r7, r3]
 8004018:	2a6b      	cmp	r2, #107	; 0x6b
 800401a:	d001      	beq.n	8004020 <createLayout+0x140>
 800401c:	2a6d      	cmp	r2, #109	; 0x6d
 800401e:	d1f5      	bne.n	800400c <createLayout+0x12c>
		layout->dialKeys[i] = layoutCodeParser(dialKeys , &readHeadInd,strlen(dialKeys));
 8004020:	4638      	mov	r0, r7
 8004022:	f7fc f8d7 	bl	80001d4 <strlen>
 8004026:	f106 0511 	add.w	r5, r6, #17
 800402a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
 800402e:	f10d 0908 	add.w	r9, sp, #8
 8004032:	b2c3      	uxtb	r3, r0
 8004034:	f10d 021f 	add.w	r2, sp, #31
 8004038:	4639      	mov	r1, r7
 800403a:	4648      	mov	r0, r9
 800403c:	f7ff fe66 	bl	8003d0c <layoutCodeParser>
 8004040:	3504      	adds	r5, #4
 8004042:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8004046:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for (uint8_t i = 0; i < 2; i++) {
 800404a:	3601      	adds	r6, #1
 800404c:	b2f6      	uxtb	r6, r6
 800404e:	2e01      	cmp	r6, #1
 8004050:	d9df      	bls.n	8004012 <createLayout+0x132>
	}


		free(totalButtonStr);
 8004052:	4620      	mov	r0, r4
 8004054:	f000 ff66 	bl	8004f24 <free>
		return(layout);
}
 8004058:	4640      	mov	r0, r8
 800405a:	b009      	add	sp, #36	; 0x24
 800405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004060:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004062:	4808      	ldr	r0, [pc, #32]	; (8004084 <MX_USART1_UART_Init+0x24>)
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <MX_USART1_UART_Init+0x28>)
 8004066:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004068:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800406c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800406e:	2300      	movs	r3, #0
 8004070:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004072:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004074:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004076:	220c      	movs	r2, #12
 8004078:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800407a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800407c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800407e:	f7fe fad7 	bl	8002630 <HAL_UART_Init>
 8004082:	bd08      	pop	{r3, pc}
 8004084:	20000370 	.word	0x20000370
 8004088:	40011000 	.word	0x40011000

0800408c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	2400      	movs	r4, #0
 8004092:	9405      	str	r4, [sp, #20]
 8004094:	9406      	str	r4, [sp, #24]
 8004096:	9407      	str	r4, [sp, #28]
 8004098:	9408      	str	r4, [sp, #32]
 800409a:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800409c:	9401      	str	r4, [sp, #4]
 800409e:	4b2b      	ldr	r3, [pc, #172]	; (800414c <MX_GPIO_Init+0xc0>)
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	f042 0204 	orr.w	r2, r2, #4
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
 80040a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040aa:	f002 0204 	and.w	r2, r2, #4
 80040ae:	9201      	str	r2, [sp, #4]
 80040b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040b2:	9402      	str	r4, [sp, #8]
 80040b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80040c2:	9202      	str	r2, [sp, #8]
 80040c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c6:	9403      	str	r4, [sp, #12]
 80040c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
 80040d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d2:	f002 0201 	and.w	r2, r2, #1
 80040d6:	9203      	str	r2, [sp, #12]
 80040d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040da:	9404      	str	r4, [sp, #16]
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	f042 0202 	orr.w	r2, r2, #2
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	9304      	str	r3, [sp, #16]
 80040ec:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80040ee:	4d18      	ldr	r5, [pc, #96]	; (8004150 <MX_GPIO_Init+0xc4>)
 80040f0:	4622      	mov	r2, r4
 80040f2:	f240 110f 	movw	r1, #271	; 0x10f
 80040f6:	4628      	mov	r0, r5
 80040f8:	f7fc fd60 	bl	8000bbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80040fc:	230f      	movs	r3, #15
 80040fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004100:	2601      	movs	r6, #1
 8004102:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004108:	a905      	add	r1, sp, #20
 800410a:	4628      	mov	r0, r5
 800410c:	f7fc fc7c 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004110:	2370      	movs	r3, #112	; 0x70
 8004112:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004114:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004116:	2702      	movs	r7, #2
 8004118:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411a:	a905      	add	r1, sp, #20
 800411c:	4628      	mov	r0, r5
 800411e:	f7fc fc73 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004122:	2303      	movs	r3, #3
 8004124:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004126:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004128:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412a:	a905      	add	r1, sp, #20
 800412c:	4809      	ldr	r0, [pc, #36]	; (8004154 <MX_GPIO_Init+0xc8>)
 800412e:	f7fc fc6b 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004136:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004138:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800413c:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413e:	a905      	add	r1, sp, #20
 8004140:	4628      	mov	r0, r5
 8004142:	f7fc fc61 	bl	8000a08 <HAL_GPIO_Init>

}
 8004146:	b00b      	add	sp, #44	; 0x2c
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	40020000 	.word	0x40020000
 8004154:	40020400 	.word	0x40020400

08004158 <MX_DMA_Init>:
{
 8004158:	b510      	push	{r4, lr}
 800415a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800415c:	2400      	movs	r4, #0
 800415e:	9400      	str	r4, [sp, #0]
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <MX_DMA_Init+0x64>)
 8004162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004164:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
 800416a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004170:	9200      	str	r2, [sp, #0]
 8004172:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004174:	9401      	str	r4, [sp, #4]
 8004176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004178:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004188:	4622      	mov	r2, r4
 800418a:	4621      	mov	r1, r4
 800418c:	2011      	movs	r0, #17
 800418e:	f7fc fa29 	bl	80005e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004192:	2011      	movs	r0, #17
 8004194:	f7fc fa58 	bl	8000648 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004198:	4622      	mov	r2, r4
 800419a:	4621      	mov	r1, r4
 800419c:	203a      	movs	r0, #58	; 0x3a
 800419e:	f7fc fa21 	bl	80005e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80041a2:	203a      	movs	r0, #58	; 0x3a
 80041a4:	f7fc fa50 	bl	8000648 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80041a8:	4622      	mov	r2, r4
 80041aa:	4621      	mov	r1, r4
 80041ac:	2046      	movs	r0, #70	; 0x46
 80041ae:	f7fc fa19 	bl	80005e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80041b2:	2046      	movs	r0, #70	; 0x46
 80041b4:	f7fc fa48 	bl	8000648 <HAL_NVIC_EnableIRQ>
}
 80041b8:	b002      	add	sp, #8
 80041ba:	bd10      	pop	{r4, pc}
 80041bc:	40023800 	.word	0x40023800

080041c0 <MX_I2C1_Init>:
{
 80041c0:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80041c2:	4809      	ldr	r0, [pc, #36]	; (80041e8 <MX_I2C1_Init+0x28>)
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <MX_I2C1_Init+0x2c>)
 80041c6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <MX_I2C1_Init+0x30>)
 80041ca:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041cc:	2300      	movs	r3, #0
 80041ce:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80041d0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041d6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041d8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80041da:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041dc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041de:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041e0:	f7fc fcf2 	bl	8000bc8 <HAL_I2C_Init>
 80041e4:	bd08      	pop	{r3, pc}
 80041e6:	bf00      	nop
 80041e8:	2000025c 	.word	0x2000025c
 80041ec:	40005400 	.word	0x40005400
 80041f0:	00061a80 	.word	0x00061a80

080041f4 <MX_RTC_Init>:
{
 80041f4:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80041f6:	4807      	ldr	r0, [pc, #28]	; (8004214 <MX_RTC_Init+0x20>)
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <MX_RTC_Init+0x24>)
 80041fa:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041fc:	2300      	movs	r3, #0
 80041fe:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004200:	227f      	movs	r2, #127	; 0x7f
 8004202:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004208:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800420a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800420c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800420e:	f7fd ff66 	bl	80020de <HAL_RTC_Init>
 8004212:	bd08      	pop	{r3, pc}
 8004214:	200003b0 	.word	0x200003b0
 8004218:	40002800 	.word	0x40002800

0800421c <MX_TIM1_Init>:
{
 800421c:	b530      	push	{r4, r5, lr}
 800421e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004220:	2400      	movs	r4, #0
 8004222:	9402      	str	r4, [sp, #8]
 8004224:	9403      	str	r4, [sp, #12]
 8004226:	9404      	str	r4, [sp, #16]
 8004228:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800422a:	9400      	str	r4, [sp, #0]
 800422c:	9401      	str	r4, [sp, #4]
  htim1.Instance = TIM1;
 800422e:	4d10      	ldr	r5, [pc, #64]	; (8004270 <MX_TIM1_Init+0x54>)
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <MX_TIM1_Init+0x58>)
 8004232:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 7200;
 8004234:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8004238:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800423a:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65535;
 800423c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004240:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004242:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8004244:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004246:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004248:	4628      	mov	r0, r5
 800424a:	f7fe f839 	bl	80022c0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800424e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004252:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004254:	a902      	add	r1, sp, #8
 8004256:	4628      	mov	r0, r5
 8004258:	f7fe f857 	bl	800230a <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800425c:	2310      	movs	r3, #16
 800425e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004260:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004262:	4669      	mov	r1, sp
 8004264:	4628      	mov	r0, r5
 8004266:	f7fe f8bd 	bl	80023e4 <HAL_TIMEx_MasterConfigSynchronization>
}
 800426a:	b007      	add	sp, #28
 800426c:	bd30      	pop	{r4, r5, pc}
 800426e:	bf00      	nop
 8004270:	200003d0 	.word	0x200003d0
 8004274:	40010000 	.word	0x40010000

08004278 <MX_TIM2_Init>:
{
 8004278:	b530      	push	{r4, r5, lr}
 800427a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800427c:	2400      	movs	r4, #0
 800427e:	9402      	str	r4, [sp, #8]
 8004280:	9403      	str	r4, [sp, #12]
 8004282:	9404      	str	r4, [sp, #16]
 8004284:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004286:	9400      	str	r4, [sp, #0]
 8004288:	9401      	str	r4, [sp, #4]
  htim2.Instance = TIM2;
 800428a:	4d10      	ldr	r5, [pc, #64]	; (80042cc <MX_TIM2_Init+0x54>)
 800428c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004290:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 7200;
 8004292:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8004296:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004298:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 10000;
 800429a:	f242 7310 	movw	r3, #10000	; 0x2710
 800429e:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a0:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042a4:	4628      	mov	r0, r5
 80042a6:	f7fe f80b 	bl	80022c0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ae:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042b0:	a902      	add	r1, sp, #8
 80042b2:	4628      	mov	r0, r5
 80042b4:	f7fe f829 	bl	800230a <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80042b8:	2320      	movs	r3, #32
 80042ba:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042bc:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042be:	4669      	mov	r1, sp
 80042c0:	4628      	mov	r0, r5
 80042c2:	f7fe f88f 	bl	80023e4 <HAL_TIMEx_MasterConfigSynchronization>
}
 80042c6:	b007      	add	sp, #28
 80042c8:	bd30      	pop	{r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	20000410 	.word	0x20000410

080042d0 <keypadReadStep>:
void keypadReadStep(struct t_controlState * pCtrls){
 80042d0:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t columns=(GPIOA->IDR&0b01110000)>>4;
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <keypadReadStep+0x68>)
 80042d4:	691e      	ldr	r6, [r3, #16]
 80042d6:	f3c6 1602 	ubfx	r6, r6, #4, #3
	uint8_t row=pCtrls->pollState * 3;
 80042da:	7841      	ldrb	r1, [r0, #1]
 80042dc:	f3c1 1101 	ubfx	r1, r1, #4, #2
 80042e0:	b2cc      	uxtb	r4, r1
 80042e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80042e6:	b2c9      	uxtb	r1, r1
	uint16_t prevButtons=pCtrls->buttons;
 80042e8:	8805      	ldrh	r5, [r0, #0]
 80042ea:	f3c5 020b 	ubfx	r2, r5, #0, #12
 80042ee:	b297      	uxth	r7, r2
	pCtrls->buttons&= ~(0b111<<row);//mask out those bits that could be set
 80042f0:	2307      	movs	r3, #7
 80042f2:	408b      	lsls	r3, r1
 80042f4:	ea22 0303 	bic.w	r3, r2, r3
 80042f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	pCtrls->buttons|=columns<<row;//or in the new reading
 80042fc:	fa06 f101 	lsl.w	r1, r6, r1
 8004300:	430b      	orrs	r3, r1
 8004302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004306:	462a      	mov	r2, r5
 8004308:	f363 020b 	bfi	r2, r3, #0, #12
 800430c:	8002      	strh	r2, [r0, #0]
	if((pCtrls->buttons)!=prevButtons){
 800430e:	429f      	cmp	r7, r3
 8004310:	d003      	beq.n	800431a <keypadReadStep+0x4a>
		pCtrls->keysChangedFlag|=buttonFlag|modifiedThisCycleFlag;
 8004312:	7a03      	ldrb	r3, [r0, #8]
 8004314:	f043 0303 	orr.w	r3, r3, #3
 8004318:	7203      	strb	r3, [r0, #8]
	else{pCtrls->pollState++;}
 800431a:	1c63      	adds	r3, r4, #1
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	7842      	ldrb	r2, [r0, #1]
 8004322:	f363 1205 	bfi	r2, r3, #4, #2
 8004326:	7042      	strb	r2, [r0, #1]
	GPIOA->ODR=1<<(pCtrls->pollState);
 8004328:	2201      	movs	r2, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	4a02      	ldr	r2, [pc, #8]	; (8004338 <keypadReadStep+0x68>)
 8004330:	6153      	str	r3, [r2, #20]
}
 8004332:	bcf0      	pop	{r4, r5, r6, r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40020000 	.word	0x40020000

0800433c <encoderPoll>:
	uint8_t newReading=GPIOB->IDR&(encA|encB);
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <encoderPoll+0x64>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0303 	and.w	r3, r3, #3
		switch(newReading){
 8004344:	2b02      	cmp	r3, #2
 8004346:	d014      	beq.n	8004372 <encoderPoll+0x36>
 8004348:	2b03      	cmp	r3, #3
 800434a:	d022      	beq.n	8004392 <encoderPoll+0x56>
 800434c:	2b01      	cmp	r3, #1
 800434e:	d000      	beq.n	8004352 <encoderPoll+0x16>
 8004350:	4770      	bx	lr
			if(pCtrls->encoderState){
 8004352:	7843      	ldrb	r3, [r0, #1]
 8004354:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8004358:	d0fa      	beq.n	8004350 <encoderPoll+0x14>
				pCtrls->keysChangedFlag|=encoderFlag|modifiedThisCycleFlag;
 800435a:	7a03      	ldrb	r3, [r0, #8]
 800435c:	f043 0306 	orr.w	r3, r3, #6
 8004360:	7203      	strb	r3, [r0, #8]
				pCtrls->encoderVal+=1;
 8004362:	7883      	ldrb	r3, [r0, #2]
 8004364:	3301      	adds	r3, #1
 8004366:	7083      	strb	r3, [r0, #2]
				pCtrls->encoderState=0;}
 8004368:	7843      	ldrb	r3, [r0, #1]
 800436a:	f36f 1387 	bfc	r3, #6, #2
 800436e:	7043      	strb	r3, [r0, #1]
 8004370:	4770      	bx	lr
			if(pCtrls->encoderState){
 8004372:	7843      	ldrb	r3, [r0, #1]
 8004374:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8004378:	d0ea      	beq.n	8004350 <encoderPoll+0x14>
				pCtrls->keysChangedFlag|=encoderFlag|modifiedThisCycleFlag;
 800437a:	7a03      	ldrb	r3, [r0, #8]
 800437c:	f043 0306 	orr.w	r3, r3, #6
 8004380:	7203      	strb	r3, [r0, #8]
				pCtrls->encoderVal-=1;
 8004382:	7883      	ldrb	r3, [r0, #2]
 8004384:	3b01      	subs	r3, #1
 8004386:	7083      	strb	r3, [r0, #2]
				pCtrls->encoderState=0;}
 8004388:	7843      	ldrb	r3, [r0, #1]
 800438a:	f36f 1387 	bfc	r3, #6, #2
 800438e:	7043      	strb	r3, [r0, #1]
 8004390:	4770      	bx	lr
			pCtrls->encoderState=1;
 8004392:	7843      	ldrb	r3, [r0, #1]
 8004394:	2201      	movs	r2, #1
 8004396:	f362 1387 	bfi	r3, r2, #6, #2
 800439a:	7043      	strb	r3, [r0, #1]
}
 800439c:	e7d8      	b.n	8004350 <encoderPoll+0x14>
 800439e:	bf00      	nop
 80043a0:	40020400 	.word	0x40020400

080043a4 <pollAllControlsStep>:
void pollAllControlsStep(struct t_controlState * pCtrls){//run every 5ms
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4604      	mov	r4, r0
	keypadReadStep(pCtrls);
 80043a8:	f7ff ff92 	bl	80042d0 <keypadReadStep>
	encoderPoll(pCtrls);
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff ffc5 	bl	800433c <encoderPoll>
	if(pCtrls->keysChangedFlag&modifiedThisCycleFlag){
 80043b2:	7a23      	ldrb	r3, [r4, #8]
 80043b4:	f013 0f02 	tst.w	r3, #2
 80043b8:	d003      	beq.n	80043c2 <pollAllControlsStep+0x1e>
		pCtrls->lastModified=TIM2->CNT;
 80043ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	60e3      	str	r3, [r4, #12]
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <initPoll>:
struct t_controlState * initPoll(){
 80043c4:	b510      	push	{r4, lr}
	struct t_controlState * pCtrl = malloc(sizeof(struct t_controlState));
 80043c6:	2010      	movs	r0, #16
 80043c8:	f000 fda4 	bl	8004f14 <malloc>
	pCtrl->buttons=0;
 80043cc:	8802      	ldrh	r2, [r0, #0]
 80043ce:	f36f 020b 	bfc	r2, #0, #12
 80043d2:	8002      	strh	r2, [r0, #0]
	pCtrl->encoderVal=0;
 80043d4:	2100      	movs	r1, #0
 80043d6:	7081      	strb	r1, [r0, #2]
	pCtrl->keysChangedFlag=0;
 80043d8:	7a04      	ldrb	r4, [r0, #8]
 80043da:	f361 0403 	bfi	r4, r1, #0, #4
 80043de:	7204      	strb	r4, [r0, #8]
	pCtrl->pollState=0;
 80043e0:	f3c2 2205 	ubfx	r2, r2, #8, #6
 80043e4:	f361 1205 	bfi	r2, r1, #4, #2
 80043e8:	7042      	strb	r2, [r0, #1]
	pCtrl->stickX=0;
 80043ea:	8081      	strh	r1, [r0, #4]
	pCtrl->stickY=0;
 80043ec:	80c1      	strh	r1, [r0, #6]
	pCtrl->lastModified=TIM2->CNT;
 80043ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f4:	60c2      	str	r2, [r0, #12]
}
 80043f6:	bd10      	pop	{r4, pc}

080043f8 <ctrlDesignator>:
void ctrlDesignator(struct t_controlState * pCtrls,struct t_layout * pLayout){
 80043f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fa:	b083      	sub	sp, #12
	uint8_t keyboardOutputBytes[5]={1,0,0,0,0};
 80043fc:	2301      	movs	r3, #1
 80043fe:	f88d 3000 	strb.w	r3, [sp]
 8004402:	2300      	movs	r3, #0
 8004404:	f88d 3001 	strb.w	r3, [sp, #1]
 8004408:	f88d 3002 	strb.w	r3, [sp, #2]
 800440c:	f88d 3003 	strb.w	r3, [sp, #3]
 8004410:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t buttons=pCtrls->buttons;
 8004414:	8800      	ldrh	r0, [r0, #0]
 8004416:	f3c0 000b 	ubfx	r0, r0, #0, #12
	if(buttons!=0){
 800441a:	2800      	cmp	r0, #0
 800441c:	d149      	bne.n	80044b2 <ctrlDesignator+0xba>
	uint8_t curOutputIndex=2;
 800441e:	2502      	movs	r5, #2
 8004420:	2300      	movs	r3, #0
 8004422:	e04d      	b.n	80044c0 <ctrlDesignator+0xc8>
						mac->currentlyRunning=1;
 8004424:	eb01 1603 	add.w	r6, r1, r3, lsl #4
 8004428:	f896 7021 	ldrb.w	r7, [r6, #33]	; 0x21
 800442c:	f047 0720 	orr.w	r7, r7, #32
 8004430:	f886 7021 	strb.w	r7, [r6, #33]	; 0x21
						mac->index=0;
 8004434:	3201      	adds	r2, #1
 8004436:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800443a:	7916      	ldrb	r6, [r2, #4]
 800443c:	f36f 1607 	bfc	r6, #4, #4
 8004440:	7116      	strb	r6, [r2, #4]
						keyboardOutputBytes[curOutputIndex]=mac->keyLst[0];
 8004442:	6892      	ldr	r2, [r2, #8]
 8004444:	7816      	ldrb	r6, [r2, #0]
 8004446:	aa02      	add	r2, sp, #8
 8004448:	442a      	add	r2, r5
 800444a:	f802 6c08 	strb.w	r6, [r2, #-8]
						curOutputIndex++;
 800444e:	3501      	adds	r5, #1
 8004450:	b2ed      	uxtb	r5, r5
					buttons&= ~buttonMask;
 8004452:	ea20 0004 	bic.w	r0, r0, r4
				curButton--;
 8004456:	3b01      	subs	r3, #1
 8004458:	b2db      	uxtb	r3, r3
			while((curOutputIndex<maxOutputIndex)&&(curButton!=0)&&buttons){
 800445a:	2d04      	cmp	r5, #4
 800445c:	d8e0      	bhi.n	8004420 <ctrlDesignator+0x28>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0de      	beq.n	8004420 <ctrlDesignator+0x28>
 8004462:	2800      	cmp	r0, #0
 8004464:	d0dc      	beq.n	8004420 <ctrlDesignator+0x28>
				buttonMask=buttonMask>>1;
 8004466:	0864      	lsrs	r4, r4, #1
				mac=&(pLayout->keyBinds[curButton]);
 8004468:	461a      	mov	r2, r3
				if(buttonMask&buttons){
 800446a:	4220      	tst	r0, r4
 800446c:	d008      	beq.n	8004480 <ctrlDesignator+0x88>
					if((!mac->currentlyRunning)||mac->simpleKeyFlag){
 800446e:	1c5e      	adds	r6, r3, #1
 8004470:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 8004474:	7c76      	ldrb	r6, [r6, #17]
 8004476:	f006 0624 	and.w	r6, r6, #36	; 0x24
 800447a:	2e20      	cmp	r6, #32
 800447c:	d1d2      	bne.n	8004424 <ctrlDesignator+0x2c>
 800447e:	e7e8      	b.n	8004452 <ctrlDesignator+0x5a>
				else if((mac->simpleKeyFlag)||(mac->index>mac->len)){
 8004480:	1c5e      	adds	r6, r3, #1
 8004482:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 8004486:	7c76      	ldrb	r6, [r6, #17]
 8004488:	f016 0f04 	tst.w	r6, #4
 800448c:	d108      	bne.n	80044a0 <ctrlDesignator+0xa8>
 800448e:	1c5e      	adds	r6, r3, #1
 8004490:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 8004494:	7936      	ldrb	r6, [r6, #4]
 8004496:	f006 070f 	and.w	r7, r6, #15
 800449a:	ebb7 1f16 	cmp.w	r7, r6, lsr #4
 800449e:	dada      	bge.n	8004456 <ctrlDesignator+0x5e>
					mac->currentlyRunning=0;
 80044a0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80044a4:	f892 6021 	ldrb.w	r6, [r2, #33]	; 0x21
 80044a8:	f36f 1645 	bfc	r6, #5, #1
 80044ac:	f882 6021 	strb.w	r6, [r2, #33]	; 0x21
 80044b0:	e7d1      	b.n	8004456 <ctrlDesignator+0x5e>
 80044b2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80044b6:	230c      	movs	r3, #12
 80044b8:	2502      	movs	r5, #2
 80044ba:	e7ce      	b.n	800445a <ctrlDesignator+0x62>
	for(uint8_t i=0;i<keysInPad;i++){
 80044bc:	3301      	adds	r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b0b      	cmp	r3, #11
 80044c2:	d83c      	bhi.n	800453e <ctrlDesignator+0x146>
			if(pLayout->keyBinds[i].currentlyRunning){
 80044c4:	461c      	mov	r4, r3
 80044c6:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 80044ca:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80044ce:	f012 0f20 	tst.w	r2, #32
 80044d2:	d0f3      	beq.n	80044bc <ctrlDesignator+0xc4>
				mac->ticksRunning++;
 80044d4:	1c58      	adds	r0, r3, #1
 80044d6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80044da:	88c2      	ldrh	r2, [r0, #6]
 80044dc:	3201      	adds	r2, #1
 80044de:	b292      	uxth	r2, r2
 80044e0:	80c2      	strh	r2, [r0, #6]
				if((!(mac->simpleKeyFlag)&&(mac->len!=1))
 80044e2:	7c40      	ldrb	r0, [r0, #17]
 80044e4:	f010 0f04 	tst.w	r0, #4
 80044e8:	d1e8      	bne.n	80044bc <ctrlDesignator+0xc4>
 80044ea:	1c58      	adds	r0, r3, #1
 80044ec:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80044f0:	7900      	ldrb	r0, [r0, #4]
 80044f2:	f000 000f 	and.w	r0, r0, #15
 80044f6:	2801      	cmp	r0, #1
 80044f8:	d0e0      	beq.n	80044bc <ctrlDesignator+0xc4>
						?(((mac->delayLst[mac->index]+1)>(mac->ticksRunning))
 80044fa:	eb01 1003 	add.w	r0, r1, r3, lsl #4
 80044fe:	69c6      	ldr	r6, [r0, #28]
 8004500:	1c58      	adds	r0, r3, #1
 8004502:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8004506:	7900      	ldrb	r0, [r0, #4]
 8004508:	0900      	lsrs	r0, r0, #4
 800450a:	f836 6010 	ldrh.w	r6, [r6, r0, lsl #1]
 800450e:	3601      	adds	r6, #1
				if((!(mac->simpleKeyFlag)&&(mac->len!=1))
 8004510:	4296      	cmp	r6, r2
 8004512:	ddd3      	ble.n	80044bc <ctrlDesignator+0xc4>
						&&(curOutputIndex<maxOutputIndex)):0){
 8004514:	2d04      	cmp	r5, #4
 8004516:	d8d1      	bhi.n	80044bc <ctrlDesignator+0xc4>
					mac->index++;
 8004518:	3001      	adds	r0, #1
 800451a:	f000 000f 	and.w	r0, r0, #15
 800451e:	3401      	adds	r4, #1
 8004520:	eb01 1404 	add.w	r4, r1, r4, lsl #4
 8004524:	7922      	ldrb	r2, [r4, #4]
 8004526:	f360 1207 	bfi	r2, r0, #4, #4
 800452a:	7122      	strb	r2, [r4, #4]
					keyboardOutputBytes[curOutputIndex]=mac->keyLst[mac->index];
 800452c:	68a2      	ldr	r2, [r4, #8]
 800452e:	5c10      	ldrb	r0, [r2, r0]
 8004530:	aa02      	add	r2, sp, #8
 8004532:	442a      	add	r2, r5
 8004534:	f802 0c08 	strb.w	r0, [r2, #-8]
					curOutputIndex++;
 8004538:	3501      	adds	r5, #1
 800453a:	b2ed      	uxtb	r5, r5
 800453c:	e7be      	b.n	80044bc <ctrlDesignator+0xc4>
	USBD_HID_SendReport(&hUsbDeviceFS,keyboardOutputBytes,maxOutputIndex);
 800453e:	2205      	movs	r2, #5
 8004540:	4669      	mov	r1, sp
 8004542:	4802      	ldr	r0, [pc, #8]	; (800454c <ctrlDesignator+0x154>)
 8004544:	f7fe fedc 	bl	8003300 <USBD_HID_SendReport>
}
 8004548:	b003      	add	sp, #12
 800454a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800454c:	20000450 	.word	0x20000450

08004550 <SystemClock_Config>:
{
 8004550:	b530      	push	{r4, r5, lr}
 8004552:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004554:	2230      	movs	r2, #48	; 0x30
 8004556:	2100      	movs	r1, #0
 8004558:	eb0d 0002 	add.w	r0, sp, r2
 800455c:	f000 fcea 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004560:	2400      	movs	r4, #0
 8004562:	9407      	str	r4, [sp, #28]
 8004564:	9408      	str	r4, [sp, #32]
 8004566:	9409      	str	r4, [sp, #36]	; 0x24
 8004568:	940a      	str	r4, [sp, #40]	; 0x28
 800456a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800456c:	9402      	str	r4, [sp, #8]
 800456e:	9403      	str	r4, [sp, #12]
 8004570:	9404      	str	r4, [sp, #16]
 8004572:	9405      	str	r4, [sp, #20]
 8004574:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	9400      	str	r4, [sp, #0]
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <SystemClock_Config+0xb0>)
 800457a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800458c:	9401      	str	r4, [sp, #4]
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <SystemClock_Config+0xb4>)
 8004590:	6813      	ldr	r3, [r2, #0]
 8004592:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	6813      	ldr	r3, [r2, #0]
 800459e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80045a6:	2309      	movs	r3, #9
 80045a8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ae:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80045b0:	2301      	movs	r3, #1
 80045b2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045b4:	2502      	movs	r5, #2
 80045b6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045bc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80045be:	2319      	movs	r3, #25
 80045c0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 288;
 80045c2:	f44f 7390 	mov.w	r3, #288	; 0x120
 80045c6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80045c8:	2304      	movs	r3, #4
 80045ca:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80045cc:	2306      	movs	r3, #6
 80045ce:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045d0:	a80c      	add	r0, sp, #48	; 0x30
 80045d2:	f7fd f979 	bl	80018c8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045d6:	230f      	movs	r3, #15
 80045d8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045da:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045dc:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045e2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045e4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045e6:	4629      	mov	r1, r5
 80045e8:	a807      	add	r0, sp, #28
 80045ea:	f7fd fbb5 	bl	8001d58 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045ee:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80045f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f4:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045f6:	a802      	add	r0, sp, #8
 80045f8:	f7fd fc84 	bl	8001f04 <HAL_RCCEx_PeriphCLKConfig>
}
 80045fc:	b019      	add	sp, #100	; 0x64
 80045fe:	bd30      	pop	{r4, r5, pc}
 8004600:	40023800 	.word	0x40023800
 8004604:	40007000 	.word	0x40007000

08004608 <main>:
int main(void){
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	b088      	sub	sp, #32
  HAL_Init();
 800460c:	f7fb ff98 	bl	8000540 <HAL_Init>
  SystemClock_Config();
 8004610:	f7ff ff9e 	bl	8004550 <SystemClock_Config>
  MX_GPIO_Init();
 8004614:	f7ff fd3a 	bl	800408c <MX_GPIO_Init>
  MX_DMA_Init();
 8004618:	f7ff fd9e 	bl	8004158 <MX_DMA_Init>
  MX_I2C1_Init();
 800461c:	f7ff fdd0 	bl	80041c0 <MX_I2C1_Init>
  MX_RTC_Init();
 8004620:	f7ff fde8 	bl	80041f4 <MX_RTC_Init>
  MX_TIM1_Init();
 8004624:	f7ff fdfa 	bl	800421c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004628:	f7ff fd1a 	bl	8004060 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800462c:	f000 fa28 	bl	8004a80 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8004630:	f7ff fe22 	bl	8004278 <MX_TIM2_Init>
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004634:	4d46      	ldr	r5, [pc, #280]	; (8004750 <main+0x148>)
 8004636:	2200      	movs	r2, #0
 8004638:	4946      	ldr	r1, [pc, #280]	; (8004754 <main+0x14c>)
 800463a:	4628      	mov	r0, r5
 800463c:	f7fe fe74 	bl	8003328 <USBD_Init>
    USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8004640:	4945      	ldr	r1, [pc, #276]	; (8004758 <main+0x150>)
 8004642:	4628      	mov	r0, r5
 8004644:	f7fe fe87 	bl	8003356 <USBD_RegisterClass>
    USBD_Start(&hUsbDeviceFS);
 8004648:	4628      	mov	r0, r5
 800464a:	f7fe fe8b 	bl	8003364 <USBD_Start>
    keyboardHID.id = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	f88d 3018 	strb.w	r3, [sp, #24]
    keyboardHID.modifiers = 0;
 8004654:	2400      	movs	r4, #0
 8004656:	f88d 4019 	strb.w	r4, [sp, #25]
    keyboardHID.key1 = 0;
 800465a:	f88d 401a 	strb.w	r4, [sp, #26]
    keyboardHID.key2 = 0;
 800465e:	f88d 401b 	strb.w	r4, [sp, #27]
    keyboardHID.key3 = 0;
 8004662:	f88d 401c 	strb.w	r4, [sp, #28]
    mediaHID.id = 2;
 8004666:	2602      	movs	r6, #2
 8004668:	f88d 6014 	strb.w	r6, [sp, #20]
    mediaHID.keys = 0;
 800466c:	f88d 4015 	strb.w	r4, [sp, #21]
    HAL_Delay(100);
 8004670:	2064      	movs	r0, #100	; 0x64
 8004672:	f7fb ff91 	bl	8000598 <HAL_Delay>
    mediaHID.keys = 0xe9;
 8004676:	23e9      	movs	r3, #233	; 0xe9
 8004678:	f88d 3015 	strb.w	r3, [sp, #21]
        USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mediaHID, sizeof(struct mediaHID_t));
 800467c:	4632      	mov	r2, r6
 800467e:	a905      	add	r1, sp, #20
 8004680:	4628      	mov	r0, r5
 8004682:	f7fe fe3d 	bl	8003300 <USBD_HID_SendReport>
        HAL_Delay(30);
 8004686:	201e      	movs	r0, #30
 8004688:	f7fb ff86 	bl	8000598 <HAL_Delay>
        mediaHID.keys = 0;
 800468c:	f88d 4015 	strb.w	r4, [sp, #21]
        USBD_HID_SendReport(&hUsbDeviceFS,(uint8_t *) &mediaHID, sizeof(struct mediaHID_t));
 8004690:	4632      	mov	r2, r6
 8004692:	a905      	add	r1, sp, #20
 8004694:	4628      	mov	r0, r5
 8004696:	f7fe fe33 	bl	8003300 <USBD_HID_SendReport>
        HAL_Delay(30);
 800469a:	201e      	movs	r0, #30
 800469c:	f7fb ff7c 	bl	8000598 <HAL_Delay>
        keyboardHID.modifiers = 0;
 80046a0:	f88d 4019 	strb.w	r4, [sp, #25]
        keyboardHID.key1 = 0;
 80046a4:	f88d 401a 	strb.w	r4, [sp, #26]
        USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&keyboardHID, sizeof(struct keyboardHID_t));
 80046a8:	2205      	movs	r2, #5
 80046aa:	a906      	add	r1, sp, #24
 80046ac:	4628      	mov	r0, r5
 80046ae:	f7fe fe27 	bl	8003300 <USBD_HID_SendReport>
        HAL_Delay(30);
 80046b2:	201e      	movs	r0, #30
 80046b4:	f7fb ff70 	bl	8000598 <HAL_Delay>
        keyboardHID.modifiers = 0;
 80046b8:	f88d 4019 	strb.w	r4, [sp, #25]
        keyboardHID.key1 = 0;
 80046bc:	f88d 401a 	strb.w	r4, [sp, #26]
        USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&keyboardHID, sizeof(struct keyboardHID_t));
 80046c0:	2205      	movs	r2, #5
 80046c2:	a906      	add	r1, sp, #24
 80046c4:	4628      	mov	r0, r5
 80046c6:	f7fe fe1b 	bl	8003300 <USBD_HID_SendReport>
  HAL_TIM_Base_Start(&htim1);
 80046ca:	4d24      	ldr	r5, [pc, #144]	; (800475c <main+0x154>)
 80046cc:	4628      	mov	r0, r5
 80046ce:	f7fd fd97 	bl	8002200 <HAL_TIM_Base_Start>
  HAL_UART_Init(&huart1);
 80046d2:	4823      	ldr	r0, [pc, #140]	; (8004760 <main+0x158>)
 80046d4:	f7fd ffac 	bl	8002630 <HAL_UART_Init>
  HAL_TIM_Base_Init(&htim2);
 80046d8:	4e22      	ldr	r6, [pc, #136]	; (8004764 <main+0x15c>)
 80046da:	4630      	mov	r0, r6
 80046dc:	f7fd fdf0 	bl	80022c0 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim2);
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7fd fd8d 	bl	8002200 <HAL_TIM_Base_Start>
  htim1.Instance->CNT=0;
 80046e6:	682b      	ldr	r3, [r5, #0]
 80046e8:	625c      	str	r4, [r3, #36]	; 0x24
  	  		HAL_TIM_Base_Start(&htim1);
 80046ea:	4628      	mov	r0, r5
 80046ec:	f7fd fd88 	bl	8002200 <HAL_TIM_Base_Start>
  	  		struct t_controlState * pControlState=initPoll();
 80046f0:	f7ff fe68 	bl	80043c4 <initPoll>
 80046f4:	4604      	mov	r4, r0
  	  		struct t_layout * testLayout=createLayout(
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <main+0x160>)
 80046f8:	9302      	str	r3, [sp, #8]
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <main+0x164>)
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <main+0x168>)
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <main+0x16c>)
 8004704:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <main+0x170>)
 8004706:	491d      	ldr	r1, [pc, #116]	; (800477c <main+0x174>)
 8004708:	481d      	ldr	r0, [pc, #116]	; (8004780 <main+0x178>)
 800470a:	f7ff fbe9 	bl	8003ee0 <createLayout>
 800470e:	4605      	mov	r5, r0
 8004710:	e003      	b.n	800471a <main+0x112>
	  if(pControlState->keysChangedFlag){
 8004712:	7a23      	ldrb	r3, [r4, #8]
 8004714:	f013 0f0f 	tst.w	r3, #15
 8004718:	d110      	bne.n	800473c <main+0x134>
	  if(htim1.Instance->CNT>stateChangeDelay){
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <main+0x154>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <main+0x17c>)
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	4299      	cmp	r1, r3
 8004728:	d9f3      	bls.n	8004712 <main+0x10a>
	  		htim1.Instance->CNT=0;
 800472a:	2300      	movs	r3, #0
 800472c:	6253      	str	r3, [r2, #36]	; 0x24
	  		HAL_TIM_Base_Start(&htim1);
 800472e:	480b      	ldr	r0, [pc, #44]	; (800475c <main+0x154>)
 8004730:	f7fd fd66 	bl	8002200 <HAL_TIM_Base_Start>
	  		pollAllControlsStep(pControlState);
 8004734:	4620      	mov	r0, r4
 8004736:	f7ff fe35 	bl	80043a4 <pollAllControlsStep>
 800473a:	e7ea      	b.n	8004712 <main+0x10a>
		  ctrlDesignator(pControlState,testLayout);
 800473c:	4629      	mov	r1, r5
 800473e:	4620      	mov	r0, r4
 8004740:	f7ff fe5a 	bl	80043f8 <ctrlDesignator>
		  pControlState->keysChangedFlag=0;
 8004744:	7a23      	ldrb	r3, [r4, #8]
 8004746:	f36f 0303 	bfc	r3, #0, #4
 800474a:	7223      	strb	r3, [r4, #8]
 800474c:	e7e5      	b.n	800471a <main+0x112>
 800474e:	bf00      	nop
 8004750:	20000450 	.word	0x20000450
 8004754:	20000118 	.word	0x20000118
 8004758:	20000058 	.word	0x20000058
 800475c:	200003d0 	.word	0x200003d0
 8004760:	20000370 	.word	0x20000370
 8004764:	20000410 	.word	0x20000410
 8004768:	08005160 	.word	0x08005160
 800476c:	08005170 	.word	0x08005170
 8004770:	08005188 	.word	0x08005188
 8004774:	08005110 	.word	0x08005110
 8004778:	08005124 	.word	0x08005124
 800477c:	08005134 	.word	0x08005134
 8004780:	0800514c 	.word	0x0800514c
 8004784:	20000112 	.word	0x20000112

08004788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004788:	4770      	bx	lr
	...

0800478c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800478c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478e:	2100      	movs	r1, #0
 8004790:	9100      	str	r1, [sp, #0]
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_MspInit+0x34>)
 8004794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
 800479c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80047a2:	9200      	str	r2, [sp, #0]
 80047a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	9101      	str	r1, [sp, #4]
 80047a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ba:	b002      	add	sp, #8
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800

080047c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c8:	2300      	movs	r3, #0
 80047ca:	9303      	str	r3, [sp, #12]
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	9305      	str	r3, [sp, #20]
 80047d0:	9306      	str	r3, [sp, #24]
 80047d2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80047d4:	6802      	ldr	r2, [r0, #0]
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_I2C_MspInit+0x9c>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80047dc:	b008      	add	sp, #32
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e2:	2500      	movs	r5, #0
 80047e4:	9501      	str	r5, [sp, #4]
 80047e6:	4e1f      	ldr	r6, [pc, #124]	; (8004864 <HAL_I2C_MspInit+0xa0>)
 80047e8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80047ea:	f043 0302 	orr.w	r3, r3, #2
 80047ee:	6333      	str	r3, [r6, #48]	; 0x30
 80047f0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047fa:	23c0      	movs	r3, #192	; 0xc0
 80047fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047fe:	2312      	movs	r3, #18
 8004800:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004802:	2301      	movs	r3, #1
 8004804:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004806:	2303      	movs	r3, #3
 8004808:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800480a:	2304      	movs	r3, #4
 800480c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480e:	a903      	add	r1, sp, #12
 8004810:	4815      	ldr	r0, [pc, #84]	; (8004868 <HAL_I2C_MspInit+0xa4>)
 8004812:	f7fc f8f9 	bl	8000a08 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004816:	9502      	str	r5, [sp, #8]
 8004818:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800481a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800481e:	6433      	str	r3, [r6, #64]	; 0x40
 8004820:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004826:	9302      	str	r3, [sp, #8]
 8004828:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800482a:	4810      	ldr	r0, [pc, #64]	; (800486c <HAL_I2C_MspInit+0xa8>)
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <HAL_I2C_MspInit+0xac>)
 800482e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004834:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004836:	2340      	movs	r3, #64	; 0x40
 8004838:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800483a:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800483c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004840:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004842:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004844:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004846:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004848:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800484a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800484c:	f7fb ff86 	bl	800075c <HAL_DMA_Init>
 8004850:	b918      	cbnz	r0, 800485a <HAL_I2C_MspInit+0x96>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_I2C_MspInit+0xa8>)
 8004854:	6363      	str	r3, [r4, #52]	; 0x34
 8004856:	639c      	str	r4, [r3, #56]	; 0x38
}
 8004858:	e7c0      	b.n	80047dc <HAL_I2C_MspInit+0x18>
      Error_Handler();
 800485a:	f7ff ff95 	bl	8004788 <Error_Handler>
 800485e:	e7f8      	b.n	8004852 <HAL_I2C_MspInit+0x8e>
 8004860:	40005400 	.word	0x40005400
 8004864:	40023800 	.word	0x40023800
 8004868:	40020400 	.word	0x40020400
 800486c:	200001fc 	.word	0x200001fc
 8004870:	400260a0 	.word	0x400260a0

08004874 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004874:	6802      	ldr	r2, [r0, #0]
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_RTC_MspInit+0x14>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d000      	beq.n	800487e <HAL_RTC_MspInit+0xa>
 800487c:	4770      	bx	lr
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800487e:	2201      	movs	r2, #1
 8004880:	4b02      	ldr	r3, [pc, #8]	; (800488c <HAL_RTC_MspInit+0x18>)
 8004882:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004884:	e7fa      	b.n	800487c <HAL_RTC_MspInit+0x8>
 8004886:	bf00      	nop
 8004888:	40002800 	.word	0x40002800
 800488c:	42470e3c 	.word	0x42470e3c

08004890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004890:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8004892:	6803      	ldr	r3, [r0, #0]
 8004894:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <HAL_TIM_Base_MspInit+0x48>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d00e      	beq.n	80048be <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048a0:	b002      	add	sp, #8
 80048a2:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_TIM_Base_MspInit+0x4c>)
 80048aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	645a      	str	r2, [r3, #68]	; 0x44
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	9b00      	ldr	r3, [sp, #0]
 80048bc:	e7f0      	b.n	80048a0 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_TIM_Base_MspInit+0x4c>)
 80048c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	9b01      	ldr	r3, [sp, #4]
}
 80048d6:	e7e3      	b.n	80048a0 <HAL_TIM_Base_MspInit+0x10>
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40023800 	.word	0x40023800

080048e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048e0:	b530      	push	{r4, r5, lr}
 80048e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e4:	2300      	movs	r3, #0
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	9304      	str	r3, [sp, #16]
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	9306      	str	r3, [sp, #24]
 80048ee:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80048f0:	6802      	ldr	r2, [r0, #0]
 80048f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048f6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d001      	beq.n	8004902 <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048fe:	b009      	add	sp, #36	; 0x24
 8004900:	bd30      	pop	{r4, r5, pc}
 8004902:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8004904:	2500      	movs	r5, #0
 8004906:	9501      	str	r5, [sp, #4]
 8004908:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	f042 0210 	orr.w	r2, r2, #16
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
 8004914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004916:	f002 0210 	and.w	r2, r2, #16
 800491a:	9201      	str	r2, [sp, #4]
 800491c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491e:	9502      	str	r5, [sp, #8]
 8004920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	9302      	str	r3, [sp, #8]
 8004930:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004932:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004936:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004938:	2302      	movs	r3, #2
 800493a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800493c:	2301      	movs	r3, #1
 800493e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004940:	2303      	movs	r3, #3
 8004942:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004944:	2307      	movs	r3, #7
 8004946:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004948:	a903      	add	r1, sp, #12
 800494a:	481c      	ldr	r0, [pc, #112]	; (80049bc <HAL_UART_MspInit+0xdc>)
 800494c:	f7fc f85c 	bl	8000a08 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004950:	481b      	ldr	r0, [pc, #108]	; (80049c0 <HAL_UART_MspInit+0xe0>)
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_UART_MspInit+0xe4>)
 8004954:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004956:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800495c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800495e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004964:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004966:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004968:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800496a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800496c:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800496e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004970:	f7fb fef4 	bl	800075c <HAL_DMA_Init>
 8004974:	b9d8      	cbnz	r0, 80049ae <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_UART_MspInit+0xe0>)
 8004978:	6363      	str	r3, [r4, #52]	; 0x34
 800497a:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800497c:	4812      	ldr	r0, [pc, #72]	; (80049c8 <HAL_UART_MspInit+0xe8>)
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <HAL_UART_MspInit+0xec>)
 8004980:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004986:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004988:	2340      	movs	r3, #64	; 0x40
 800498a:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800498c:	2300      	movs	r3, #0
 800498e:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004994:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004996:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004998:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800499a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800499c:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800499e:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80049a0:	f7fb fedc 	bl	800075c <HAL_DMA_Init>
 80049a4:	b930      	cbnz	r0, 80049b4 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80049a6:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <HAL_UART_MspInit+0xe8>)
 80049a8:	6323      	str	r3, [r4, #48]	; 0x30
 80049aa:	639c      	str	r4, [r3, #56]	; 0x38
}
 80049ac:	e7a7      	b.n	80048fe <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80049ae:	f7ff feeb 	bl	8004788 <Error_Handler>
 80049b2:	e7e0      	b.n	8004976 <HAL_UART_MspInit+0x96>
      Error_Handler();
 80049b4:	f7ff fee8 	bl	8004788 <Error_Handler>
 80049b8:	e7f5      	b.n	80049a6 <HAL_UART_MspInit+0xc6>
 80049ba:	bf00      	nop
 80049bc:	40020000 	.word	0x40020000
 80049c0:	20000310 	.word	0x20000310
 80049c4:	40026440 	.word	0x40026440
 80049c8:	200002b0 	.word	0x200002b0
 80049cc:	400264b8 	.word	0x400264b8

080049d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049d0:	4770      	bx	lr

080049d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d2:	e7fe      	b.n	80049d2 <HardFault_Handler>

080049d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049d4:	e7fe      	b.n	80049d4 <MemManage_Handler>

080049d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049d6:	e7fe      	b.n	80049d6 <BusFault_Handler>

080049d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049d8:	e7fe      	b.n	80049d8 <UsageFault_Handler>

080049da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049da:	4770      	bx	lr

080049dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049dc:	4770      	bx	lr

080049de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e2:	f7fb fdc7 	bl	8000574 <HAL_IncTick>
 80049e6:	bd08      	pop	{r3, pc}

080049e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80049e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80049ea:	4802      	ldr	r0, [pc, #8]	; (80049f4 <DMA1_Stream6_IRQHandler+0xc>)
 80049ec:	f7fb ff1e 	bl	800082c <HAL_DMA_IRQHandler>
 80049f0:	bd08      	pop	{r3, pc}
 80049f2:	bf00      	nop
 80049f4:	200001fc 	.word	0x200001fc

080049f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80049f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80049fa:	4802      	ldr	r0, [pc, #8]	; (8004a04 <DMA2_Stream2_IRQHandler+0xc>)
 80049fc:	f7fb ff16 	bl	800082c <HAL_DMA_IRQHandler>
 8004a00:	bd08      	pop	{r3, pc}
 8004a02:	bf00      	nop
 8004a04:	20000310 	.word	0x20000310

08004a08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a0a:	4802      	ldr	r0, [pc, #8]	; (8004a14 <OTG_FS_IRQHandler+0xc>)
 8004a0c:	f7fc fb86 	bl	800111c <HAL_PCD_IRQHandler>
 8004a10:	bd08      	pop	{r3, pc}
 8004a12:	bf00      	nop
 8004a14:	200006ec 	.word	0x200006ec

08004a18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004a1a:	4802      	ldr	r0, [pc, #8]	; (8004a24 <DMA2_Stream7_IRQHandler+0xc>)
 8004a1c:	f7fb ff06 	bl	800082c <HAL_DMA_IRQHandler>
 8004a20:	bd08      	pop	{r3, pc}
 8004a22:	bf00      	nop
 8004a24:	200002b0 	.word	0x200002b0

08004a28 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004a28:	b508      	push	{r3, lr}
 8004a2a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a2c:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <_sbrk+0x34>)
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	b142      	cbz	r2, 8004a44 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <_sbrk+0x34>)
 8004a34:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004a36:	4403      	add	r3, r0
 8004a38:	466a      	mov	r2, sp
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d806      	bhi.n	8004a4c <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004a3e:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <_sbrk+0x34>)
 8004a40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004a42:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004a44:	4906      	ldr	r1, [pc, #24]	; (8004a60 <_sbrk+0x38>)
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <_sbrk+0x34>)
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	e7f2      	b.n	8004a32 <_sbrk+0xa>
		errno = ENOMEM;
 8004a4c:	f000 fa38 	bl	8004ec0 <__errno>
 8004a50:	230c      	movs	r3, #12
 8004a52:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	bd08      	pop	{r3, pc}
 8004a5a:	bf00      	nop
 8004a5c:	200001ec 	.word	0x200001ec
 8004a60:	20000cf8 	.word	0x20000cf8

08004a64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <SystemInit+0x18>)
 8004a66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a6a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004a80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004a82:	2200      	movs	r2, #0
 8004a84:	490b      	ldr	r1, [pc, #44]	; (8004ab4 <MX_USB_DEVICE_Init+0x34>)
 8004a86:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <MX_USB_DEVICE_Init+0x38>)
 8004a88:	f7fe fc4e 	bl	8003328 <USBD_Init>
 8004a8c:	b948      	cbnz	r0, 8004aa2 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8004a8e:	490b      	ldr	r1, [pc, #44]	; (8004abc <MX_USB_DEVICE_Init+0x3c>)
 8004a90:	4809      	ldr	r0, [pc, #36]	; (8004ab8 <MX_USB_DEVICE_Init+0x38>)
 8004a92:	f7fe fc60 	bl	8003356 <USBD_RegisterClass>
 8004a96:	b938      	cbnz	r0, 8004aa8 <MX_USB_DEVICE_Init+0x28>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004a98:	4807      	ldr	r0, [pc, #28]	; (8004ab8 <MX_USB_DEVICE_Init+0x38>)
 8004a9a:	f7fe fc63 	bl	8003364 <USBD_Start>
 8004a9e:	b930      	cbnz	r0, 8004aae <MX_USB_DEVICE_Init+0x2e>
 8004aa0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004aa2:	f7ff fe71 	bl	8004788 <Error_Handler>
 8004aa6:	e7f2      	b.n	8004a8e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004aa8:	f7ff fe6e 	bl	8004788 <Error_Handler>
 8004aac:	e7f4      	b.n	8004a98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004aae:	f7ff fe6b 	bl	8004788 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ab2:	e7f5      	b.n	8004aa0 <MX_USB_DEVICE_Init+0x20>
 8004ab4:	20000118 	.word	0x20000118
 8004ab8:	20000450 	.word	0x20000450
 8004abc:	20000058 	.word	0x20000058

08004ac0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004ac0:	b530      	push	{r4, r5, lr}
 8004ac2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9303      	str	r3, [sp, #12]
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	9306      	str	r3, [sp, #24]
 8004ace:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004ad0:	6803      	ldr	r3, [r0, #0]
 8004ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad6:	d001      	beq.n	8004adc <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004ad8:	b009      	add	sp, #36	; 0x24
 8004ada:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004adc:	2500      	movs	r5, #0
 8004ade:	9501      	str	r5, [sp, #4]
 8004ae0:	4c16      	ldr	r4, [pc, #88]	; (8004b3c <HAL_PCD_MspInit+0x7c>)
 8004ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6323      	str	r3, [r4, #48]	; 0x30
 8004aea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004af4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004af8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afa:	2302      	movs	r3, #2
 8004afc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004afe:	2303      	movs	r3, #3
 8004b00:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004b02:	230a      	movs	r3, #10
 8004b04:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b06:	a903      	add	r1, sp, #12
 8004b08:	480d      	ldr	r0, [pc, #52]	; (8004b40 <HAL_PCD_MspInit+0x80>)
 8004b0a:	f7fb ff7d 	bl	8000a08 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	6363      	str	r3, [r4, #52]	; 0x34
 8004b16:	9502      	str	r5, [sp, #8]
 8004b18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b1e:	6463      	str	r3, [r4, #68]	; 0x44
 8004b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	2043      	movs	r0, #67	; 0x43
 8004b30:	f7fb fd58 	bl	80005e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004b34:	2043      	movs	r0, #67	; 0x43
 8004b36:	f7fb fd87 	bl	8000648 <HAL_NVIC_EnableIRQ>
}
 8004b3a:	e7cd      	b.n	8004ad8 <HAL_PCD_MspInit+0x18>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40020000 	.word	0x40020000

08004b44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b44:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004b46:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8004b4a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004b4e:	f7fe fc22 	bl	8003396 <USBD_LL_SetupStage>
 8004b52:	bd08      	pop	{r3, pc}

08004b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b54:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004b56:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004b5a:	0093      	lsls	r3, r2, #2
 8004b5c:	4403      	add	r3, r0
 8004b5e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004b62:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004b66:	f7fe fc43 	bl	80033f0 <USBD_LL_DataOutStage>
 8004b6a:	bd08      	pop	{r3, pc}

08004b6c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b6c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004b6e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8004b72:	0093      	lsls	r3, r2, #2
 8004b74:	4403      	add	r3, r0
 8004b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b78:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004b7c:	f7fe fc82 	bl	8003484 <USBD_LL_DataInStage>
 8004b80:	bd08      	pop	{r3, pc}

08004b82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004b82:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004b84:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004b88:	f7fe fd20 	bl	80035cc <USBD_LL_SOF>
 8004b8c:	bd08      	pop	{r3, pc}

08004b8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004b92:	68c3      	ldr	r3, [r0, #12]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d001      	beq.n	8004b9c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004b98:	f7ff fdf6 	bl	8004788 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8004ba2:	f7fe fd01 	bl	80035a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004ba6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8004baa:	f7fe fcd5 	bl	8003558 <USBD_LL_Reset>
 8004bae:	bd10      	pop	{r4, pc}

08004bb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004bb4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004bb8:	f7fe fcf9 	bl	80035ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004bbc:	6822      	ldr	r2, [r4, #0]
 8004bbe:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004bca:	6a23      	ldr	r3, [r4, #32]
 8004bcc:	b123      	cbz	r3, 8004bd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004bce:	4a03      	ldr	r2, [pc, #12]	; (8004bdc <HAL_PCD_SuspendCallback+0x2c>)
 8004bd0:	6913      	ldr	r3, [r2, #16]
 8004bd2:	f043 0306 	orr.w	r3, r3, #6
 8004bd6:	6113      	str	r3, [r2, #16]
 8004bd8:	bd10      	pop	{r4, pc}
 8004bda:	bf00      	nop
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004be0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004be2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004be6:	f7fe fceb 	bl	80035c0 <USBD_LL_Resume>
 8004bea:	bd08      	pop	{r3, pc}

08004bec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004bec:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004bee:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004bf2:	f7fe fcfb 	bl	80035ec <USBD_LL_IsoOUTIncomplete>
 8004bf6:	bd08      	pop	{r3, pc}

08004bf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004bf8:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004bfa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004bfe:	f7fe fcf3 	bl	80035e8 <USBD_LL_IsoINIncomplete>
 8004c02:	bd08      	pop	{r3, pc}

08004c04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c04:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004c06:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004c0a:	f7fe fcf1 	bl	80035f0 <USBD_LL_DevConnected>
 8004c0e:	bd08      	pop	{r3, pc}

08004c10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c10:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004c12:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004c16:	f7fe fced 	bl	80035f4 <USBD_LL_DevDisconnected>
 8004c1a:	bd08      	pop	{r3, pc}

08004c1c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004c1c:	7803      	ldrb	r3, [r0, #0]
 8004c1e:	b10b      	cbz	r3, 8004c24 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8004c20:	2000      	movs	r0, #0
 8004c22:	4770      	bx	lr
{
 8004c24:	b510      	push	{r4, lr}
 8004c26:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8004c28:	4815      	ldr	r0, [pc, #84]	; (8004c80 <USBD_LL_Init+0x64>)
 8004c2a:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8004c2e:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c36:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004c38:	2304      	movs	r3, #4
 8004c3a:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004c44:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004c46:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004c48:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004c4a:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004c4c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004c4e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004c50:	f7fc f8fd 	bl	8000e4e <HAL_PCD_Init>
 8004c54:	b980      	cbnz	r0, 8004c78 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004c56:	4c0a      	ldr	r4, [pc, #40]	; (8004c80 <USBD_LL_Init+0x64>)
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7fc fe2e 	bl	80018bc <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004c60:	2240      	movs	r2, #64	; 0x40
 8004c62:	2100      	movs	r1, #0
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7fc fe05 	bl	8001874 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f7fc fe00 	bl	8001874 <HAL_PCDEx_SetTxFiFo>
}
 8004c74:	2000      	movs	r0, #0
 8004c76:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004c78:	f7ff fd86 	bl	8004788 <Error_Handler>
 8004c7c:	e7eb      	b.n	8004c56 <USBD_LL_Init+0x3a>
 8004c7e:	bf00      	nop
 8004c80:	200006ec 	.word	0x200006ec

08004c84 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004c84:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  
  if((ep_addr & 0x80) == 0x80)
 8004c88:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004c8c:	d108      	bne.n	8004ca0 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004c8e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004c92:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004c96:	008a      	lsls	r2, r1, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8004c9e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004ca0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004ca4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8004cb0:	4770      	bx	lr

08004cb2 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004cb2:	b118      	cbz	r0, 8004cbc <USBD_Get_USB_Status+0xa>
 8004cb4:	2802      	cmp	r0, #2
 8004cb6:	d003      	beq.n	8004cc0 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004cb8:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004cba:	4770      	bx	lr
      usb_status = USBD_OK;
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8004cc0:	2001      	movs	r0, #1
    break;
 8004cc2:	4770      	bx	lr

08004cc4 <USBD_LL_Start>:
{
 8004cc4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004cc6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004cca:	f7fc f951 	bl	8000f70 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8004cce:	f7ff fff0 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004cd2:	bd08      	pop	{r3, pc}

08004cd4 <USBD_LL_OpenEP>:
{
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004cd8:	4613      	mov	r3, r2
 8004cda:	4622      	mov	r2, r4
 8004cdc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004ce0:	f7fc fc80 	bl	80015e4 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ce4:	f7ff ffe5 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004ce8:	bd10      	pop	{r4, pc}

08004cea <USBD_LL_CloseEP>:
{
 8004cea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004cec:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004cf0:	f7fc fcb9 	bl	8001666 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8004cf4:	f7ff ffdd 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004cf8:	bd08      	pop	{r3, pc}

08004cfa <USBD_LL_StallEP>:
{
 8004cfa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004cfc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d00:	f7fc fd40 	bl	8001784 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d04:	f7ff ffd5 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004d08:	bd08      	pop	{r3, pc}

08004d0a <USBD_LL_ClearStallEP>:
{
 8004d0a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004d0c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d10:	f7fc fd79 	bl	8001806 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8004d14:	f7ff ffcd 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004d18:	bd08      	pop	{r3, pc}

08004d1a <USBD_LL_SetUSBAddress>:
{
 8004d1a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004d1c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d20:	f7fc fc4c 	bl	80015bc <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d24:	f7ff ffc5 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004d28:	bd08      	pop	{r3, pc}

08004d2a <USBD_LL_Transmit>:
{
 8004d2a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004d2c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d30:	f7fc fcfe 	bl	8001730 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8004d34:	f7ff ffbd 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004d38:	bd08      	pop	{r3, pc}

08004d3a <USBD_LL_PrepareReceive>:
{
 8004d3a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004d3c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8004d40:	f7fc fcc8 	bl	80016d4 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8004d44:	f7ff ffb5 	bl	8004cb2 <USBD_Get_USB_Status>
}
 8004d48:	bd08      	pop	{r3, pc}
	...

08004d4c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004d4c:	2312      	movs	r3, #18
 8004d4e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004d50:	4800      	ldr	r0, [pc, #0]	; (8004d54 <USBD_FS_DeviceDescriptor+0x8>)
 8004d52:	4770      	bx	lr
 8004d54:	20000134 	.word	0x20000134

08004d58 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004d58:	2304      	movs	r3, #4
 8004d5a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004d5c:	4800      	ldr	r0, [pc, #0]	; (8004d60 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004d5e:	4770      	bx	lr
 8004d60:	20000148 	.word	0x20000148

08004d64 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d216      	bcs.n	8004d98 <IntToUnicode+0x34>
{
 8004d6a:	b430      	push	{r4, r5}
 8004d6c:	e00b      	b.n	8004d86 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004d6e:	3437      	adds	r4, #55	; 0x37
 8004d70:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004d74:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004d76:	005c      	lsls	r4, r3, #1
 8004d78:	3401      	adds	r4, #1
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8004d7e:	3301      	adds	r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d206      	bcs.n	8004d94 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8004d86:	0f04      	lsrs	r4, r0, #28
 8004d88:	2c09      	cmp	r4, #9
 8004d8a:	d8f0      	bhi.n	8004d6e <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004d8c:	3430      	adds	r4, #48	; 0x30
 8004d8e:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8004d92:	e7ef      	b.n	8004d74 <IntToUnicode+0x10>
  }
}
 8004d94:	bc30      	pop	{r4, r5}
 8004d96:	4770      	bx	lr
 8004d98:	4770      	bx	lr
	...

08004d9c <Get_SerialNum>:
{
 8004d9c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <Get_SerialNum+0x2c>)
 8004da0:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004da2:	3304      	adds	r3, #4
 8004da4:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004da6:	3304      	adds	r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004daa:	18c0      	adds	r0, r0, r3
 8004dac:	d100      	bne.n	8004db0 <Get_SerialNum+0x14>
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004db0:	4d06      	ldr	r5, [pc, #24]	; (8004dcc <Get_SerialNum+0x30>)
 8004db2:	2208      	movs	r2, #8
 8004db4:	1ca9      	adds	r1, r5, #2
 8004db6:	f7ff ffd5 	bl	8004d64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004dba:	2204      	movs	r2, #4
 8004dbc:	f105 0112 	add.w	r1, r5, #18
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7ff ffcf 	bl	8004d64 <IntToUnicode>
}
 8004dc6:	e7f2      	b.n	8004dae <Get_SerialNum+0x12>
 8004dc8:	1fff7a10 	.word	0x1fff7a10
 8004dcc:	2000014c 	.word	0x2000014c

08004dd0 <USBD_FS_SerialStrDescriptor>:
{
 8004dd0:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004dd2:	231a      	movs	r3, #26
 8004dd4:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004dd6:	f7ff ffe1 	bl	8004d9c <Get_SerialNum>
}
 8004dda:	4801      	ldr	r0, [pc, #4]	; (8004de0 <USBD_FS_SerialStrDescriptor+0x10>)
 8004ddc:	bd08      	pop	{r3, pc}
 8004dde:	bf00      	nop
 8004de0:	2000014c 	.word	0x2000014c

08004de4 <USBD_FS_ProductStrDescriptor>:
{
 8004de4:	b508      	push	{r3, lr}
 8004de6:	460a      	mov	r2, r1
  if(speed == 0)
 8004de8:	b128      	cbz	r0, 8004df6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004dea:	4905      	ldr	r1, [pc, #20]	; (8004e00 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004dec:	4805      	ldr	r0, [pc, #20]	; (8004e04 <USBD_FS_ProductStrDescriptor+0x20>)
 8004dee:	f7fe ff13 	bl	8003c18 <USBD_GetString>
}
 8004df2:	4803      	ldr	r0, [pc, #12]	; (8004e00 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004df4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004df6:	4902      	ldr	r1, [pc, #8]	; (8004e00 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004df8:	4802      	ldr	r0, [pc, #8]	; (8004e04 <USBD_FS_ProductStrDescriptor+0x20>)
 8004dfa:	f7fe ff0d 	bl	8003c18 <USBD_GetString>
 8004dfe:	e7f8      	b.n	8004df2 <USBD_FS_ProductStrDescriptor+0xe>
 8004e00:	20000af4 	.word	0x20000af4
 8004e04:	080051dc 	.word	0x080051dc

08004e08 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004e08:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004e0a:	4c04      	ldr	r4, [pc, #16]	; (8004e1c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4803      	ldr	r0, [pc, #12]	; (8004e20 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004e12:	f7fe ff01 	bl	8003c18 <USBD_GetString>
}
 8004e16:	4620      	mov	r0, r4
 8004e18:	bd10      	pop	{r4, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000af4 	.word	0x20000af4
 8004e20:	080051c8 	.word	0x080051c8

08004e24 <USBD_FS_ConfigStrDescriptor>:
{
 8004e24:	b508      	push	{r3, lr}
 8004e26:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004e28:	b128      	cbz	r0, 8004e36 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004e2a:	4905      	ldr	r1, [pc, #20]	; (8004e40 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e2c:	4805      	ldr	r0, [pc, #20]	; (8004e44 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004e2e:	f7fe fef3 	bl	8003c18 <USBD_GetString>
}
 8004e32:	4803      	ldr	r0, [pc, #12]	; (8004e40 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e34:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004e36:	4902      	ldr	r1, [pc, #8]	; (8004e40 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004e3a:	f7fe feed 	bl	8003c18 <USBD_GetString>
 8004e3e:	e7f8      	b.n	8004e32 <USBD_FS_ConfigStrDescriptor+0xe>
 8004e40:	20000af4 	.word	0x20000af4
 8004e44:	080051ac 	.word	0x080051ac

08004e48 <USBD_FS_InterfaceStrDescriptor>:
{
 8004e48:	b508      	push	{r3, lr}
 8004e4a:	460a      	mov	r2, r1
  if(speed == 0)
 8004e4c:	b128      	cbz	r0, 8004e5a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004e4e:	4905      	ldr	r1, [pc, #20]	; (8004e64 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004e50:	4805      	ldr	r0, [pc, #20]	; (8004e68 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004e52:	f7fe fee1 	bl	8003c18 <USBD_GetString>
}
 8004e56:	4803      	ldr	r0, [pc, #12]	; (8004e64 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004e58:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004e5a:	4902      	ldr	r1, [pc, #8]	; (8004e64 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004e5c:	4802      	ldr	r0, [pc, #8]	; (8004e68 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004e5e:	f7fe fedb 	bl	8003c18 <USBD_GetString>
 8004e62:	e7f8      	b.n	8004e56 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004e64:	20000af4 	.word	0x20000af4
 8004e68:	080051b8 	.word	0x080051b8

08004e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ea4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e72:	e003      	b.n	8004e7c <LoopCopyDataInit>

08004e74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e7a:	3104      	adds	r1, #4

08004e7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e7c:	480b      	ldr	r0, [pc, #44]	; (8004eac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e84:	d3f6      	bcc.n	8004e74 <CopyDataInit>
  ldr  r2, =_sbss
 8004e86:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e88:	e002      	b.n	8004e90 <LoopFillZerobss>

08004e8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e8c:	f842 3b04 	str.w	r3, [r2], #4

08004e90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e94:	d3f9      	bcc.n	8004e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e96:	f7ff fde5 	bl	8004a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e9a:	f000 f817 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e9e:	f7ff fbb3 	bl	8004608 <main>
  bx  lr    
 8004ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ea4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8004ea8:	08005260 	.word	0x08005260
  ldr  r0, =_sdata
 8004eac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004eb0:	200001cc 	.word	0x200001cc
  ldr  r2, =_sbss
 8004eb4:	200001cc 	.word	0x200001cc
  ldr  r3, = _ebss
 8004eb8:	20000cf8 	.word	0x20000cf8

08004ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ebc:	e7fe      	b.n	8004ebc <ADC_IRQHandler>
	...

08004ec0 <__errno>:
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <__errno+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000168 	.word	0x20000168

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4e0d      	ldr	r6, [pc, #52]	; (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1ba4      	subs	r4, r4, r6
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2500      	movs	r5, #0
 8004ed8:	42a5      	cmp	r5, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4e0b      	ldr	r6, [pc, #44]	; (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	; (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 f906 	bl	80050f0 <_init>
 8004ee4:	1ba4      	subs	r4, r4, r6
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2500      	movs	r5, #0
 8004eea:	42a5      	cmp	r5, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ef4:	4798      	blx	r3
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004efe:	4798      	blx	r3
 8004f00:	3501      	adds	r5, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	08005258 	.word	0x08005258
 8004f08:	08005258 	.word	0x08005258
 8004f0c:	08005258 	.word	0x08005258
 8004f10:	0800525c 	.word	0x0800525c

08004f14 <malloc>:
 8004f14:	4b02      	ldr	r3, [pc, #8]	; (8004f20 <malloc+0xc>)
 8004f16:	4601      	mov	r1, r0
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f000 b861 	b.w	8004fe0 <_malloc_r>
 8004f1e:	bf00      	nop
 8004f20:	20000168 	.word	0x20000168

08004f24 <free>:
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <free+0xc>)
 8004f26:	4601      	mov	r1, r0
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	f000 b80b 	b.w	8004f44 <_free_r>
 8004f2e:	bf00      	nop
 8004f30:	20000168 	.word	0x20000168

08004f34 <memset>:
 8004f34:	4402      	add	r2, r0
 8004f36:	4603      	mov	r3, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <_free_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4605      	mov	r5, r0
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	d045      	beq.n	8004fd8 <_free_r+0x94>
 8004f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f50:	1f0c      	subs	r4, r1, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bfb8      	it	lt
 8004f56:	18e4      	addlt	r4, r4, r3
 8004f58:	f000 f8c7 	bl	80050ea <__malloc_lock>
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <_free_r+0x98>)
 8004f5e:	6813      	ldr	r3, [r2, #0]
 8004f60:	4610      	mov	r0, r2
 8004f62:	b933      	cbnz	r3, 8004f72 <_free_r+0x2e>
 8004f64:	6063      	str	r3, [r4, #4]
 8004f66:	6014      	str	r4, [r2, #0]
 8004f68:	4628      	mov	r0, r5
 8004f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f6e:	f000 b8bd 	b.w	80050ec <__malloc_unlock>
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	d90c      	bls.n	8004f90 <_free_r+0x4c>
 8004f76:	6821      	ldr	r1, [r4, #0]
 8004f78:	1862      	adds	r2, r4, r1
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bf04      	itt	eq
 8004f7e:	681a      	ldreq	r2, [r3, #0]
 8004f80:	685b      	ldreq	r3, [r3, #4]
 8004f82:	6063      	str	r3, [r4, #4]
 8004f84:	bf04      	itt	eq
 8004f86:	1852      	addeq	r2, r2, r1
 8004f88:	6022      	streq	r2, [r4, #0]
 8004f8a:	6004      	str	r4, [r0, #0]
 8004f8c:	e7ec      	b.n	8004f68 <_free_r+0x24>
 8004f8e:	4613      	mov	r3, r2
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	b10a      	cbz	r2, 8004f98 <_free_r+0x54>
 8004f94:	42a2      	cmp	r2, r4
 8004f96:	d9fa      	bls.n	8004f8e <_free_r+0x4a>
 8004f98:	6819      	ldr	r1, [r3, #0]
 8004f9a:	1858      	adds	r0, r3, r1
 8004f9c:	42a0      	cmp	r0, r4
 8004f9e:	d10b      	bne.n	8004fb8 <_free_r+0x74>
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	4401      	add	r1, r0
 8004fa4:	1858      	adds	r0, r3, r1
 8004fa6:	4282      	cmp	r2, r0
 8004fa8:	6019      	str	r1, [r3, #0]
 8004faa:	d1dd      	bne.n	8004f68 <_free_r+0x24>
 8004fac:	6810      	ldr	r0, [r2, #0]
 8004fae:	6852      	ldr	r2, [r2, #4]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	4401      	add	r1, r0
 8004fb4:	6019      	str	r1, [r3, #0]
 8004fb6:	e7d7      	b.n	8004f68 <_free_r+0x24>
 8004fb8:	d902      	bls.n	8004fc0 <_free_r+0x7c>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	e7d3      	b.n	8004f68 <_free_r+0x24>
 8004fc0:	6820      	ldr	r0, [r4, #0]
 8004fc2:	1821      	adds	r1, r4, r0
 8004fc4:	428a      	cmp	r2, r1
 8004fc6:	bf04      	itt	eq
 8004fc8:	6811      	ldreq	r1, [r2, #0]
 8004fca:	6852      	ldreq	r2, [r2, #4]
 8004fcc:	6062      	str	r2, [r4, #4]
 8004fce:	bf04      	itt	eq
 8004fd0:	1809      	addeq	r1, r1, r0
 8004fd2:	6021      	streq	r1, [r4, #0]
 8004fd4:	605c      	str	r4, [r3, #4]
 8004fd6:	e7c7      	b.n	8004f68 <_free_r+0x24>
 8004fd8:	bd38      	pop	{r3, r4, r5, pc}
 8004fda:	bf00      	nop
 8004fdc:	200001f0 	.word	0x200001f0

08004fe0 <_malloc_r>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	1ccd      	adds	r5, r1, #3
 8004fe4:	f025 0503 	bic.w	r5, r5, #3
 8004fe8:	3508      	adds	r5, #8
 8004fea:	2d0c      	cmp	r5, #12
 8004fec:	bf38      	it	cc
 8004fee:	250c      	movcc	r5, #12
 8004ff0:	2d00      	cmp	r5, #0
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	db01      	blt.n	8004ffa <_malloc_r+0x1a>
 8004ff6:	42a9      	cmp	r1, r5
 8004ff8:	d903      	bls.n	8005002 <_malloc_r+0x22>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	2000      	movs	r0, #0
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	f000 f872 	bl	80050ea <__malloc_lock>
 8005006:	4a23      	ldr	r2, [pc, #140]	; (8005094 <_malloc_r+0xb4>)
 8005008:	6814      	ldr	r4, [r2, #0]
 800500a:	4621      	mov	r1, r4
 800500c:	b991      	cbnz	r1, 8005034 <_malloc_r+0x54>
 800500e:	4c22      	ldr	r4, [pc, #136]	; (8005098 <_malloc_r+0xb8>)
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	b91b      	cbnz	r3, 800501c <_malloc_r+0x3c>
 8005014:	4630      	mov	r0, r6
 8005016:	f000 f841 	bl	800509c <_sbrk_r>
 800501a:	6020      	str	r0, [r4, #0]
 800501c:	4629      	mov	r1, r5
 800501e:	4630      	mov	r0, r6
 8005020:	f000 f83c 	bl	800509c <_sbrk_r>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d126      	bne.n	8005076 <_malloc_r+0x96>
 8005028:	230c      	movs	r3, #12
 800502a:	6033      	str	r3, [r6, #0]
 800502c:	4630      	mov	r0, r6
 800502e:	f000 f85d 	bl	80050ec <__malloc_unlock>
 8005032:	e7e4      	b.n	8004ffe <_malloc_r+0x1e>
 8005034:	680b      	ldr	r3, [r1, #0]
 8005036:	1b5b      	subs	r3, r3, r5
 8005038:	d41a      	bmi.n	8005070 <_malloc_r+0x90>
 800503a:	2b0b      	cmp	r3, #11
 800503c:	d90f      	bls.n	800505e <_malloc_r+0x7e>
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	50cd      	str	r5, [r1, r3]
 8005042:	18cc      	adds	r4, r1, r3
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f851 	bl	80050ec <__malloc_unlock>
 800504a:	f104 000b 	add.w	r0, r4, #11
 800504e:	1d23      	adds	r3, r4, #4
 8005050:	f020 0007 	bic.w	r0, r0, #7
 8005054:	1ac3      	subs	r3, r0, r3
 8005056:	d01b      	beq.n	8005090 <_malloc_r+0xb0>
 8005058:	425a      	negs	r2, r3
 800505a:	50e2      	str	r2, [r4, r3]
 800505c:	bd70      	pop	{r4, r5, r6, pc}
 800505e:	428c      	cmp	r4, r1
 8005060:	bf0d      	iteet	eq
 8005062:	6863      	ldreq	r3, [r4, #4]
 8005064:	684b      	ldrne	r3, [r1, #4]
 8005066:	6063      	strne	r3, [r4, #4]
 8005068:	6013      	streq	r3, [r2, #0]
 800506a:	bf18      	it	ne
 800506c:	460c      	movne	r4, r1
 800506e:	e7e9      	b.n	8005044 <_malloc_r+0x64>
 8005070:	460c      	mov	r4, r1
 8005072:	6849      	ldr	r1, [r1, #4]
 8005074:	e7ca      	b.n	800500c <_malloc_r+0x2c>
 8005076:	1cc4      	adds	r4, r0, #3
 8005078:	f024 0403 	bic.w	r4, r4, #3
 800507c:	42a0      	cmp	r0, r4
 800507e:	d005      	beq.n	800508c <_malloc_r+0xac>
 8005080:	1a21      	subs	r1, r4, r0
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f80a 	bl	800509c <_sbrk_r>
 8005088:	3001      	adds	r0, #1
 800508a:	d0cd      	beq.n	8005028 <_malloc_r+0x48>
 800508c:	6025      	str	r5, [r4, #0]
 800508e:	e7d9      	b.n	8005044 <_malloc_r+0x64>
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	bf00      	nop
 8005094:	200001f0 	.word	0x200001f0
 8005098:	200001f4 	.word	0x200001f4

0800509c <_sbrk_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4c06      	ldr	r4, [pc, #24]	; (80050b8 <_sbrk_r+0x1c>)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4605      	mov	r5, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	f7ff fcbe 	bl	8004a28 <_sbrk>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_sbrk_r+0x1a>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_sbrk_r+0x1a>
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20000cf4 	.word	0x20000cf4

080050bc <strcat>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4602      	mov	r2, r0
 80050c0:	4613      	mov	r3, r2
 80050c2:	3201      	adds	r2, #1
 80050c4:	781c      	ldrb	r4, [r3, #0]
 80050c6:	2c00      	cmp	r4, #0
 80050c8:	d1fa      	bne.n	80050c0 <strcat+0x4>
 80050ca:	3b01      	subs	r3, #1
 80050cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d1f9      	bne.n	80050cc <strcat+0x10>
 80050d8:	bd10      	pop	{r4, pc}

080050da <strcpy>:
 80050da:	4603      	mov	r3, r0
 80050dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050e0:	f803 2b01 	strb.w	r2, [r3], #1
 80050e4:	2a00      	cmp	r2, #0
 80050e6:	d1f9      	bne.n	80050dc <strcpy+0x2>
 80050e8:	4770      	bx	lr

080050ea <__malloc_lock>:
 80050ea:	4770      	bx	lr

080050ec <__malloc_unlock>:
 80050ec:	4770      	bx	lr
	...

080050f0 <_init>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr

080050fc <_fini>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr
