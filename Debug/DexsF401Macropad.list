
DexsF401Macropad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800415c  0800415c  0001415c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001cc  20000000  080041dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b2c  200001cc  080043a8  000201cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000cf8  080043a8  00020cf8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020769  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004580  00000000  00000000  00040965  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ef8a  00000000  00000000  00044ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001250  00000000  00000000  00053e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001730  00000000  00000000  000550c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009dc7  00000000  00000000  000567f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006c34  00000000  00000000  000605b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000671eb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003790  00000000  00000000  00067268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001cc 	.word	0x200001cc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004144 	.word	0x08004144

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001d0 	.word	0x200001d0
 80001d0:	08004144 	.word	0x08004144

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_InitTick+0x3c>)
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x40>)
{
 80004ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f6:	6810      	ldr	r0, [r2, #0]
 80004f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004fc:	f000 f8aa 	bl	8000654 <HAL_SYSTICK_Config>
 8000500:	4604      	mov	r4, r0
 8000502:	b958      	cbnz	r0, 800051c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000504:	2d0f      	cmp	r5, #15
 8000506:	d809      	bhi.n	800051c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	4602      	mov	r2, r0
 800050a:	4629      	mov	r1, r5
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 f85e 	bl	80005d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_InitTick+0x44>)
 8000516:	4620      	mov	r0, r4
 8000518:	601d      	str	r5, [r3, #0]
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051e:	bd38      	pop	{r3, r4, r5, pc}
 8000520:	20000114 	.word	0x20000114
 8000524:	20000000 	.word	0x20000000
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_Init>:
{
 800052c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_Init+0x30>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f82f 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ffc8 	bl	80004e4 <HAL_InitTick>
  HAL_MspInit();
 8000554:	f003 f98c 	bl	8003870 <HAL_MspInit>
}
 8000558:	2000      	movs	r0, #0
 800055a:	bd08      	pop	{r3, pc}
 800055c:	40023c00 	.word	0x40023c00

08000560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x10>)
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_IncTick+0x14>)
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	440b      	add	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000208 	.word	0x20000208
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <HAL_GetTick+0x8>)
 800057a:	6818      	ldr	r0, [r3, #0]
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000208 	.word	0x20000208

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b538      	push	{r3, r4, r5, lr}
 8000586:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff fff6 	bl	8000578 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800058c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	bf1c      	itt	ne
 8000590:	4b05      	ldrne	r3, [pc, #20]	; (80005a8 <HAL_Delay+0x24>)
 8000592:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000594:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000596:	bf18      	it	ne
 8000598:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	f7ff ffed 	bl	8000578 <HAL_GetTick>
 800059e:	1b40      	subs	r0, r0, r5
 80005a0:	4284      	cmp	r4, r0
 80005a2:	d8fa      	bhi.n	800059a <HAL_Delay+0x16>
  {
  }
}
 80005a4:	bd38      	pop	{r3, r4, r5, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005bc:	0200      	lsls	r0, r0, #8
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005c8:	60d3      	str	r3, [r2, #12]
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	68dc      	ldr	r4, [r3, #12]
 80005d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	bf28      	it	cs
 80005e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	f04f 0501 	mov.w	r5, #1
 80005ec:	fa05 f303 	lsl.w	r3, r5, r3
 80005f0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f4:	bf8c      	ite	hi
 80005f6:	3c03      	subhi	r4, #3
 80005f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fa:	4019      	ands	r1, r3
 80005fc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005fe:	fa05 f404 	lsl.w	r4, r5, r4
 8000602:	3c01      	subs	r4, #1
 8000604:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000606:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	ea42 0201 	orr.w	r2, r2, r1
 800060c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	bfad      	iteet	ge
 8000612:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	f000 000f 	andlt.w	r0, r0, #15
 800061a:	4b06      	ldrlt	r3, [pc, #24]	; (8000634 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	bfb5      	itete	lt
 8000622:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	e000ed14 	.word	0xe000ed14

08000638 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000638:	2800      	cmp	r0, #0
 800063a:	db08      	blt.n	800064e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063c:	0942      	lsrs	r2, r0, #5
 800063e:	2301      	movs	r3, #1
 8000640:	f000 001f 	and.w	r0, r0, #31
 8000644:	fa03 f000 	lsl.w	r0, r3, r0
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_NVIC_EnableIRQ+0x18>)
 800064a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100

08000654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	3801      	subs	r0, #1
 8000656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065a:	d20a      	bcs.n	8000672 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	21f0      	movs	r1, #240	; 0xf0
 8000664:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000680:	6803      	ldr	r3, [r0, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000688:	f023 0303 	bic.w	r3, r3, #3
 800068c:	2118      	movs	r1, #24
 800068e:	3a10      	subs	r2, #16
 8000690:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000694:	4904      	ldr	r1, [pc, #16]	; (80006a8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000696:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000698:	bf88      	it	hi
 800069a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800069c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800069e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006a0:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80006a2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	0800415c 	.word	0x0800415c

080006ac <HAL_DMA_Init>:
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff ff62 	bl	8000578 <HAL_GetTick>
 80006b4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006b6:	2c00      	cmp	r4, #0
 80006b8:	d071      	beq.n	800079e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006ba:	2300      	movs	r3, #0
 80006bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80006c0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006c8:	6813      	ldr	r3, [r2, #0]
 80006ca:	f023 0301 	bic.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006d0:	6821      	ldr	r1, [r4, #0]
 80006d2:	680b      	ldr	r3, [r1, #0]
 80006d4:	07d8      	lsls	r0, r3, #31
 80006d6:	d43c      	bmi.n	8000752 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006d8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006da:	4d32      	ldr	r5, [pc, #200]	; (80007a4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006dc:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006de:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006e0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006e2:	68a3      	ldr	r3, [r4, #8]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	68e2      	ldr	r2, [r4, #12]
 80006e8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006ea:	6922      	ldr	r2, [r4, #16]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	6962      	ldr	r2, [r4, #20]
 80006f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006f2:	69e2      	ldr	r2, [r4, #28]
 80006f4:	4303      	orrs	r3, r0
 80006f6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80006f8:	6a22      	ldr	r2, [r4, #32]
 80006fa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006fe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000700:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000704:	bf01      	itttt	eq
 8000706:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000708:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800070a:	4335      	orreq	r5, r6
 800070c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800070e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000710:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000712:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000714:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000718:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800071c:	d10b      	bne.n	8000736 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800071e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000720:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000722:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000724:	b13d      	cbz	r5, 8000736 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000726:	b9f8      	cbnz	r0, 8000768 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000728:	2a01      	cmp	r2, #1
 800072a:	d02d      	beq.n	8000788 <HAL_DMA_Init+0xdc>
 800072c:	d301      	bcc.n	8000732 <HAL_DMA_Init+0x86>
 800072e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000730:	d101      	bne.n	8000736 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000732:	01ea      	lsls	r2, r5, #7
 8000734:	d42b      	bmi.n	800078e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000736:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000738:	4620      	mov	r0, r4
 800073a:	f7ff ffa1 	bl	8000680 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800073e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000740:	233f      	movs	r3, #63	; 0x3f
 8000742:	4093      	lsls	r3, r2
 8000744:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000746:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000748:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800074a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800074c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000750:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000752:	f7ff ff11 	bl	8000578 <HAL_GetTick>
 8000756:	1b40      	subs	r0, r0, r5
 8000758:	2805      	cmp	r0, #5
 800075a:	d9b9      	bls.n	80006d0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800075c:	2320      	movs	r3, #32
 800075e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000760:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000762:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000766:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000768:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800076c:	d113      	bne.n	8000796 <HAL_DMA_Init+0xea>
    switch (tmp)
 800076e:	2a03      	cmp	r2, #3
 8000770:	d8e1      	bhi.n	8000736 <HAL_DMA_Init+0x8a>
 8000772:	a001      	add	r0, pc, #4	; (adr r0, 8000778 <HAL_DMA_Init+0xcc>)
 8000774:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000778:	0800078f 	.word	0x0800078f
 800077c:	08000733 	.word	0x08000733
 8000780:	0800078f 	.word	0x0800078f
 8000784:	08000789 	.word	0x08000789
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000788:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800078c:	d1d3      	bne.n	8000736 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000792:	2001      	movs	r0, #1
 8000794:	e7e5      	b.n	8000762 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000796:	2a02      	cmp	r2, #2
 8000798:	d9f9      	bls.n	800078e <HAL_DMA_Init+0xe2>
 800079a:	2a03      	cmp	r2, #3
 800079c:	e7c8      	b.n	8000730 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800079e:	2001      	movs	r0, #1
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	bf00      	nop
 80007a4:	f010803f 	.word	0xf010803f

080007a8 <HAL_DMA_IRQHandler>:
{
 80007a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007ae:	4b5a      	ldr	r3, [pc, #360]	; (8000918 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007b0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80007b2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007b4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80007b6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007b8:	2208      	movs	r2, #8
 80007ba:	409a      	lsls	r2, r3
 80007bc:	4216      	tst	r6, r2
{
 80007be:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007c0:	d00c      	beq.n	80007dc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80007c2:	6801      	ldr	r1, [r0, #0]
 80007c4:	6808      	ldr	r0, [r1, #0]
 80007c6:	0740      	lsls	r0, r0, #29
 80007c8:	d508      	bpl.n	80007dc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80007ca:	6808      	ldr	r0, [r1, #0]
 80007cc:	f020 0004 	bic.w	r0, r0, #4
 80007d0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80007d2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80007d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80007d6:	f042 0201 	orr.w	r2, r2, #1
 80007da:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80007dc:	2201      	movs	r2, #1
 80007de:	409a      	lsls	r2, r3
 80007e0:	4216      	tst	r6, r2
 80007e2:	d008      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80007e4:	6821      	ldr	r1, [r4, #0]
 80007e6:	6949      	ldr	r1, [r1, #20]
 80007e8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80007ea:	bf41      	itttt	mi
 80007ec:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80007ee:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007f0:	f042 0202 	orrmi.w	r2, r2, #2
 80007f4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80007f6:	2204      	movs	r2, #4
 80007f8:	409a      	lsls	r2, r3
 80007fa:	4216      	tst	r6, r2
 80007fc:	d008      	beq.n	8000810 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80007fe:	6821      	ldr	r1, [r4, #0]
 8000800:	6809      	ldr	r1, [r1, #0]
 8000802:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000804:	bf41      	itttt	mi
 8000806:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000808:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800080a:	f042 0204 	orrmi.w	r2, r2, #4
 800080e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000810:	2210      	movs	r2, #16
 8000812:	409a      	lsls	r2, r3
 8000814:	4216      	tst	r6, r2
 8000816:	d010      	beq.n	800083a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	0709      	lsls	r1, r1, #28
 800081e:	d50c      	bpl.n	800083a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000820:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	0350      	lsls	r0, r2, #13
 8000826:	d535      	bpl.n	8000894 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	0319      	lsls	r1, r3, #12
 800082c:	d401      	bmi.n	8000832 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800082e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000830:	e000      	b.n	8000834 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000832:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000834:	b10b      	cbz	r3, 800083a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000836:	4620      	mov	r0, r4
 8000838:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800083a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800083c:	2220      	movs	r2, #32
 800083e:	408a      	lsls	r2, r1
 8000840:	4216      	tst	r6, r2
 8000842:	d038      	beq.n	80008b6 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	06c6      	lsls	r6, r0, #27
 800084a:	d534      	bpl.n	80008b6 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800084c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800084e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000852:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000854:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000856:	d125      	bne.n	80008a4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000858:	f022 0216 	bic.w	r2, r2, #22
 800085c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000864:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000866:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000868:	b90a      	cbnz	r2, 800086e <HAL_DMA_IRQHandler+0xc6>
 800086a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800086c:	b11a      	cbz	r2, 8000876 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f022 0208 	bic.w	r2, r2, #8
 8000874:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000876:	233f      	movs	r3, #63	; 0x3f
 8000878:	408b      	lsls	r3, r1
 800087a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800087c:	2300      	movs	r3, #0
 800087e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000882:	2301      	movs	r3, #1
 8000884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000888:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800088a:	b10b      	cbz	r3, 8000890 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800088c:	4620      	mov	r0, r4
 800088e:	4798      	blx	r3
}
 8000890:	b003      	add	sp, #12
 8000892:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000898:	bf5e      	ittt	pl
 800089a:	681a      	ldrpl	r2, [r3, #0]
 800089c:	f022 0208 	bicpl.w	r2, r2, #8
 80008a0:	601a      	strpl	r2, [r3, #0]
 80008a2:	e7c4      	b.n	800082e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008a4:	0350      	lsls	r0, r2, #13
 80008a6:	d528      	bpl.n	80008fa <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	0319      	lsls	r1, r3, #12
 80008ac:	d432      	bmi.n	8000914 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80008ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80008b0:	b10b      	cbz	r3, 80008b6 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80008b2:	4620      	mov	r0, r4
 80008b4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80008b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0e9      	beq.n	8000890 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80008bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008be:	07da      	lsls	r2, r3, #31
 80008c0:	d519      	bpl.n	80008f6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80008c2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80008c4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80008c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80008ca:	6813      	ldr	r3, [r2, #0]
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008d2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80008d6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80008da:	9b01      	ldr	r3, [sp, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	429f      	cmp	r7, r3
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	d302      	bcc.n	80008ea <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80008e4:	6813      	ldr	r3, [r2, #0]
 80008e6:	07db      	lsls	r3, r3, #31
 80008e8:	d4f7      	bmi.n	80008da <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80008ea:	2300      	movs	r3, #0
 80008ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80008f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80008f8:	e7c7      	b.n	800088a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000900:	d108      	bne.n	8000914 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000902:	6819      	ldr	r1, [r3, #0]
 8000904:	f021 0110 	bic.w	r1, r1, #16
 8000908:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800090a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800090c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000910:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000914:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000916:	e7cb      	b.n	80008b0 <HAL_DMA_IRQHandler+0x108>
 8000918:	20000114 	.word	0x20000114

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000920:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000922:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000924:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000ab4 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000928:	4a60      	ldr	r2, [pc, #384]	; (8000aac <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800092c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000930:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000932:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000934:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000938:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800093a:	42ac      	cmp	r4, r5
 800093c:	f040 80a6 	bne.w	8000a8c <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	684c      	ldr	r4, [r1, #4]
 8000942:	f024 0c10 	bic.w	ip, r4, #16
 8000946:	f10c 36ff 	add.w	r6, ip, #4294967295
 800094a:	2e01      	cmp	r6, #1
 800094c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000950:	d812      	bhi.n	8000978 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000952:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000954:	2603      	movs	r6, #3
 8000956:	fa06 f60e 	lsl.w	r6, r6, lr
 800095a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800095e:	68ce      	ldr	r6, [r1, #12]
 8000960:	fa06 f60e 	lsl.w	r6, r6, lr
 8000964:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000966:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000968:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800096a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800096e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000972:	409e      	lsls	r6, r3
 8000974:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000976:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000978:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800097a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000980:	43f6      	mvns	r6, r6
 8000982:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000986:	688f      	ldr	r7, [r1, #8]
 8000988:	fa07 f70e 	lsl.w	r7, r7, lr
 800098c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000990:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000994:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	d116      	bne.n	80009c6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000998:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800099c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009a4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009ac:	f04f 0c0f 	mov.w	ip, #15
 80009b0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009b4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009b8:	690f      	ldr	r7, [r1, #16]
 80009ba:	fa07 f70b 	lsl.w	r7, r7, fp
 80009be:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009c2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009c6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ca:	f004 0703 	and.w	r7, r4, #3
 80009ce:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009d2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009d6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d8:	00e6      	lsls	r6, r4, #3
 80009da:	d557      	bpl.n	8000a8c <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	f04f 0b00 	mov.w	fp, #0
 80009e0:	f8cd b00c 	str.w	fp, [sp, #12]
 80009e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e8:	4e31      	ldr	r6, [pc, #196]	; (8000ab0 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009ee:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80009f2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80009f6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80009fa:	9703      	str	r7, [sp, #12]
 80009fc:	9f03      	ldr	r7, [sp, #12]
 80009fe:	f023 0703 	bic.w	r7, r3, #3
 8000a02:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a06:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a0a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a0e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a16:	f04f 0e0f 	mov.w	lr, #15
 8000a1a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a20:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a24:	d039      	beq.n	8000a9a <HAL_GPIO_Init+0x17e>
 8000a26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a2a:	42b0      	cmp	r0, r6
 8000a2c:	d037      	beq.n	8000a9e <HAL_GPIO_Init+0x182>
 8000a2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a32:	42b0      	cmp	r0, r6
 8000a34:	d035      	beq.n	8000aa2 <HAL_GPIO_Init+0x186>
 8000a36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a3a:	42b0      	cmp	r0, r6
 8000a3c:	d033      	beq.n	8000aa6 <HAL_GPIO_Init+0x18a>
 8000a3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a42:	42b0      	cmp	r0, r6
 8000a44:	bf14      	ite	ne
 8000a46:	2607      	movne	r6, #7
 8000a48:	2604      	moveq	r6, #4
 8000a4a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a4e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a52:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a54:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a56:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	bf0c      	ite	eq
 8000a5e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a60:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000a62:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000a64:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a66:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	bf0c      	ite	eq
 8000a6c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a6e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000a70:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a72:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a74:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a78:	bf0c      	ite	eq
 8000a7a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a7c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000a7e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a82:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a84:	bf54      	ite	pl
 8000a86:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000a88:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000a8a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	2b10      	cmp	r3, #16
 8000a90:	f47f af4f 	bne.w	8000932 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a94:	b005      	add	sp, #20
 8000a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a9a:	465e      	mov	r6, fp
 8000a9c:	e7d5      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000a9e:	2601      	movs	r6, #1
 8000aa0:	e7d3      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000aa2:	2602      	movs	r6, #2
 8000aa4:	e7d1      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000aa6:	2603      	movs	r6, #3
 8000aa8:	e7cf      	b.n	8000a4a <HAL_GPIO_Init+0x12e>
 8000aaa:	bf00      	nop
 8000aac:	40013c00 	.word	0x40013c00
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab8:	b10a      	cbz	r2, 8000abe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aba:	6181      	str	r1, [r0, #24]
 8000abc:	4770      	bx	lr
 8000abe:	0409      	lsls	r1, r1, #16
 8000ac0:	e7fb      	b.n	8000aba <HAL_GPIO_WritePin+0x2>
	...

08000ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ac4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	b908      	cbnz	r0, 8000ace <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000aca:	2001      	movs	r0, #1
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ace:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ad2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ad6:	b91b      	cbnz	r3, 8000ae0 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ad8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000adc:	f002 fee4 	bl	80038a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ae0:	2324      	movs	r3, #36	; 0x24
 8000ae2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f022 0201 	bic.w	r2, r2, #1
 8000aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b00:	f000 ffac 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b04:	6865      	ldr	r5, [r4, #4]
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <HAL_I2C_Init+0x148>)
 8000b08:	429d      	cmp	r5, r3
 8000b0a:	d84d      	bhi.n	8000ba8 <HAL_I2C_Init+0xe4>
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <HAL_I2C_Init+0x14c>)
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	d9db      	bls.n	8000aca <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b12:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b14:	493f      	ldr	r1, [pc, #252]	; (8000c14 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b16:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000b18:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b20:	430b      	orrs	r3, r1
 8000b22:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b24:	6a13      	ldr	r3, [r2, #32]
 8000b26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b2a:	3101      	adds	r1, #1
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b30:	69d1      	ldr	r1, [r2, #28]
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <HAL_I2C_Init+0x148>)
 8000b34:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000b38:	429d      	cmp	r5, r3
 8000b3a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b3e:	f100 30ff 	add.w	r0, r0, #4294967295
 8000b42:	d848      	bhi.n	8000bd6 <HAL_I2C_Init+0x112>
 8000b44:	006d      	lsls	r5, r5, #1
 8000b46:	fbb0 f0f5 	udiv	r0, r0, r5
 8000b4a:	3001      	adds	r0, #1
 8000b4c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	bf38      	it	cc
 8000b54:	2304      	movcc	r3, #4
 8000b56:	430b      	orrs	r3, r1
 8000b58:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000b5a:	6811      	ldr	r1, [r2, #0]
 8000b5c:	6a20      	ldr	r0, [r4, #32]
 8000b5e:	69e3      	ldr	r3, [r4, #28]
 8000b60:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000b64:	4303      	orrs	r3, r0
 8000b66:	430b      	orrs	r3, r1
 8000b68:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000b6a:	6891      	ldr	r1, [r2, #8]
 8000b6c:	68e0      	ldr	r0, [r4, #12]
 8000b6e:	6923      	ldr	r3, [r4, #16]
 8000b70:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000b74:	4303      	orrs	r3, r0
 8000b76:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b7a:	430b      	orrs	r3, r1
 8000b7c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000b7e:	68d1      	ldr	r1, [r2, #12]
 8000b80:	69a0      	ldr	r0, [r4, #24]
 8000b82:	6963      	ldr	r3, [r4, #20]
 8000b84:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b8e:	6813      	ldr	r3, [r2, #0]
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b96:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000b98:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b9a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ba0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ba2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_I2C_Init+0x154>)
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d98d      	bls.n	8000aca <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bae:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000bb0:	4e18      	ldr	r6, [pc, #96]	; (8000c14 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bb2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000bb4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bbc:	4333      	orrs	r3, r6
 8000bbe:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bc0:	6a13      	ldr	r3, [r2, #32]
 8000bc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000bc6:	4371      	muls	r1, r6
 8000bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bcc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000bd0:	fbb1 f1f6 	udiv	r1, r1, r6
 8000bd4:	e7a9      	b.n	8000b2a <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bd6:	68a3      	ldr	r3, [r4, #8]
 8000bd8:	b953      	cbnz	r3, 8000bf0 <HAL_I2C_Init+0x12c>
 8000bda:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000bde:	fbb0 f0f3 	udiv	r0, r0, r3
 8000be2:	1c43      	adds	r3, r0, #1
 8000be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000be8:	b16b      	cbz	r3, 8000c06 <HAL_I2C_Init+0x142>
 8000bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bee:	e7b2      	b.n	8000b56 <HAL_I2C_Init+0x92>
 8000bf0:	2319      	movs	r3, #25
 8000bf2:	436b      	muls	r3, r5
 8000bf4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bf8:	1c43      	adds	r3, r0, #1
 8000bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bfe:	b113      	cbz	r3, 8000c06 <HAL_I2C_Init+0x142>
 8000c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c04:	e7a7      	b.n	8000b56 <HAL_I2C_Init+0x92>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e7a5      	b.n	8000b56 <HAL_I2C_Init+0x92>
 8000c0a:	bf00      	nop
 8000c0c:	000186a0 	.word	0x000186a0
 8000c10:	001e847f 	.word	0x001e847f
 8000c14:	000f4240 	.word	0x000f4240
 8000c18:	003d08ff 	.word	0x003d08ff

08000c1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c1e:	4604      	mov	r4, r0
{
 8000c20:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000c22:	b360      	cbz	r0, 8000c7e <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c24:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000c28:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c2e:	b91b      	cbnz	r3, 8000c38 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c30:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c34:	f002 ff8c 	bl	8003b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c3e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c40:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c42:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000c46:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000c4a:	bf08      	it	eq
 8000c4c:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000c4e:	f001 fb8b 	bl	8002368 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c54:	466e      	mov	r6, sp
 8000c56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c60:	e886 0003 	stmia.w	r6, {r0, r1}
 8000c64:	4625      	mov	r5, r4
 8000c66:	1d27      	adds	r7, r4, #4
 8000c68:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c6c:	f855 0b10 	ldr.w	r0, [r5], #16
 8000c70:	f001 fac0 	bl	80021f4 <USB_CoreInit>
 8000c74:	4606      	mov	r6, r0
 8000c76:	b120      	cbz	r0, 8000c82 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000c7e:	2501      	movs	r5, #1
 8000c80:	e050      	b.n	8000d24 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c82:	4601      	mov	r1, r0
 8000c84:	6820      	ldr	r0, [r4, #0]
 8000c86:	f001 fb75 	bl	8002374 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c90:	261c      	movs	r6, #28
 8000c92:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c96:	4601      	mov	r1, r0
 8000c98:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9a:	4596      	cmp	lr, r2
 8000c9c:	f100 0001 	add.w	r0, r0, #1
 8000ca0:	d81c      	bhi.n	8000cdc <HAL_PCD_Init+0xc0>
 8000ca2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ca4:	261c      	movs	r6, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000caa:	4586      	cmp	lr, r0
 8000cac:	f103 0301 	add.w	r3, r3, #1
 8000cb0:	d822      	bhi.n	8000cf8 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb4:	466e      	mov	r6, sp
 8000cb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cc0:	e886 0003 	stmia.w	r6, {r0, r1}
 8000cc4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000cc8:	6820      	ldr	r0, [r4, #0]
 8000cca:	f001 fb95 	bl	80023f8 <USB_DevInit>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	b300      	cbz	r0, 8000d16 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000cda:	e7d0      	b.n	8000c7e <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000cdc:	fb06 4302 	mla	r3, r6, r2, r4
 8000ce0:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ce8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cec:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cf0:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cf2:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cf4:	6519      	str	r1, [r3, #80]	; 0x50
 8000cf6:	e7cf      	b.n	8000c98 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000cf8:	fb06 4200 	mla	r2, r6, r0, r4
 8000cfc:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000d00:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d04:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d08:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d0c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d10:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000d14:	e7c8      	b.n	8000ca8 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000d16:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d1a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d1e:	6820      	ldr	r0, [r4, #0]
 8000d20:	f001 febc 	bl	8002a9c <USB_DevDisconnect>

  return HAL_OK;
}
 8000d24:	4628      	mov	r0, r5
 8000d26:	b00b      	add	sp, #44	; 0x2c
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d2a <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000d2a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000d2e:	2b01      	cmp	r3, #1
{
 8000d30:	b510      	push	{r4, lr}
 8000d32:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d34:	d016      	beq.n	8000d64 <HAL_PCD_Start+0x3a>
 8000d36:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d38:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8000d3a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000d3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d106      	bne.n	8000d52 <HAL_PCD_Start+0x28>
 8000d44:	69a3      	ldr	r3, [r4, #24]
 8000d46:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d48:	bf1e      	ittt	ne
 8000d4a:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 8000d4c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8000d50:	6383      	strne	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000d52:	f001 fe97 	bl	8002a84 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d56:	6820      	ldr	r0, [r4, #0]
 8000d58:	f001 fb00 	bl	800235c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8000d62:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d64:	2002      	movs	r0, #2
}
 8000d66:	bd10      	pop	{r4, pc}

08000d68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d6c:	6806      	ldr	r6, [r0, #0]
{
 8000d6e:	b087      	sub	sp, #28
 8000d70:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d72:	4630      	mov	r0, r6
 8000d74:	f001 fecd 	bl	8002b12 <USB_GetMode>
 8000d78:	9002      	str	r0, [sp, #8]
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	f040 8122 	bne.w	8000fc4 <HAL_PCD_IRQHandler+0x25c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d80:	6820      	ldr	r0, [r4, #0]
 8000d82:	f001 fe97 	bl	8002ab4 <USB_ReadInterrupts>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	f000 811c 	beq.w	8000fc4 <HAL_PCD_IRQHandler+0x25c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000d8c:	6820      	ldr	r0, [r4, #0]
 8000d8e:	f001 fe91 	bl	8002ab4 <USB_ReadInterrupts>
 8000d92:	0783      	lsls	r3, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000d94:	bf48      	it	mi
 8000d96:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000d98:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000d9a:	bf42      	ittt	mi
 8000d9c:	6953      	ldrmi	r3, [r2, #20]
 8000d9e:	f003 0302 	andmi.w	r3, r3, #2
 8000da2:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000da4:	f001 fe86 	bl	8002ab4 <USB_ReadInterrupts>
 8000da8:	0307      	lsls	r7, r0, #12
 8000daa:	f100 810e 	bmi.w	8000fca <HAL_PCD_IRQHandler+0x262>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	f001 fe80 	bl	8002ab4 <USB_ReadInterrupts>
 8000db4:	0345      	lsls	r5, r0, #13
 8000db6:	d50c      	bpl.n	8000dd2 <HAL_PCD_IRQHandler+0x6a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000db8:	6820      	ldr	r0, [r4, #0]
 8000dba:	f001 fe87 	bl	8002acc <USB_ReadDevAllInEpInterrupt>
 8000dbe:	4625      	mov	r5, r4
 8000dc0:	4683      	mov	fp, r0
 8000dc2:	f506 6a10 	add.w	sl, r6, #2304	; 0x900

      epnum = 0U;
 8000dc6:	f04f 0900 	mov.w	r9, #0

      while (ep_intr != 0U)
 8000dca:	f1bb 0f00 	cmp.w	fp, #0
 8000dce:	f040 81bc 	bne.w	800114a <HAL_PCD_IRQHandler+0x3e2>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000dd2:	6820      	ldr	r0, [r4, #0]
 8000dd4:	f001 fe6e 	bl	8002ab4 <USB_ReadInterrupts>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	da15      	bge.n	8000e08 <HAL_PCD_IRQHandler+0xa0>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000ddc:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8000de8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	f040 8241 	bne.w	8001274 <HAL_PCD_IRQHandler+0x50c>
      {
        hpcd->LPM_State = LPM_L0;
 8000df2:	2100      	movs	r1, #0
 8000df4:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f000 fbb7 	bl	800156c <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000dfe:	6822      	ldr	r2, [r4, #0]
 8000e00:	6953      	ldr	r3, [r2, #20]
 8000e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e06:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000e08:	6820      	ldr	r0, [r4, #0]
 8000e0a:	f001 fe53 	bl	8002ab4 <USB_ReadInterrupts>
 8000e0e:	0500      	lsls	r0, r0, #20
 8000e10:	d50b      	bpl.n	8000e2a <HAL_PCD_IRQHandler+0xc2>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000e12:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8000e16:	07d9      	lsls	r1, r3, #31
 8000e18:	d502      	bpl.n	8000e20 <HAL_PCD_IRQHandler+0xb8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f002 ff08 	bl	8003c30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000e20:	6822      	ldr	r2, [r4, #0]
 8000e22:	6953      	ldr	r3, [r2, #20]
 8000e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e28:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000e2a:	6820      	ldr	r0, [r4, #0]
 8000e2c:	f001 fe42 	bl	8002ab4 <USB_ReadInterrupts>
 8000e30:	04c2      	lsls	r2, r0, #19
 8000e32:	d535      	bpl.n	8000ea0 <HAL_PCD_IRQHandler+0x138>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000e34:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8000e38:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000e3a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000e42:	2110      	movs	r1, #16
 8000e44:	f001 faae 	bl	80023a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e48:	6860      	ldr	r0, [r4, #4]
 8000e4a:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000e4e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e52:	9a02      	ldr	r2, [sp, #8]
 8000e54:	4282      	cmp	r2, r0
 8000e56:	f040 8211 	bne.w	800127c <HAL_PCD_IRQHandler+0x514>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000e5a:	69eb      	ldr	r3, [r5, #28]
 8000e5c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000e60:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000e62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 821b 	beq.w	80012a0 <HAL_PCD_IRQHandler+0x538>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8000e6a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8000e6e:	f043 030b 	orr.w	r3, r3, #11
 8000e72:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8000e76:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000e78:	f043 030b 	orr.w	r3, r3, #11
 8000e7c:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000e7e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000e82:	7c21      	ldrb	r1, [r4, #16]
 8000e84:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000e86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000e8a:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8000e8e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8000e92:	f001 fe5d 	bl	8002b50 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000e96:	6822      	ldr	r2, [r4, #0]
 8000e98:	6953      	ldr	r3, [r2, #20]
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000ea0:	6820      	ldr	r0, [r4, #0]
 8000ea2:	f001 fe07 	bl	8002ab4 <USB_ReadInterrupts>
 8000ea6:	0483      	lsls	r3, r0, #18
 8000ea8:	d516      	bpl.n	8000ed8 <HAL_PCD_IRQHandler+0x170>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8000eaa:	6820      	ldr	r0, [r4, #0]
 8000eac:	f001 fe35 	bl	8002b1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8000eb0:	6820      	ldr	r0, [r4, #0]
 8000eb2:	f001 fb65 	bl	8002580 <USB_GetDevSpeed>
 8000eb6:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8000eb8:	6825      	ldr	r5, [r4, #0]
 8000eba:	f000 fdc9 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8000ebe:	7b22      	ldrb	r2, [r4, #12]
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	f001 f9d6 	bl	8002274 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f002 fe9e 	bl	8003c0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000ece:	6822      	ldr	r2, [r4, #0]
 8000ed0:	6953      	ldr	r3, [r2, #20]
 8000ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed6:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	f001 fdeb 	bl	8002ab4 <USB_ReadInterrupts>
 8000ede:	06c7      	lsls	r7, r0, #27
 8000ee0:	d52a      	bpl.n	8000f38 <HAL_PCD_IRQHandler+0x1d0>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	6993      	ldr	r3, [r2, #24]
 8000ee6:	f023 0310 	bic.w	r3, r3, #16
 8000eea:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8000eec:	6a35      	ldr	r5, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000eee:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8000ef2:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000ef4:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ef8:	f040 81dd 	bne.w	80012b6 <HAL_PCD_IRQHandler+0x54e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000efc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000f00:	421d      	tst	r5, r3
 8000f02:	d014      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x1c6>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f04:	231c      	movs	r3, #28
 8000f06:	fb03 4707 	mla	r7, r3, r7, r4
 8000f0a:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8000f0e:	462a      	mov	r2, r5
 8000f10:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8000f14:	4630      	mov	r0, r6
 8000f16:	f001 fd3f 	bl	8002998 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f1a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000f1e:	442b      	add	r3, r5
 8000f20:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000f28:	441d      	add	r5, r3
 8000f2a:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f2e:	6822      	ldr	r2, [r4, #0]
 8000f30:	6993      	ldr	r3, [r2, #24]
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000f38:	6820      	ldr	r0, [r4, #0]
 8000f3a:	f001 fdbb 	bl	8002ab4 <USB_ReadInterrupts>
 8000f3e:	0706      	lsls	r6, r0, #28
 8000f40:	d507      	bpl.n	8000f52 <HAL_PCD_IRQHandler+0x1ea>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8000f42:	4620      	mov	r0, r4
 8000f44:	f002 fe5d 	bl	8003c02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000f48:	6822      	ldr	r2, [r4, #0]
 8000f4a:	6953      	ldr	r3, [r2, #20]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	f001 fdae 	bl	8002ab4 <USB_ReadInterrupts>
 8000f58:	02c5      	lsls	r5, r0, #11
 8000f5a:	d508      	bpl.n	8000f6e <HAL_PCD_IRQHandler+0x206>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f002 fe86 	bl	8003c70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	6953      	ldr	r3, [r2, #20]
 8000f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f6e:	6820      	ldr	r0, [r4, #0]
 8000f70:	f001 fda0 	bl	8002ab4 <USB_ReadInterrupts>
 8000f74:	0280      	lsls	r0, r0, #10
 8000f76:	d508      	bpl.n	8000f8a <HAL_PCD_IRQHandler+0x222>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f002 fe74 	bl	8003c68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f80:	6822      	ldr	r2, [r4, #0]
 8000f82:	6953      	ldr	r3, [r2, #20]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000f8a:	6820      	ldr	r0, [r4, #0]
 8000f8c:	f001 fd92 	bl	8002ab4 <USB_ReadInterrupts>
 8000f90:	0041      	lsls	r1, r0, #1
 8000f92:	d507      	bpl.n	8000fa4 <HAL_PCD_IRQHandler+0x23c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8000f94:	4620      	mov	r0, r4
 8000f96:	f002 fe6f 	bl	8003c78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	6953      	ldr	r3, [r2, #20]
 8000f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000fa2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000fa4:	6820      	ldr	r0, [r4, #0]
 8000fa6:	f001 fd85 	bl	8002ab4 <USB_ReadInterrupts>
 8000faa:	0742      	lsls	r2, r0, #29
 8000fac:	d50a      	bpl.n	8000fc4 <HAL_PCD_IRQHandler+0x25c>
    {
      temp = hpcd->Instance->GOTGINT;
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000fb2:	076b      	lsls	r3, r5, #29
 8000fb4:	d502      	bpl.n	8000fbc <HAL_PCD_IRQHandler+0x254>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 fe62 	bl	8003c80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4315      	orrs	r5, r2
 8000fc2:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000fc4:	b007      	add	sp, #28
 8000fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000fca:	6820      	ldr	r0, [r4, #0]
 8000fcc:	f8df b308 	ldr.w	fp, [pc, #776]	; 80012d8 <HAL_PCD_IRQHandler+0x570>
 8000fd0:	f001 fd74 	bl	8002abc <USB_ReadDevAllOutEpInterrupt>
 8000fd4:	f506 6530 	add.w	r5, r6, #2816	; 0xb00
 8000fd8:	4682      	mov	sl, r0
 8000fda:	46a0      	mov	r8, r4
      epnum = 0U;
 8000fdc:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 8000fde:	f1ba 0f00 	cmp.w	sl, #0
 8000fe2:	f43f aee4 	beq.w	8000dae <HAL_PCD_IRQHandler+0x46>
        if ((ep_intr & 0x1U) != 0U)
 8000fe6:	f01a 0f01 	tst.w	sl, #1
 8000fea:	f000 80a7 	beq.w	800113c <HAL_PCD_IRQHandler+0x3d4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fee:	b2fa      	uxtb	r2, r7
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	6820      	ldr	r0, [r4, #0]
 8000ff4:	9203      	str	r2, [sp, #12]
 8000ff6:	f001 fd71 	bl	8002adc <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ffa:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000ffe:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001000:	9a03      	ldr	r2, [sp, #12]
 8001002:	d04c      	beq.n	800109e <HAL_PCD_IRQHandler+0x336>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001004:	2301      	movs	r3, #1
 8001006:	60ab      	str	r3, [r5, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001008:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 800100a:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800100c:	f8d3 e040 	ldr.w	lr, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001014:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8001018:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800101a:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 800101c:	d154      	bne.n	80010c8 <HAL_PCD_IRQHandler+0x360>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800101e:	0708      	lsls	r0, r1, #28
 8001020:	d514      	bpl.n	800104c <HAL_PCD_IRQHandler+0x2e4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001022:	45de      	cmp	lr, fp
 8001024:	d904      	bls.n	8001030 <HAL_PCD_IRQHandler+0x2c8>
 8001026:	040a      	lsls	r2, r1, #16
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001028:	bf44      	itt	mi
 800102a:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800102e:	609a      	strmi	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001030:	4620      	mov	r0, r4
 8001032:	9303      	str	r3, [sp, #12]
 8001034:	f002 fdce 	bl	8003bd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001038:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800103c:	2101      	movs	r1, #1
 800103e:	6820      	ldr	r0, [r4, #0]
 8001040:	f001 fd86 	bl	8002b50 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001044:	9b03      	ldr	r3, [sp, #12]
 8001046:	2208      	movs	r2, #8
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	e028      	b.n	800109e <HAL_PCD_IRQHandler+0x336>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800104c:	0688      	lsls	r0, r1, #26
 800104e:	d501      	bpl.n	8001054 <HAL_PCD_IRQHandler+0x2ec>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001050:	2220      	movs	r2, #32
 8001052:	e7f9      	b.n	8001048 <HAL_PCD_IRQHandler+0x2e0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001054:	f011 0f28 	tst.w	r1, #40	; 0x28
 8001058:	d121      	bne.n	800109e <HAL_PCD_IRQHandler+0x336>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800105a:	45de      	cmp	lr, fp
 800105c:	d904      	bls.n	8001068 <HAL_PCD_IRQHandler+0x300>
 800105e:	0409      	lsls	r1, r1, #16
 8001060:	d502      	bpl.n	8001068 <HAL_PCD_IRQHandler+0x300>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001062:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001066:	e7ef      	b.n	8001048 <HAL_PCD_IRQHandler+0x2e0>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001068:	691b      	ldr	r3, [r3, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800106a:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800106e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001072:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001074:	f8c8 3214 	str.w	r3, [r8, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001078:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 800107c:	4419      	add	r1, r3
 800107e:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001082:	4620      	mov	r0, r4
 8001084:	4611      	mov	r1, r2
 8001086:	f002 fdab 	bl	8003be0 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800108a:	b947      	cbnz	r7, 800109e <HAL_PCD_IRQHandler+0x336>
 800108c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8001090:	b92b      	cbnz	r3, 800109e <HAL_PCD_IRQHandler+0x336>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001092:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001096:	2101      	movs	r1, #1
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	f001 fd59 	bl	8002b50 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800109e:	f019 0f08 	tst.w	r9, #8
 80010a2:	d033      	beq.n	800110c <HAL_PCD_IRQHandler+0x3a4>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010a4:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80010a6:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80010a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80010aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010ae:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 80010b2:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80010b4:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80010b6:	d115      	bne.n	80010e4 <HAL_PCD_IRQHandler+0x37c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80010b8:	455a      	cmp	r2, fp
 80010ba:	d916      	bls.n	80010ea <HAL_PCD_IRQHandler+0x382>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80010bc:	0409      	lsls	r1, r1, #16
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80010be:	bf44      	itt	mi
 80010c0:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80010c4:	6099      	strmi	r1, [r3, #8]
 80010c6:	e010      	b.n	80010ea <HAL_PCD_IRQHandler+0x382>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80010c8:	4882      	ldr	r0, [pc, #520]	; (80012d4 <HAL_PCD_IRQHandler+0x56c>)
 80010ca:	4586      	cmp	lr, r0
 80010cc:	d105      	bne.n	80010da <HAL_PCD_IRQHandler+0x372>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80010ce:	0408      	lsls	r0, r1, #16
 80010d0:	d4c7      	bmi.n	8001062 <HAL_PCD_IRQHandler+0x2fa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80010d2:	0688      	lsls	r0, r1, #26
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010d4:	bf44      	itt	mi
 80010d6:	2120      	movmi	r1, #32
 80010d8:	6099      	strmi	r1, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80010da:	4611      	mov	r1, r2
 80010dc:	4620      	mov	r0, r4
 80010de:	f002 fd7f 	bl	8003be0 <HAL_PCD_DataOutStageCallback>
 80010e2:	e7dc      	b.n	800109e <HAL_PCD_IRQHandler+0x336>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80010e4:	487b      	ldr	r0, [pc, #492]	; (80012d4 <HAL_PCD_IRQHandler+0x56c>)
 80010e6:	4282      	cmp	r2, r0
 80010e8:	d0e8      	beq.n	80010bc <HAL_PCD_IRQHandler+0x354>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80010ea:	4620      	mov	r0, r4
 80010ec:	9203      	str	r2, [sp, #12]
 80010ee:	f002 fd71 	bl	8003bd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80010f2:	9a03      	ldr	r2, [sp, #12]
 80010f4:	455a      	cmp	r2, fp
 80010f6:	d907      	bls.n	8001108 <HAL_PCD_IRQHandler+0x3a0>
 80010f8:	6921      	ldr	r1, [r4, #16]
 80010fa:	2901      	cmp	r1, #1
 80010fc:	d104      	bne.n	8001108 <HAL_PCD_IRQHandler+0x3a0>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010fe:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001102:	6820      	ldr	r0, [r4, #0]
 8001104:	f001 fd24 	bl	8002b50 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001108:	2308      	movs	r3, #8
 800110a:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800110c:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001110:	bf1c      	itt	ne
 8001112:	2310      	movne	r3, #16
 8001114:	60ab      	strne	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001116:	f019 0f20 	tst.w	r9, #32
 800111a:	d009      	beq.n	8001130 <HAL_PCD_IRQHandler+0x3c8>
            if (hpcd->Init.dma_enable == 1U)
 800111c:	6921      	ldr	r1, [r4, #16]
 800111e:	2901      	cmp	r1, #1
 8001120:	d104      	bne.n	800112c <HAL_PCD_IRQHandler+0x3c4>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001122:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001126:	6820      	ldr	r0, [r4, #0]
 8001128:	f001 fd12 	bl	8002b50 <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800112c:	2320      	movs	r3, #32
 800112e:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001130:	f419 5f00 	tst.w	r9, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001134:	bf1c      	itt	ne
 8001136:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800113a:	60ab      	strne	r3, [r5, #8]
        epnum++;
 800113c:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 800113e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8001142:	3520      	adds	r5, #32
 8001144:	f108 081c 	add.w	r8, r8, #28
 8001148:	e749      	b.n	8000fde <HAL_PCD_IRQHandler+0x276>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800114a:	f01b 0f01 	tst.w	fp, #1
 800114e:	f000 8089 	beq.w	8001264 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001152:	fa5f f389 	uxtb.w	r3, r9
 8001156:	4619      	mov	r1, r3
 8001158:	6820      	ldr	r0, [r4, #0]
 800115a:	9303      	str	r3, [sp, #12]
 800115c:	f001 fcc7 	bl	8002aee <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001160:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001162:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001164:	d524      	bpl.n	80011b0 <HAL_PCD_IRQHandler+0x448>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001166:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800116a:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800116c:	2001      	movs	r0, #1
 800116e:	f009 020f 	and.w	r2, r9, #15
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001176:	ea23 0302 	bic.w	r3, r3, r2
 800117a:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 800117e:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001180:	f8ca 0008 	str.w	r0, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001184:	4283      	cmp	r3, r0
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001186:	bf01      	itttt	eq
 8001188:	6cab      	ldreq	r3, [r5, #72]	; 0x48
 800118a:	6c6a      	ldreq	r2, [r5, #68]	; 0x44
 800118c:	189b      	addeq	r3, r3, r2
 800118e:	64ab      	streq	r3, [r5, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001190:	4620      	mov	r0, r4
 8001192:	f002 fd2e 	bl	8003bf2 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001196:	6921      	ldr	r1, [r4, #16]
 8001198:	2901      	cmp	r1, #1
 800119a:	d109      	bne.n	80011b0 <HAL_PCD_IRQHandler+0x448>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800119c:	f1b9 0f00 	cmp.w	r9, #0
 80011a0:	d106      	bne.n	80011b0 <HAL_PCD_IRQHandler+0x448>
 80011a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011a4:	b923      	cbnz	r3, 80011b0 <HAL_PCD_IRQHandler+0x448>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80011a6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80011aa:	6820      	ldr	r0, [r4, #0]
 80011ac:	f001 fcd0 	bl	8002b50 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80011b0:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80011b2:	bf44      	itt	mi
 80011b4:	2308      	movmi	r3, #8
 80011b6:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80011ba:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80011bc:	bf44      	itt	mi
 80011be:	2310      	movmi	r3, #16
 80011c0:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80011c4:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80011c6:	bf44      	itt	mi
 80011c8:	2340      	movmi	r3, #64	; 0x40
 80011ca:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80011ce:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80011d0:	bf44      	itt	mi
 80011d2:	2302      	movmi	r3, #2
 80011d4:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80011d8:	063f      	lsls	r7, r7, #24
 80011da:	d543      	bpl.n	8001264 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 80011dc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80011de:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80011e0:	42bb      	cmp	r3, r7
 80011e2:	d83f      	bhi.n	8001264 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 80011e4:	1aff      	subs	r7, r7, r3
  len32b = (len + 3U) / 4U;
 80011e6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e8:	6822      	ldr	r2, [r4, #0]
 80011ea:	9204      	str	r2, [sp, #16]
  len32b = (len + 3U) / 4U;
 80011ec:	429f      	cmp	r7, r3
 80011ee:	bf28      	it	cs
 80011f0:	461f      	movcs	r7, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011f2:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80011f6:	3703      	adds	r7, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011f8:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  len32b = (len + 3U) / 4U;
 80011fc:	08bf      	lsrs	r7, r7, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80011fe:	9305      	str	r3, [sp, #20]
 8001200:	9b05      	ldr	r3, [sp, #20]
 8001202:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	b29b      	uxth	r3, r3
 8001208:	42bb      	cmp	r3, r7
 800120a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800120c:	d328      	bcc.n	8001260 <HAL_PCD_IRQHandler+0x4f8>
 800120e:	4293      	cmp	r3, r2
 8001210:	d926      	bls.n	8001260 <HAL_PCD_IRQHandler+0x4f8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001212:	b963      	cbnz	r3, 800122e <HAL_PCD_IRQHandler+0x4c6>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001214:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001216:	f009 010f 	and.w	r1, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800121a:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800121e:	2001      	movs	r0, #1
 8001220:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001224:	ea22 0201 	bic.w	r2, r2, r1
 8001228:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800122c:	e01a      	b.n	8001264 <HAL_PCD_IRQHandler+0x4fc>
    len = ep->xfer_len - ep->xfer_count;
 800122e:	eba3 0802 	sub.w	r8, r3, r2
 8001232:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001234:	9a03      	ldr	r2, [sp, #12]
 8001236:	9804      	ldr	r0, [sp, #16]
 8001238:	4598      	cmp	r8, r3
 800123a:	bf28      	it	cs
 800123c:	4698      	movcs	r8, r3
 800123e:	7c23      	ldrb	r3, [r4, #16]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001244:	fa1f f388 	uxth.w	r3, r8
 8001248:	f001 faa4 	bl	8002794 <USB_WritePacket>
    ep->xfer_buff  += len;
 800124c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800124e:	4443      	add	r3, r8
 8001250:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001252:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 8001254:	f108 0703 	add.w	r7, r8, #3
    ep->xfer_count += len;
 8001258:	4443      	add	r3, r8
    len32b = (len + 3U) / 4U;
 800125a:	08bf      	lsrs	r7, r7, #2
    ep->xfer_count += len;
 800125c:	656b      	str	r3, [r5, #84]	; 0x54
 800125e:	e7cf      	b.n	8001200 <HAL_PCD_IRQHandler+0x498>
  if (ep->xfer_len <= ep->xfer_count)
 8001260:	4293      	cmp	r3, r2
 8001262:	d9d7      	bls.n	8001214 <HAL_PCD_IRQHandler+0x4ac>
        epnum++;
 8001264:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001268:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800126c:	351c      	adds	r5, #28
 800126e:	f10a 0a20 	add.w	sl, sl, #32
 8001272:	e5aa      	b.n	8000dca <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_ResumeCallback(hpcd);
 8001274:	4620      	mov	r0, r4
 8001276:	f002 fcf3 	bl	8003c60 <HAL_PCD_ResumeCallback>
 800127a:	e5c0      	b.n	8000dfe <HAL_PCD_IRQHandler+0x96>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800127c:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001284:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001286:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800128a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800128e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001292:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001296:	9a02      	ldr	r2, [sp, #8]
 8001298:	3201      	adds	r2, #1
 800129a:	9202      	str	r2, [sp, #8]
 800129c:	3320      	adds	r3, #32
 800129e:	e5d8      	b.n	8000e52 <HAL_PCD_IRQHandler+0xea>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80012a0:	696b      	ldr	r3, [r5, #20]
 80012a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80012aa:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80012ac:	692b      	ldr	r3, [r5, #16]
 80012ae:	f043 030b 	orr.w	r3, r3, #11
 80012b2:	612b      	str	r3, [r5, #16]
 80012b4:	e5e3      	b.n	8000e7e <HAL_PCD_IRQHandler+0x116>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	f47f ae39 	bne.w	8000f2e <HAL_PCD_IRQHandler+0x1c6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012bc:	2208      	movs	r2, #8
 80012be:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80012c2:	4630      	mov	r0, r6
 80012c4:	f001 fb68 	bl	8002998 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c8:	231c      	movs	r3, #28
 80012ca:	fb03 4707 	mla	r7, r3, r7, r4
 80012ce:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80012d2:	e627      	b.n	8000f24 <HAL_PCD_IRQHandler+0x1bc>
 80012d4:	4f54310a 	.word	0x4f54310a
 80012d8:	4f54300a 	.word	0x4f54300a

080012dc <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80012dc:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80012e0:	2a01      	cmp	r2, #1
{
 80012e2:	b510      	push	{r4, lr}
 80012e4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80012e6:	d00b      	beq.n	8001300 <HAL_PCD_SetAddress+0x24>
 80012e8:	2201      	movs	r2, #1
 80012ea:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80012ee:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012f2:	6800      	ldr	r0, [r0, #0]
 80012f4:	f001 fbb6 	bl	8002a64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80012fe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001300:	2002      	movs	r0, #2
}
 8001302:	bd10      	pop	{r4, pc}

08001304 <HAL_PCD_EP_Open>:
{
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	4604      	mov	r4, r0
 8001308:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800130c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001310:	f04f 061c 	mov.w	r6, #28
 8001314:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001316:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 800131a:	bf15      	itete	ne
 800131c:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8001320:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001324:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001326:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 800132a:	bf15      	itete	ne
 800132c:	2601      	movne	r6, #1
    ep->is_in = 0U;
 800132e:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8001330:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8001334:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8001338:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800133a:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 800133c:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 800133e:	b2c0      	uxtb	r0, r0
 8001340:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8001342:	b102      	cbz	r2, 8001346 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8001344:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001346:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001348:	bf04      	itt	eq
 800134a:	2300      	moveq	r3, #0
 800134c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800134e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001352:	2b01      	cmp	r3, #1
 8001354:	d009      	beq.n	800136a <HAL_PCD_EP_Open+0x66>
 8001356:	2301      	movs	r3, #1
 8001358:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	f001 f91a 	bl	8002596 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001362:	2000      	movs	r0, #0
 8001364:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8001368:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800136a:	2002      	movs	r0, #2
}
 800136c:	bd70      	pop	{r4, r5, r6, pc}

0800136e <HAL_PCD_EP_Close>:
{
 800136e:	f001 030f 	and.w	r3, r1, #15
 8001372:	b2da      	uxtb	r2, r3
 8001374:	b510      	push	{r4, lr}
 8001376:	4604      	mov	r4, r0
 8001378:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800137a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800137e:	fb00 4102 	mla	r1, r0, r2, r4
 8001382:	bf19      	ittee	ne
 8001384:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001386:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 800138a:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800138e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8001392:	bf15      	itete	ne
 8001394:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001396:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001398:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 800139c:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013a0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80013a2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d009      	beq.n	80013be <HAL_PCD_EP_Close+0x50>
 80013aa:	2301      	movs	r3, #1
 80013ac:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	f001 f933 	bl	800261c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80013bc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80013be:	2002      	movs	r0, #2
}
 80013c0:	bd10      	pop	{r4, pc}

080013c2 <HAL_PCD_EP_Receive>:
{
 80013c2:	b538      	push	{r3, r4, r5, lr}
 80013c4:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013c8:	241c      	movs	r4, #28
 80013ca:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80013ce:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80013d6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80013da:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80013dc:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 80013e0:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80013e4:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e8:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80013ec:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80013ee:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80013f0:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80013f2:	bf08      	it	eq
 80013f4:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80013f8:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013fa:	b91d      	cbnz	r5, 8001404 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80013fc:	f001 f940 	bl	8002680 <USB_EP0StartXfer>
}
 8001400:	2000      	movs	r0, #0
 8001402:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001404:	f001 f9da 	bl	80027bc <USB_EPStartXfer>
 8001408:	e7fa      	b.n	8001400 <HAL_PCD_EP_Receive+0x3e>

0800140a <HAL_PCD_EP_Transmit>:
{
 800140a:	b538      	push	{r3, r4, r5, lr}
 800140c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001410:	241c      	movs	r4, #28
 8001412:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8001416:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800141a:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800141c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001422:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8001424:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8001426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800142a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 800142e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001430:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001432:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001434:	bf08      	it	eq
 8001436:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8001438:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800143a:	b91d      	cbnz	r5, 8001444 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800143c:	f001 f920 	bl	8002680 <USB_EP0StartXfer>
}
 8001440:	2000      	movs	r0, #0
 8001442:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001444:	f001 f9ba 	bl	80027bc <USB_EPStartXfer>
 8001448:	e7fa      	b.n	8001440 <HAL_PCD_EP_Transmit+0x36>

0800144a <HAL_PCD_EP_SetStall>:
{
 800144a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800144c:	6843      	ldr	r3, [r0, #4]
 800144e:	f001 050f 	and.w	r5, r1, #15
 8001452:	429d      	cmp	r5, r3
{
 8001454:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001456:	d82e      	bhi.n	80014b6 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001458:	f011 0f80 	tst.w	r1, #128	; 0x80
 800145c:	f04f 021c 	mov.w	r2, #28
 8001460:	d01f      	beq.n	80014a2 <HAL_PCD_EP_SetStall+0x58>
    ep->is_in = 1U;
 8001462:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001466:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 800146a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800146c:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800146e:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8001472:	2201      	movs	r2, #1
 8001474:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001476:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001478:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 800147c:	4291      	cmp	r1, r2
 800147e:	d01c      	beq.n	80014ba <HAL_PCD_EP_SetStall+0x70>
 8001480:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001484:	4619      	mov	r1, r3
 8001486:	6820      	ldr	r0, [r4, #0]
 8001488:	f001 fa94 	bl	80029b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800148c:	b92d      	cbnz	r5, 800149a <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800148e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001492:	7c21      	ldrb	r1, [r4, #16]
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	f001 fb5b 	bl	8002b50 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800149a:	2000      	movs	r0, #0
 800149c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80014a2:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 80014a6:	fb02 0101 	mla	r1, r2, r1, r0
 80014aa:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80014ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80014b0:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 80014b4:	e7dd      	b.n	8001472 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
 80014b8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80014ba:	2002      	movs	r0, #2
}
 80014bc:	bd38      	pop	{r3, r4, r5, pc}

080014be <HAL_PCD_EP_ClrStall>:
{
 80014be:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014c0:	6843      	ldr	r3, [r0, #4]
 80014c2:	f001 020f 	and.w	r2, r1, #15
 80014c6:	429a      	cmp	r2, r3
{
 80014c8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014ca:	d826      	bhi.n	800151a <HAL_PCD_EP_ClrStall+0x5c>
 80014cc:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 80014ce:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d2:	fb03 0102 	mla	r1, r3, r2, r0
 80014d6:	bf19      	ittee	ne
 80014d8:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 80014da:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014de:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80014e2:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 80014e6:	bf14      	ite	ne
 80014e8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80014ea:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 80014ec:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80014f0:	bf14      	ite	ne
 80014f2:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 80014f6:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 80014fa:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014fc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80014fe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001502:	2b01      	cmp	r3, #1
 8001504:	d00b      	beq.n	800151e <HAL_PCD_EP_ClrStall+0x60>
 8001506:	2301      	movs	r3, #1
 8001508:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	f001 fa7e 	bl	8002a0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001512:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001516:	4628      	mov	r0, r5
 8001518:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800151a:	2001      	movs	r0, #1
 800151c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800151e:	2002      	movs	r0, #2
}
 8001520:	bd38      	pop	{r3, r4, r5, pc}

08001522 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001522:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001524:	6804      	ldr	r4, [r0, #0]
 8001526:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001528:	b921      	cbnz	r1, 8001534 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800152a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800152e:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001530:	2000      	movs	r0, #0
 8001532:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001534:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001536:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001538:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800153c:	2000      	movs	r0, #0
 800153e:	1c46      	adds	r6, r0, #1
 8001540:	b2c0      	uxtb	r0, r0
 8001542:	4285      	cmp	r5, r0
 8001544:	d806      	bhi.n	8001554 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001546:	313f      	adds	r1, #63	; 0x3f
 8001548:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800154c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001550:	6063      	str	r3, [r4, #4]
 8001552:	e7ed      	b.n	8001530 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001554:	3040      	adds	r0, #64	; 0x40
 8001556:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800155a:	6840      	ldr	r0, [r0, #4]
 800155c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8001560:	4630      	mov	r0, r6
 8001562:	e7ec      	b.n	800153e <HAL_PCDEx_SetTxFiFo+0x1c>

08001564 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001564:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001566:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001568:	6259      	str	r1, [r3, #36]	; 0x24
}
 800156a:	4770      	bx	lr

0800156c <HAL_PCDEx_LPM_Callback>:
 800156c:	4770      	bx	lr
	...

08001570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001574:	4604      	mov	r4, r0
 8001576:	b908      	cbnz	r0, 800157c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001578:	2001      	movs	r0, #1
 800157a:	e03f      	b.n	80015fc <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157c:	6803      	ldr	r3, [r0, #0]
 800157e:	07dd      	lsls	r5, r3, #31
 8001580:	d410      	bmi.n	80015a4 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	0798      	lsls	r0, r3, #30
 8001586:	d45a      	bmi.n	800163e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	071a      	lsls	r2, r3, #28
 800158c:	f100 809c 	bmi.w	80016c8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	075b      	lsls	r3, r3, #29
 8001594:	f100 80ba 	bmi.w	800170c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001598:	69a0      	ldr	r0, [r4, #24]
 800159a:	2800      	cmp	r0, #0
 800159c:	f040 811b 	bne.w	80017d6 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80015a0:	2000      	movs	r0, #0
 80015a2:	e02b      	b.n	80015fc <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a4:	4ba4      	ldr	r3, [pc, #656]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	f002 020c 	and.w	r2, r2, #12
 80015ac:	2a04      	cmp	r2, #4
 80015ae:	d007      	beq.n	80015c0 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	2a08      	cmp	r2, #8
 80015b8:	d10a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	0259      	lsls	r1, r3, #9
 80015be:	d507      	bpl.n	80015d0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	4b9d      	ldr	r3, [pc, #628]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	039a      	lsls	r2, r3, #14
 80015c6:	d5dc      	bpl.n	8001582 <HAL_RCC_OscConfig+0x12>
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1d9      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
 80015ce:	e7d3      	b.n	8001578 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	6863      	ldr	r3, [r4, #4]
 80015d2:	4d99      	ldr	r5, [pc, #612]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d113      	bne.n	8001602 <HAL_RCC_OscConfig+0x92>
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015e2:	f7fe ffc9 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4d94      	ldr	r5, [pc, #592]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80015e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	039b      	lsls	r3, r3, #14
 80015ee:	d4c8      	bmi.n	8001582 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7fe ffc2 	bl	8000578 <HAL_GetTick>
 80015f4:	1b80      	subs	r0, r0, r6
 80015f6:	2864      	cmp	r0, #100	; 0x64
 80015f8:	d9f7      	bls.n	80015ea <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80015fa:	2003      	movs	r0, #3
}
 80015fc:	b002      	add	sp, #8
 80015fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001606:	d104      	bne.n	8001612 <HAL_RCC_OscConfig+0xa2>
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160e:	602b      	str	r3, [r5, #0]
 8001610:	e7e3      	b.n	80015da <HAL_RCC_OscConfig+0x6a>
 8001612:	682a      	ldr	r2, [r5, #0]
 8001614:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001618:	602a      	str	r2, [r5, #0]
 800161a:	682a      	ldr	r2, [r5, #0]
 800161c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001620:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1dd      	bne.n	80015e2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001626:	f7fe ffa7 	bl	8000578 <HAL_GetTick>
 800162a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	039f      	lsls	r7, r3, #14
 8001630:	d5a7      	bpl.n	8001582 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001632:	f7fe ffa1 	bl	8000578 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	2864      	cmp	r0, #100	; 0x64
 800163a:	d9f7      	bls.n	800162c <HAL_RCC_OscConfig+0xbc>
 800163c:	e7dd      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163e:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	f012 0f0c 	tst.w	r2, #12
 8001646:	d007      	beq.n	8001658 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	2a08      	cmp	r2, #8
 8001650:	d111      	bne.n	8001676 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	025e      	lsls	r6, r3, #9
 8001656:	d40e      	bmi.n	8001676 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001658:	4b77      	ldr	r3, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	0795      	lsls	r5, r2, #30
 800165e:	d502      	bpl.n	8001666 <HAL_RCC_OscConfig+0xf6>
 8001660:	68e2      	ldr	r2, [r4, #12]
 8001662:	2a01      	cmp	r2, #1
 8001664:	d188      	bne.n	8001578 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	6921      	ldr	r1, [r4, #16]
 800166a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800166e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001672:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001674:	e788      	b.n	8001588 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001676:	68e2      	ldr	r2, [r4, #12]
 8001678:	4b70      	ldr	r3, [pc, #448]	; (800183c <HAL_RCC_OscConfig+0x2cc>)
 800167a:	b1b2      	cbz	r2, 80016aa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001680:	f7fe ff7a 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	4d6c      	ldr	r5, [pc, #432]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001686:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	0798      	lsls	r0, r3, #30
 800168c:	d507      	bpl.n	800169e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	6922      	ldr	r2, [r4, #16]
 8001692:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001696:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800169a:	602b      	str	r3, [r5, #0]
 800169c:	e774      	b.n	8001588 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7fe ff6b 	bl	8000578 <HAL_GetTick>
 80016a2:	1b80      	subs	r0, r0, r6
 80016a4:	2802      	cmp	r0, #2
 80016a6:	d9ef      	bls.n	8001688 <HAL_RCC_OscConfig+0x118>
 80016a8:	e7a7      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80016aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ac:	f7fe ff64 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b0:	4d61      	ldr	r5, [pc, #388]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80016b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	0799      	lsls	r1, r3, #30
 80016b8:	f57f af66 	bpl.w	8001588 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016bc:	f7fe ff5c 	bl	8000578 <HAL_GetTick>
 80016c0:	1b80      	subs	r0, r0, r6
 80016c2:	2802      	cmp	r0, #2
 80016c4:	d9f6      	bls.n	80016b4 <HAL_RCC_OscConfig+0x144>
 80016c6:	e798      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c8:	6962      	ldr	r2, [r4, #20]
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <HAL_RCC_OscConfig+0x2d0>)
 80016cc:	b17a      	cbz	r2, 80016ee <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016d2:	f7fe ff51 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4d58      	ldr	r5, [pc, #352]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80016d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016dc:	079f      	lsls	r7, r3, #30
 80016de:	f53f af57 	bmi.w	8001590 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7fe ff49 	bl	8000578 <HAL_GetTick>
 80016e6:	1b80      	subs	r0, r0, r6
 80016e8:	2802      	cmp	r0, #2
 80016ea:	d9f6      	bls.n	80016da <HAL_RCC_OscConfig+0x16a>
 80016ec:	e785      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80016ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016f0:	f7fe ff42 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4d50      	ldr	r5, [pc, #320]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80016f6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016fa:	0798      	lsls	r0, r3, #30
 80016fc:	f57f af48 	bpl.w	8001590 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001700:	f7fe ff3a 	bl	8000578 <HAL_GetTick>
 8001704:	1b80      	subs	r0, r0, r6
 8001706:	2802      	cmp	r0, #2
 8001708:	d9f6      	bls.n	80016f8 <HAL_RCC_OscConfig+0x188>
 800170a:	e776      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170c:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 800170e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001710:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001714:	d128      	bne.n	8001768 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	9201      	str	r2, [sp, #4]
 8001718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800172a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4d45      	ldr	r5, [pc, #276]	; (8001844 <HAL_RCC_OscConfig+0x2d4>)
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	05d9      	lsls	r1, r3, #23
 8001732:	d51b      	bpl.n	800176c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	68a3      	ldr	r3, [r4, #8]
 8001736:	4d40      	ldr	r5, [pc, #256]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 8001738:	2b01      	cmp	r3, #1
 800173a:	d127      	bne.n	800178c <HAL_RCC_OscConfig+0x21c>
 800173c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001744:	f7fe ff18 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	4d3b      	ldr	r5, [pc, #236]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800174a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001752:	079b      	lsls	r3, r3, #30
 8001754:	d539      	bpl.n	80017ca <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001756:	2e00      	cmp	r6, #0
 8001758:	f43f af1e 	beq.w	8001598 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	4a36      	ldr	r2, [pc, #216]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 800175e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	e717      	b.n	8001598 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001768:	2600      	movs	r6, #0
 800176a:	e7df      	b.n	800172c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001774:	f7fe ff00 	bl	8000578 <HAL_GetTick>
 8001778:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	05da      	lsls	r2, r3, #23
 800177e:	d4d9      	bmi.n	8001734 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7fe fefa 	bl	8000578 <HAL_GetTick>
 8001784:	1bc0      	subs	r0, r0, r7
 8001786:	2802      	cmp	r0, #2
 8001788:	d9f7      	bls.n	800177a <HAL_RCC_OscConfig+0x20a>
 800178a:	e736      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	2b05      	cmp	r3, #5
 800178e:	d104      	bne.n	800179a <HAL_RCC_OscConfig+0x22a>
 8001790:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	672b      	str	r3, [r5, #112]	; 0x70
 8001798:	e7d0      	b.n	800173c <HAL_RCC_OscConfig+0x1cc>
 800179a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	672a      	str	r2, [r5, #112]	; 0x70
 80017a2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017a4:	f022 0204 	bic.w	r2, r2, #4
 80017a8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ca      	bne.n	8001744 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80017ae:	f7fe fee3 	bl	8000578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017b6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017ba:	0798      	lsls	r0, r3, #30
 80017bc:	d5cb      	bpl.n	8001756 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7fe fedb 	bl	8000578 <HAL_GetTick>
 80017c2:	1bc0      	subs	r0, r0, r7
 80017c4:	4540      	cmp	r0, r8
 80017c6:	d9f7      	bls.n	80017b8 <HAL_RCC_OscConfig+0x248>
 80017c8:	e717      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7fe fed5 	bl	8000578 <HAL_GetTick>
 80017ce:	1bc0      	subs	r0, r0, r7
 80017d0:	4540      	cmp	r0, r8
 80017d2:	d9bd      	bls.n	8001750 <HAL_RCC_OscConfig+0x1e0>
 80017d4:	e711      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d6:	4d18      	ldr	r5, [pc, #96]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
 80017d8:	68ab      	ldr	r3, [r5, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d047      	beq.n	8001872 <HAL_RCC_OscConfig+0x302>
 80017e2:	4e19      	ldr	r6, [pc, #100]	; (8001848 <HAL_RCC_OscConfig+0x2d8>)
 80017e4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80017e8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ea:	d135      	bne.n	8001858 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80017ec:	f7fe fec4 	bl	8000578 <HAL_GetTick>
 80017f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	0199      	lsls	r1, r3, #6
 80017f6:	d429      	bmi.n	800184c <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f8:	6a22      	ldr	r2, [r4, #32]
 80017fa:	69e3      	ldr	r3, [r4, #28]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001800:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001804:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001806:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800180a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180e:	0852      	lsrs	r2, r2, #1
 8001810:	3a01      	subs	r2, #1
 8001812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001816:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001818:	2301      	movs	r3, #1
 800181a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800181c:	f7fe feac 	bl	8000578 <HAL_GetTick>
 8001820:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	019a      	lsls	r2, r3, #6
 8001826:	f53f aebb 	bmi.w	80015a0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7fe fea5 	bl	8000578 <HAL_GetTick>
 800182e:	1b40      	subs	r0, r0, r5
 8001830:	2802      	cmp	r0, #2
 8001832:	d9f6      	bls.n	8001822 <HAL_RCC_OscConfig+0x2b2>
 8001834:	e6e1      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	42470000 	.word	0x42470000
 8001840:	42470e80 	.word	0x42470e80
 8001844:	40007000 	.word	0x40007000
 8001848:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe fe94 	bl	8000578 <HAL_GetTick>
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	2802      	cmp	r0, #2
 8001854:	d9cd      	bls.n	80017f2 <HAL_RCC_OscConfig+0x282>
 8001856:	e6d0      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001858:	f7fe fe8e 	bl	8000578 <HAL_GetTick>
 800185c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	682b      	ldr	r3, [r5, #0]
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	f57f ae9d 	bpl.w	80015a0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001866:	f7fe fe87 	bl	8000578 <HAL_GetTick>
 800186a:	1b00      	subs	r0, r0, r4
 800186c:	2802      	cmp	r0, #2
 800186e:	d9f6      	bls.n	800185e <HAL_RCC_OscConfig+0x2ee>
 8001870:	e6c3      	b.n	80015fa <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001872:	2801      	cmp	r0, #1
 8001874:	f43f aec2 	beq.w	80015fc <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8001878:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	69e3      	ldr	r3, [r4, #28]
 800187c:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001880:	429a      	cmp	r2, r3
 8001882:	f47f ae79 	bne.w	8001578 <HAL_RCC_OscConfig+0x8>
 8001886:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001888:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188c:	4293      	cmp	r3, r2
 800188e:	f47f ae73 	bne.w	8001578 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001892:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001898:	4003      	ands	r3, r0
 800189a:	4293      	cmp	r3, r2
 800189c:	f47f ae6c 	bne.w	8001578 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018a2:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a6:	4293      	cmp	r3, r2
 80018a8:	f47f ae66 	bne.w	8001578 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018ae:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80018b2:	1ac0      	subs	r0, r0, r3
 80018b4:	bf18      	it	ne
 80018b6:	2001      	movne	r0, #1
 80018b8:	e6a0      	b.n	80015fc <HAL_RCC_OscConfig+0x8c>
 80018ba:	bf00      	nop

080018bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018bc:	4913      	ldr	r1, [pc, #76]	; (800190c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80018be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c0:	688b      	ldr	r3, [r1, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x16>
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ce:	4810      	ldr	r0, [pc, #64]	; (8001910 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018d0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80018d2:	4810      	ldr	r0, [pc, #64]	; (8001914 <HAL_RCC_GetSysClockFreq+0x58>)
 80018d4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018dc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	bf14      	ite	ne
 80018e2:	480c      	ldrne	r0, [pc, #48]	; (8001914 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e4:	480a      	ldreq	r0, [pc, #40]	; (8001910 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018ea:	bf18      	it	ne
 80018ec:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	fba1 0100 	umull	r0, r1, r1, r0
 80018f6:	f7fe fc6d 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_RCC_GetSysClockFreq+0x50>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001902:	3301      	adds	r3, #1
 8001904:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001906:	fbb0 f0f3 	udiv	r0, r0, r3
 800190a:	bd08      	pop	{r3, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	017d7840 	.word	0x017d7840

08001918 <HAL_RCC_ClockConfig>:
{
 8001918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800191c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800191e:	4604      	mov	r4, r0
 8001920:	b910      	cbnz	r0, 8001928 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001922:	2001      	movs	r0, #1
 8001924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <HAL_RCC_ClockConfig+0x124>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	f002 020f 	and.w	r2, r2, #15
 8001930:	428a      	cmp	r2, r1
 8001932:	d329      	bcc.n	8001988 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	6821      	ldr	r1, [r4, #0]
 8001936:	078f      	lsls	r7, r1, #30
 8001938:	d42e      	bmi.n	8001998 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	07c8      	lsls	r0, r1, #31
 800193c:	d441      	bmi.n	80019c2 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_RCC_ClockConfig+0x124>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f002 020f 	and.w	r2, r2, #15
 8001946:	4295      	cmp	r5, r2
 8001948:	d367      	bcc.n	8001a1a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	0751      	lsls	r1, r2, #29
 800194e:	d46d      	bmi.n	8001a2c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	0713      	lsls	r3, r2, #28
 8001952:	d507      	bpl.n	8001964 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001954:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <HAL_RCC_ClockConfig+0x128>)
 8001956:	6921      	ldr	r1, [r4, #16]
 8001958:	6893      	ldr	r3, [r2, #8]
 800195a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800195e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001962:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001964:	f7ff ffaa 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_RCC_ClockConfig+0x128>)
 800196a:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <HAL_RCC_ClockConfig+0x12c>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	40d8      	lsrs	r0, r3
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x130>)
 8001978:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_RCC_ClockConfig+0x134>)
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f7fe fdb1 	bl	80004e4 <HAL_InitTick>
  return HAL_OK;
 8001982:	2000      	movs	r0, #0
 8001984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001988:	b2ca      	uxtb	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	4299      	cmp	r1, r3
 8001994:	d1c5      	bne.n	8001922 <HAL_RCC_ClockConfig+0xa>
 8001996:	e7cd      	b.n	8001934 <HAL_RCC_ClockConfig+0x1c>
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800199e:	bf1e      	ittt	ne
 80019a0:	689a      	ldrne	r2, [r3, #8]
 80019a2:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80019a6:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019aa:	bf42      	ittt	mi
 80019ac:	689a      	ldrmi	r2, [r3, #8]
 80019ae:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80019b2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68a0      	ldr	r0, [r4, #8]
 80019b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019bc:	4302      	orrs	r2, r0
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e7bb      	b.n	800193a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	6862      	ldr	r2, [r4, #4]
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_RCC_ClockConfig+0x128>)
 80019c6:	2a01      	cmp	r2, #1
 80019c8:	d11d      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	d0a7      	beq.n	8001922 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4e1b      	ldr	r6, [pc, #108]	; (8001a40 <HAL_RCC_ClockConfig+0x128>)
 80019d4:	68b3      	ldr	r3, [r6, #8]
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	4313      	orrs	r3, r2
 80019dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019de:	f7fe fdcb 	bl	8000578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019e6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e8:	68b3      	ldr	r3, [r6, #8]
 80019ea:	6862      	ldr	r2, [r4, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019f4:	d0a3      	beq.n	800193e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f6:	f7fe fdbf 	bl	8000578 <HAL_GetTick>
 80019fa:	1bc0      	subs	r0, r0, r7
 80019fc:	4540      	cmp	r0, r8
 80019fe:	d9f3      	bls.n	80019e8 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001a00:	2003      	movs	r0, #3
}
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	1e91      	subs	r1, r2, #2
 8001a08:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0c:	d802      	bhi.n	8001a14 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a12:	e7dd      	b.n	80019d0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	f013 0f02 	tst.w	r3, #2
 8001a18:	e7da      	b.n	80019d0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	b2ea      	uxtb	r2, r5
 8001a1c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	429d      	cmp	r5, r3
 8001a26:	f47f af7c 	bne.w	8001922 <HAL_RCC_ClockConfig+0xa>
 8001a2a:	e78e      	b.n	800194a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <HAL_RCC_ClockConfig+0x128>)
 8001a2e:	68e0      	ldr	r0, [r4, #12]
 8001a30:	688b      	ldr	r3, [r1, #8]
 8001a32:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a36:	4303      	orrs	r3, r0
 8001a38:	608b      	str	r3, [r1, #8]
 8001a3a:	e789      	b.n	8001950 <HAL_RCC_ClockConfig+0x38>
 8001a3c:	40023c00 	.word	0x40023c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	0800416e 	.word	0x0800416e
 8001a48:	20000114 	.word	0x20000114
 8001a4c:	20000004 	.word	0x20000004

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000114 	.word	0x20000114

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a6a:	6810      	ldr	r0, [r2, #0]
}
 8001a6c:	40d8      	lsrs	r0, r3
 8001a6e:	4770      	bx	lr
 8001a70:	40023800 	.word	0x40023800
 8001a74:	0800417e 	.word	0x0800417e
 8001a78:	20000114 	.word	0x20000114

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	4a03      	ldr	r2, [pc, #12]	; (8001a98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a8a:	6810      	ldr	r0, [r2, #0]
}
 8001a8c:	40d8      	lsrs	r0, r3
 8001a8e:	4770      	bx	lr
 8001a90:	40023800 	.word	0x40023800
 8001a94:	0800417e 	.word	0x0800417e
 8001a98:	20000114 	.word	0x20000114

08001a9c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	f013 0f05 	tst.w	r3, #5
{
 8001aa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001aa4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001aa6:	d13c      	bne.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	079a      	lsls	r2, r3, #30
 8001aac:	d530      	bpl.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x128>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ab4:	4d44      	ldr	r5, [pc, #272]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7fe fd52 	bl	8000578 <HAL_GetTick>
 8001ad4:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ad6:	682b      	ldr	r3, [r5, #0]
 8001ad8:	05d9      	lsls	r1, r3, #23
 8001ada:	d54a      	bpl.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001adc:	4d39      	ldr	r5, [pc, #228]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001ade:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ae0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ae4:	d14b      	bne.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ae6:	68e3      	ldr	r3, [r4, #12]
 8001ae8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001aec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001af0:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001af2:	d163      	bne.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x120>
 8001af4:	6891      	ldr	r1, [r2, #8]
 8001af6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001afa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001afe:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001b02:	4301      	orrs	r1, r0
 8001b04:	6091      	str	r1, [r2, #8]
 8001b06:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b10:	6820      	ldr	r0, [r4, #0]
 8001b12:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b16:	bf1f      	itttt	ne
 8001b18:	4b2c      	ldrne	r3, [pc, #176]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b1a:	7c22      	ldrbne	r2, [r4, #16]
 8001b1c:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001b1e:	2000      	movne	r0, #0
 8001b20:	e025      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_PLLI2S_DISABLE();
 8001b22:	4d2b      	ldr	r5, [pc, #172]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b24:	4e27      	ldr	r6, [pc, #156]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001b2a:	f7fe fd25 	bl	8000578 <HAL_GetTick>
 8001b2e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b30:	6833      	ldr	r3, [r6, #0]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	d415      	bmi.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001b36:	68a3      	ldr	r3, [r4, #8]
 8001b38:	6862      	ldr	r2, [r4, #4]
 8001b3a:	071b      	lsls	r3, r3, #28
 8001b3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b40:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b44:	2301      	movs	r3, #1
 8001b46:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001b48:	f7fe fd16 	bl	8000578 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b4c:	4d1d      	ldr	r5, [pc, #116]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    tickstart = HAL_GetTick();
 8001b4e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	0118      	lsls	r0, r3, #4
 8001b54:	d4a8      	bmi.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b56:	f7fe fd0f 	bl	8000578 <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	2802      	cmp	r0, #2
 8001b5e:	d9f7      	bls.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001b60:	e004      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b62:	f7fe fd09 	bl	8000578 <HAL_GetTick>
 8001b66:	1bc0      	subs	r0, r0, r7
 8001b68:	2802      	cmp	r0, #2
 8001b6a:	d9e1      	bls.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 8001b6c:	2003      	movs	r0, #3
}
 8001b6e:	b003      	add	sp, #12
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7fe fd01 	bl	8000578 <HAL_GetTick>
 8001b76:	1b80      	subs	r0, r0, r6
 8001b78:	2802      	cmp	r0, #2
 8001b7a:	d9ac      	bls.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001b7c:	e7f6      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b7e:	68e2      	ldr	r2, [r4, #12]
 8001b80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d0ae      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b94:	2100      	movs	r1, #0
 8001b96:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001b98:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b9c:	07da      	lsls	r2, r3, #31
 8001b9e:	d5a2      	bpl.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8001ba0:	f7fe fcea 	bl	8000578 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba4:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ba8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bac:	079b      	lsls	r3, r3, #30
 8001bae:	d49a      	bmi.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7fe fce2 	bl	8000578 <HAL_GetTick>
 8001bb4:	1b80      	subs	r0, r0, r6
 8001bb6:	42b8      	cmp	r0, r7
 8001bb8:	d9f7      	bls.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001bba:	e7d7      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bbc:	6891      	ldr	r1, [r2, #8]
 8001bbe:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001bc2:	e79f      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	424711e0 	.word	0x424711e0
 8001bd0:	42470068 	.word	0x42470068
 8001bd4:	42470e40 	.word	0x42470e40

08001bd8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001bd8:	6802      	ldr	r2, [r0, #0]
{
 8001bda:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001bdc:	68d3      	ldr	r3, [r2, #12]
 8001bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001be2:	60d3      	str	r3, [r2, #12]
{
 8001be4:	4604      	mov	r4, r0

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be6:	f7fe fcc7 	bl	8000578 <HAL_GetTick>
 8001bea:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	069b      	lsls	r3, r3, #26
 8001bf2:	d501      	bpl.n	8001bf8 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001bf8:	f7fe fcbe 	bl	8000578 <HAL_GetTick>
 8001bfc:	1b40      	subs	r0, r0, r5
 8001bfe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c02:	d9f3      	bls.n	8001bec <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001c04:	2003      	movs	r0, #3
}
 8001c06:	bd38      	pop	{r3, r4, r5, pc}

08001c08 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001c08:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001c0a:	6803      	ldr	r3, [r0, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	0652      	lsls	r2, r2, #25
{
 8001c10:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001c12:	d501      	bpl.n	8001c18 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001c14:	2000      	movs	r0, #0
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001c1e:	f7fe fcab 	bl	8000578 <HAL_GetTick>
 8001c22:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	065b      	lsls	r3, r3, #25
 8001c2a:	d4f3      	bmi.n	8001c14 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c2c:	f7fe fca4 	bl	8000578 <HAL_GetTick>
 8001c30:	1b40      	subs	r0, r0, r5
 8001c32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c36:	d9f5      	bls.n	8001c24 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001c38:	2003      	movs	r0, #3
}
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}

08001c3c <HAL_RTC_Init>:
{
 8001c3c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001c3e:	4604      	mov	r4, r0
 8001c40:	b1b8      	cbz	r0, 8001c72 <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001c42:	7f43      	ldrb	r3, [r0, #29]
 8001c44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c48:	b913      	cbnz	r3, 8001c50 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001c4a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001c4c:	f001 fe80 	bl	8003950 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c50:	2302      	movs	r3, #2
 8001c52:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	22ca      	movs	r2, #202	; 0xca
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
 8001c5a:	2253      	movs	r2, #83	; 0x53
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff ffd2 	bl	8001c08 <RTC_EnterInitMode>
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	4605      	mov	r5, r0
 8001c68:	b128      	cbz	r0, 8001c76 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c6a:	22ff      	movs	r2, #255	; 0xff
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001c72:	2501      	movs	r5, #1
 8001c74:	e02e      	b.n	8001cd4 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001c76:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001c78:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001c7a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c82:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001c84:	6862      	ldr	r2, [r4, #4]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	4302      	orrs	r2, r0
 8001c8a:	6960      	ldr	r0, [r4, #20]
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001c92:	68e2      	ldr	r2, [r4, #12]
 8001c94:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	68a1      	ldr	r1, [r4, #8]
 8001c9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001c9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	d405      	bmi.n	8001cba <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff ff92 	bl	8001bd8 <HAL_RTC_WaitForSynchro>
 8001cb4:	b108      	cbz	r0, 8001cba <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	e7d7      	b.n	8001c6a <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001cba:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001cbc:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	7763      	strb	r3, [r4, #29]
}
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	bd38      	pop	{r3, r4, r5, pc}

08001cd8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cde:	6803      	ldr	r3, [r0, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	bf1e      	ittt	ne
 8001cea:	681a      	ldrne	r2, [r3, #0]
 8001cec:	f042 0201 	orrne.w	r2, r2, #1
 8001cf0:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	4770      	bx	lr

08001cfc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001cfe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d00:	4290      	cmp	r0, r2
 8001d02:	d00e      	beq.n	8001d22 <TIM_Base_SetConfig+0x26>
 8001d04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d08:	d00b      	beq.n	8001d22 <TIM_Base_SetConfig+0x26>
 8001d0a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d0e:	4290      	cmp	r0, r2
 8001d10:	d007      	beq.n	8001d22 <TIM_Base_SetConfig+0x26>
 8001d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d16:	4290      	cmp	r0, r2
 8001d18:	d003      	beq.n	8001d22 <TIM_Base_SetConfig+0x26>
 8001d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	d115      	bne.n	8001d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d22:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d28:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <TIM_Base_SetConfig+0x94>)
 8001d2c:	4290      	cmp	r0, r2
 8001d2e:	d019      	beq.n	8001d64 <TIM_Base_SetConfig+0x68>
 8001d30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d34:	d016      	beq.n	8001d64 <TIM_Base_SetConfig+0x68>
 8001d36:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d3a:	4290      	cmp	r0, r2
 8001d3c:	d012      	beq.n	8001d64 <TIM_Base_SetConfig+0x68>
 8001d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d42:	4290      	cmp	r0, r2
 8001d44:	d00e      	beq.n	8001d64 <TIM_Base_SetConfig+0x68>
 8001d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d4a:	4290      	cmp	r0, r2
 8001d4c:	d00a      	beq.n	8001d64 <TIM_Base_SetConfig+0x68>
 8001d4e:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <TIM_Base_SetConfig+0x98>)
 8001d50:	4290      	cmp	r0, r2
 8001d52:	d007      	beq.n	8001d64 <TIM_Base_SetConfig+0x68>
 8001d54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d58:	4290      	cmp	r0, r2
 8001d5a:	d003      	beq.n	8001d64 <TIM_Base_SetConfig+0x68>
 8001d5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d60:	4290      	cmp	r0, r2
 8001d62:	d103      	bne.n	8001d6c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d64:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d6c:	694a      	ldr	r2, [r1, #20]
 8001d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d72:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001d74:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d76:	688b      	ldr	r3, [r1, #8]
 8001d78:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d7a:	680b      	ldr	r3, [r1, #0]
 8001d7c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <TIM_Base_SetConfig+0x94>)
 8001d80:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d82:	bf04      	itt	eq
 8001d84:	690b      	ldreq	r3, [r1, #16]
 8001d86:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	6143      	str	r3, [r0, #20]
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40014000 	.word	0x40014000

08001d98 <HAL_TIM_Base_Init>:
{
 8001d98:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b1a0      	cbz	r0, 8001dc8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001da2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001da6:	b91b      	cbnz	r3, 8001db0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001da8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001dac:	f001 fddc 	bl	8003968 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	2302      	movs	r3, #2
 8001db2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db6:	6820      	ldr	r0, [r4, #0]
 8001db8:	1d21      	adds	r1, r4, #4
 8001dba:	f7ff ff9f 	bl	8001cfc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
}
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001dcc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dd0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dd6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001dda:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ddc:	6083      	str	r3, [r0, #8]
 8001dde:	bd10      	pop	{r4, pc}

08001de0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001de0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001de4:	2b01      	cmp	r3, #1
{
 8001de6:	b570      	push	{r4, r5, r6, lr}
 8001de8:	4604      	mov	r4, r0
 8001dea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001dee:	d019      	beq.n	8001e24 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001df4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001df6:	2301      	movs	r3, #1
 8001df8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001dfc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e06:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e08:	680b      	ldr	r3, [r1, #0]
 8001e0a:	2b40      	cmp	r3, #64	; 0x40
 8001e0c:	d065      	beq.n	8001eda <HAL_TIM_ConfigClockSource+0xfa>
 8001e0e:	d815      	bhi.n	8001e3c <HAL_TIM_ConfigClockSource+0x5c>
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d00c      	beq.n	8001e2e <HAL_TIM_ConfigClockSource+0x4e>
 8001e14:	d807      	bhi.n	8001e26 <HAL_TIM_ConfigClockSource+0x46>
 8001e16:	b153      	cbz	r3, 8001e2e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e1a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e20:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d001      	beq.n	8001e2e <HAL_TIM_ConfigClockSource+0x4e>
 8001e2a:	2b30      	cmp	r3, #48	; 0x30
 8001e2c:	d1f4      	bne.n	8001e18 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001e2e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e30:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	e01a      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001e3c:	2b60      	cmp	r3, #96	; 0x60
 8001e3e:	d034      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0xca>
 8001e40:	d819      	bhi.n	8001e76 <HAL_TIM_ConfigClockSource+0x96>
 8001e42:	2b50      	cmp	r3, #80	; 0x50
 8001e44:	d1e8      	bne.n	8001e18 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e46:	684a      	ldr	r2, [r1, #4]
 8001e48:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e4a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e4c:	6a05      	ldr	r5, [r0, #32]
 8001e4e:	f025 0501 	bic.w	r5, r5, #1
 8001e52:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e54:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e56:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e5e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e62:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e66:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e6e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001e72:	6083      	str	r3, [r0, #8]
 8001e74:	e7d0      	b.n	8001e18 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001e76:	2b70      	cmp	r3, #112	; 0x70
 8001e78:	d00c      	beq.n	8001e94 <HAL_TIM_ConfigClockSource+0xb4>
 8001e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7e:	d1cb      	bne.n	8001e18 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001e80:	68cb      	ldr	r3, [r1, #12]
 8001e82:	684a      	ldr	r2, [r1, #4]
 8001e84:	6889      	ldr	r1, [r1, #8]
 8001e86:	f7ff ffa1 	bl	8001dcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	6893      	ldr	r3, [r2, #8]
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e92:	e008      	b.n	8001ea6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001e94:	68cb      	ldr	r3, [r1, #12]
 8001e96:	684a      	ldr	r2, [r1, #4]
 8001e98:	6889      	ldr	r1, [r1, #8]
 8001e9a:	f7ff ff97 	bl	8001dcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ea6:	6093      	str	r3, [r2, #8]
      break;
 8001ea8:	e7b6      	b.n	8001e18 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eaa:	684d      	ldr	r5, [r1, #4]
 8001eac:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eae:	6a01      	ldr	r1, [r0, #32]
 8001eb0:	f021 0110 	bic.w	r1, r1, #16
 8001eb4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eb6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001eb8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001eba:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ebe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ec2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ec6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001eca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ecc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ece:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ed4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001ed8:	e7cb      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eda:	684a      	ldr	r2, [r1, #4]
 8001edc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ede:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee0:	6a05      	ldr	r5, [r0, #32]
 8001ee2:	f025 0501 	bic.w	r5, r5, #1
 8001ee6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ee8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eea:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ef2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001ef6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001ef8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001efa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001efc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f02:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001f06:	e7b4      	b.n	8001e72 <HAL_TIM_ConfigClockSource+0x92>

08001f08 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f0c:	2b01      	cmp	r3, #1
{
 8001f0e:	b530      	push	{r4, r5, lr}
 8001f10:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001f14:	d02d      	beq.n	8001f72 <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f1a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f1c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001f1e:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f20:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001f24:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f26:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001f28:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f2c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f2e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f30:	4c11      	ldr	r4, [pc, #68]	; (8001f78 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8001f32:	42a3      	cmp	r3, r4
 8001f34:	d012      	beq.n	8001f5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d00f      	beq.n	8001f5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001f3c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001f40:	42a3      	cmp	r3, r4
 8001f42:	d00b      	beq.n	8001f5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001f44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f48:	42a3      	cmp	r3, r4
 8001f4a:	d007      	beq.n	8001f5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001f4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f50:	42a3      	cmp	r3, r4
 8001f52:	d003      	beq.n	8001f5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001f54:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f5c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f62:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f72:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f74:	bd30      	pop	{r4, r5, pc}
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000

08001f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f7c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7e:	6803      	ldr	r3, [r0, #0]
 8001f80:	68c1      	ldr	r1, [r0, #12]
 8001f82:	691a      	ldr	r2, [r3, #16]
{
 8001f84:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f86:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f8e:	6925      	ldr	r5, [r4, #16]
 8001f90:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f92:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f94:	69c0      	ldr	r0, [r0, #28]
 8001f96:	432a      	orrs	r2, r5
 8001f98:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001f9a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f9e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001fa0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fa4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	69a1      	ldr	r1, [r4, #24]
 8001fae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fb2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	4a25      	ldr	r2, [pc, #148]	; (8002050 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fbc:	d129      	bne.n	8002012 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d003      	beq.n	8001fca <UART_SetConfig+0x4e>
 8001fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d120      	bne.n	800200c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fca:	f7ff fd57 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fce:	6862      	ldr	r2, [r4, #4]
 8001fd0:	6825      	ldr	r5, [r4, #0]
 8001fd2:	1892      	adds	r2, r2, r2
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	f04f 0119 	mov.w	r1, #25
 8001fdc:	415b      	adcs	r3, r3
 8001fde:	fba0 0101 	umull	r0, r1, r0, r1
 8001fe2:	f7fe f8f7 	bl	80001d4 <__aeabi_uldivmod>
 8001fe6:	2164      	movs	r1, #100	; 0x64
 8001fe8:	fbb0 f4f1 	udiv	r4, r0, r1
 8001fec:	fb01 0314 	mls	r3, r1, r4, r0
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	3332      	adds	r3, #50	; 0x32
 8001ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff8:	f003 0207 	and.w	r2, r3, #7
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002002:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002006:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002008:	60ab      	str	r3, [r5, #8]
 800200a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800200c:	f7ff fd26 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002010:	e7dd      	b.n	8001fce <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002012:	4293      	cmp	r3, r2
 8002014:	d002      	beq.n	800201c <UART_SetConfig+0xa0>
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <UART_SetConfig+0xd8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d116      	bne.n	800204a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800201c:	f7ff fd2e 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	6825      	ldr	r5, [r4, #0]
 8002024:	2119      	movs	r1, #25
 8002026:	009a      	lsls	r2, r3, #2
 8002028:	fba0 0101 	umull	r0, r1, r0, r1
 800202c:	0f9b      	lsrs	r3, r3, #30
 800202e:	f7fe f8d1 	bl	80001d4 <__aeabi_uldivmod>
 8002032:	2264      	movs	r2, #100	; 0x64
 8002034:	fbb0 f1f2 	udiv	r1, r0, r2
 8002038:	fb02 0311 	mls	r3, r2, r1, r0
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	3332      	adds	r3, #50	; 0x32
 8002040:	fbb3 f3f2 	udiv	r3, r3, r2
 8002044:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002048:	e7de      	b.n	8002008 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800204a:	f7ff fd07 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 800204e:	e7e7      	b.n	8002020 <UART_SetConfig+0xa4>
 8002050:	40011000 	.word	0x40011000
 8002054:	40011400 	.word	0x40011400

08002058 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	4604      	mov	r4, r0
 800205c:	460e      	mov	r6, r1
 800205e:	4617      	mov	r7, r2
 8002060:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002062:	6821      	ldr	r1, [r4, #0]
 8002064:	680b      	ldr	r3, [r1, #0]
 8002066:	ea36 0303 	bics.w	r3, r6, r3
 800206a:	d101      	bne.n	8002070 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800206c:	2000      	movs	r0, #0
}
 800206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002070:	1c6b      	adds	r3, r5, #1
 8002072:	d0f7      	beq.n	8002064 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002074:	b995      	cbnz	r5, 800209c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800207e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002088:	2320      	movs	r3, #32
 800208a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800208e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002092:	2300      	movs	r3, #0
 8002094:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002098:	2003      	movs	r0, #3
 800209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800209c:	f7fe fa6c 	bl	8000578 <HAL_GetTick>
 80020a0:	1bc0      	subs	r0, r0, r7
 80020a2:	4285      	cmp	r5, r0
 80020a4:	d2dd      	bcs.n	8002062 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80020a6:	e7e6      	b.n	8002076 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080020a8 <HAL_UART_Init>:
{
 80020a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020aa:	4604      	mov	r4, r0
 80020ac:	b340      	cbz	r0, 8002100 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b6:	b91b      	cbnz	r3, 80020c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80020bc:	f001 fc6c 	bl	8003998 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020c0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020c2:	2324      	movs	r3, #36	; 0x24
 80020c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020c8:	68d3      	ldr	r3, [r2, #12]
 80020ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020ce:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff ff53 	bl	8001f7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ee:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80020f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80020fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002100:	2001      	movs	r0, #1
}
 8002102:	bd10      	pop	{r4, pc}

08002104 <HAL_UART_Transmit>:
{
 8002104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002108:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800210a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800210e:	2b20      	cmp	r3, #32
{
 8002110:	4604      	mov	r4, r0
 8002112:	460d      	mov	r5, r1
 8002114:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002116:	d151      	bne.n	80021bc <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002118:	2900      	cmp	r1, #0
 800211a:	d04c      	beq.n	80021b6 <HAL_UART_Transmit+0xb2>
 800211c:	2a00      	cmp	r2, #0
 800211e:	d04a      	beq.n	80021b6 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002120:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002124:	2b01      	cmp	r3, #1
 8002126:	d049      	beq.n	80021bc <HAL_UART_Transmit+0xb8>
 8002128:	2301      	movs	r3, #1
 800212a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002132:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002138:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800213c:	f7fe fa1c 	bl	8000578 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002140:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002144:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002146:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800214a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800214e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002150:	b29b      	uxth	r3, r3
 8002152:	b95b      	cbnz	r3, 800216c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002154:	463b      	mov	r3, r7
 8002156:	4632      	mov	r2, r6
 8002158:	2140      	movs	r1, #64	; 0x40
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff ff7c 	bl	8002058 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002160:	b9a0      	cbnz	r0, 800218c <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002162:	2320      	movs	r3, #32
 8002164:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 800216c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800216e:	3b01      	subs	r3, #1
 8002170:	b29b      	uxth	r3, r3
 8002172:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002174:	68a3      	ldr	r3, [r4, #8]
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800217a:	4632      	mov	r2, r6
 800217c:	463b      	mov	r3, r7
 800217e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002182:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002184:	d10e      	bne.n	80021a4 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	f7ff ff67 	bl	8002058 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800218a:	b110      	cbz	r0, 8002192 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 800218c:	2003      	movs	r0, #3
 800218e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002192:	882b      	ldrh	r3, [r5, #0]
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800219c:	6923      	ldr	r3, [r4, #16]
 800219e:	b943      	cbnz	r3, 80021b2 <HAL_UART_Transmit+0xae>
          pData += 2U;
 80021a0:	3502      	adds	r5, #2
 80021a2:	e7d4      	b.n	800214e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a4:	f7ff ff58 	bl	8002058 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1ef      	bne.n	800218c <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	782a      	ldrb	r2, [r5, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	3501      	adds	r5, #1
 80021b4:	e7cb      	b.n	800214e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80021b6:	2001      	movs	r0, #1
 80021b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80021bc:	2002      	movs	r0, #2
}
 80021be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080021c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80021c6:	3b01      	subs	r3, #1
 80021c8:	d101      	bne.n	80021ce <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80021ca:	2003      	movs	r0, #3
 80021cc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80021ce:	6902      	ldr	r2, [r0, #16]
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	daf8      	bge.n	80021c6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80021d4:	6903      	ldr	r3, [r0, #16]
 80021d6:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <USB_CoreReset+0x2c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80021de:	3a01      	subs	r2, #1
 80021e0:	d0f3      	beq.n	80021ca <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80021e2:	6903      	ldr	r3, [r0, #16]
 80021e4:	f013 0301 	ands.w	r3, r3, #1
 80021e8:	d1f9      	bne.n	80021de <USB_CoreReset+0x1a>

  return HAL_OK;
 80021ea:	4618      	mov	r0, r3
}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	00030d41 	.word	0x00030d41

080021f4 <USB_CoreInit>:
{
 80021f4:	b084      	sub	sp, #16
 80021f6:	b538      	push	{r3, r4, r5, lr}
 80021f8:	ad05      	add	r5, sp, #20
 80021fa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80021fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002200:	2b01      	cmp	r3, #1
{
 8002202:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002204:	d125      	bne.n	8002252 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002206:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800220e:	68c3      	ldr	r3, [r0, #12]
 8002210:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002218:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800221a:	68c3      	ldr	r3, [r0, #12]
 800221c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002220:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002224:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002226:	bf02      	ittt	eq
 8002228:	68c3      	ldreq	r3, [r0, #12]
 800222a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800222e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002230:	f7ff ffc8 	bl	80021c4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002234:	9b08      	ldr	r3, [sp, #32]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800223a:	68a3      	ldr	r3, [r4, #8]
 800223c:	f043 0306 	orr.w	r3, r3, #6
 8002240:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002242:	68a3      	ldr	r3, [r4, #8]
 8002244:	f043 0320 	orr.w	r3, r3, #32
 8002248:	60a3      	str	r3, [r4, #8]
}
 800224a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800224e:	b004      	add	sp, #16
 8002250:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002252:	68c3      	ldr	r3, [r0, #12]
 8002254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002258:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800225a:	f7ff ffb3 	bl	80021c4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800225e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002260:	b923      	cbnz	r3, 800226c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002268:	63a3      	str	r3, [r4, #56]	; 0x38
 800226a:	e7e3      	b.n	8002234 <USB_CoreInit+0x40>
 800226c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	e7f9      	b.n	8002268 <USB_CoreInit+0x74>

08002274 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002274:	2a02      	cmp	r2, #2
 8002276:	d158      	bne.n	800232a <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <USB_SetTurnaroundTime+0xc0>)
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <USB_SetTurnaroundTime+0xc4>)
 800227c:	440b      	add	r3, r1
 800227e:	4293      	cmp	r3, r2
 8002280:	d947      	bls.n	8002312 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <USB_SetTurnaroundTime+0xc8>)
 8002284:	4a2e      	ldr	r2, [pc, #184]	; (8002340 <USB_SetTurnaroundTime+0xcc>)
 8002286:	440b      	add	r3, r1
 8002288:	4293      	cmp	r3, r2
 800228a:	d944      	bls.n	8002316 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800228c:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8002290:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <USB_SetTurnaroundTime+0xd0>)
 8002292:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002296:	4293      	cmp	r3, r2
 8002298:	d93f      	bls.n	800231a <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800229a:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800229e:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80022a2:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80022a6:	32a0      	adds	r2, #160	; 0xa0
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d938      	bls.n	800231e <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <USB_SetTurnaroundTime+0xd4>)
 80022ae:	4a27      	ldr	r2, [pc, #156]	; (800234c <USB_SetTurnaroundTime+0xd8>)
 80022b0:	440b      	add	r3, r1
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d935      	bls.n	8002322 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <USB_SetTurnaroundTime+0xdc>)
 80022b8:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80022bc:	440b      	add	r3, r1
 80022be:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d92f      	bls.n	8002326 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <USB_SetTurnaroundTime+0xe0>)
 80022c8:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80022cc:	440b      	add	r3, r1
 80022ce:	f502 7220 	add.w	r2, r2, #640	; 0x280
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d929      	bls.n	800232a <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80022d6:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80022da:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80022de:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80022e2:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d921      	bls.n	800232e <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 80022ec:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80022f0:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80022f2:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80022f6:	4293      	cmp	r3, r2
 80022f8:	bf94      	ite	ls
 80022fa:	2307      	movls	r3, #7
 80022fc:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80022fe:	68c2      	ldr	r2, [r0, #12]
 8002300:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002304:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002306:	68c2      	ldr	r2, [r0, #12]
 8002308:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800230c:	60c3      	str	r3, [r0, #12]
}
 800230e:	2000      	movs	r0, #0
 8002310:	4770      	bx	lr
      UsbTrd = 0xFU;
 8002312:	230f      	movs	r3, #15
 8002314:	e7f3      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 8002316:	230e      	movs	r3, #14
 8002318:	e7f1      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800231a:	230d      	movs	r3, #13
 800231c:	e7ef      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800231e:	230c      	movs	r3, #12
 8002320:	e7ed      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8002322:	230b      	movs	r3, #11
 8002324:	e7eb      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 8002326:	230a      	movs	r3, #10
 8002328:	e7e9      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800232a:	2309      	movs	r3, #9
 800232c:	e7e7      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800232e:	2308      	movs	r3, #8
 8002330:	e7e5      	b.n	80022fe <USB_SetTurnaroundTime+0x8a>
 8002332:	bf00      	nop
 8002334:	ff275340 	.word	0xff275340
 8002338:	000c34ff 	.word	0x000c34ff
 800233c:	ff1b1e40 	.word	0xff1b1e40
 8002340:	000f423f 	.word	0x000f423f
 8002344:	00124f7f 	.word	0x00124f7f
 8002348:	fee5b660 	.word	0xfee5b660
 800234c:	0016e35f 	.word	0x0016e35f
 8002350:	feced300 	.word	0xfeced300
 8002354:	feb35bc0 	.word	0xfeb35bc0
 8002358:	fe5954e0 	.word	0xfe5954e0

0800235c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800235c:	6883      	ldr	r3, [r0, #8]
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6083      	str	r3, [r0, #8]
}
 8002364:	2000      	movs	r0, #0
 8002366:	4770      	bx	lr

08002368 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002368:	6883      	ldr	r3, [r0, #8]
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6083      	str	r3, [r0, #8]
}
 8002370:	2000      	movs	r0, #0
 8002372:	4770      	bx	lr

08002374 <USB_SetCurrentMode>:
{
 8002374:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002376:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002378:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800237a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800237e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002380:	d108      	bne.n	8002394 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002382:	68c3      	ldr	r3, [r0, #12]
 8002384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002388:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800238a:	2032      	movs	r0, #50	; 0x32
 800238c:	f7fe f8fa 	bl	8000584 <HAL_Delay>
  return HAL_OK;
 8002390:	2000      	movs	r0, #0
 8002392:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002394:	b919      	cbnz	r1, 800239e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002396:	68c3      	ldr	r3, [r0, #12]
 8002398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800239c:	e7f4      	b.n	8002388 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800239e:	2001      	movs	r0, #1
}
 80023a0:	bd08      	pop	{r3, pc}
	...

080023a4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80023a4:	0189      	lsls	r1, r1, #6
 80023a6:	f041 0120 	orr.w	r1, r1, #32
 80023aa:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <USB_FlushTxFifo+0x20>)
 80023ac:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80023ae:	3a01      	subs	r2, #1
 80023b0:	d005      	beq.n	80023be <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80023b2:	6903      	ldr	r3, [r0, #16]
 80023b4:	f013 0320 	ands.w	r3, r3, #32
 80023b8:	d1f9      	bne.n	80023ae <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80023ba:	4618      	mov	r0, r3
 80023bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80023be:	2003      	movs	r0, #3
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	00030d41 	.word	0x00030d41

080023c8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023c8:	2310      	movs	r3, #16
 80023ca:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <USB_FlushRxFifo+0x1c>)
 80023cc:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80023ce:	3a01      	subs	r2, #1
 80023d0:	d005      	beq.n	80023de <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80023d2:	6903      	ldr	r3, [r0, #16]
 80023d4:	f013 0310 	ands.w	r3, r3, #16
 80023d8:	d1f9      	bne.n	80023ce <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80023da:	4618      	mov	r0, r3
 80023dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80023de:	2003      	movs	r0, #3
}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	00030d41 	.word	0x00030d41

080023e8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80023e8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80023ec:	4319      	orrs	r1, r3
 80023ee:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80023f2:	2000      	movs	r0, #0
 80023f4:	4770      	bx	lr
	...

080023f8 <USB_DevInit>:
{
 80023f8:	b084      	sub	sp, #16
 80023fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023fe:	4604      	mov	r4, r0
 8002400:	a809      	add	r0, sp, #36	; 0x24
 8002402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800240a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800240c:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800240e:	4619      	mov	r1, r3
 8002410:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002414:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002418:	3301      	adds	r3, #1
 800241a:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800241c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800241e:	d1f7      	bne.n	8002410 <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 8002420:	2e00      	cmp	r6, #0
 8002422:	d173      	bne.n	800250c <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800242a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800242c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800242e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002432:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002434:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800243a:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002442:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002446:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800244a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800244c:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800244e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002452:	d165      	bne.n	8002520 <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 8002454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002456:	2900      	cmp	r1, #0
 8002458:	d160      	bne.n	800251c <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff ffc4 	bl	80023e8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002460:	2110      	movs	r1, #16
 8002462:	4620      	mov	r0, r4
 8002464:	f7ff ff9e 	bl	80023a4 <USB_FlushTxFifo>
 8002468:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff ffac 	bl	80023c8 <USB_FlushRxFifo>
 8002470:	2800      	cmp	r0, #0
 8002472:	d157      	bne.n	8002524 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002474:	1c08      	adds	r0, r1, #0
 8002476:	bf18      	it	ne
 8002478:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	612b      	str	r3, [r5, #16]
 800247e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8002482:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002484:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8002486:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002488:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800248c:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002490:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002494:	4543      	cmp	r3, r8
 8002496:	d147      	bne.n	8002528 <USB_DevInit+0x130>
 8002498:	2100      	movs	r1, #0
 800249a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800249e:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80024a0:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80024a4:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80024a8:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d14e      	bne.n	800254e <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80024b0:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80024b2:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80024b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b8:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80024ba:	d107      	bne.n	80024cc <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80024bc:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <USB_DevInit+0x180>)
 80024be:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80024c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	f043 0303 	orr.w	r3, r3, #3
 80024ca:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80024d0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80024d4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80024d6:	b91f      	cbnz	r7, 80024e0 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80024d8:	69a3      	ldr	r3, [r4, #24]
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80024e0:	69a2      	ldr	r2, [r4, #24]
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <USB_DevInit+0x184>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80024e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80024ea:	b11b      	cbz	r3, 80024f4 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80024ec:	69a3      	ldr	r3, [r4, #24]
 80024ee:	f043 0308 	orr.w	r3, r3, #8
 80024f2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80024f4:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80024f6:	bf01      	itttt	eq
 80024f8:	69a3      	ldreq	r3, [r4, #24]
 80024fa:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80024fe:	f043 0304 	orreq.w	r3, r3, #4
 8002502:	61a3      	streq	r3, [r4, #24]
}
 8002504:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002508:	b004      	add	sp, #16
 800250a:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002512:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002516:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800251a:	e78e      	b.n	800243a <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800251c:	4619      	mov	r1, r3
 800251e:	e79c      	b.n	800245a <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002520:	2103      	movs	r1, #3
 8002522:	e79a      	b.n	800245a <USB_DevInit+0x62>
 8002524:	2001      	movs	r0, #1
 8002526:	e7a8      	b.n	800247a <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002528:	f8d2 a000 	ldr.w	sl, [r2]
 800252c:	f1ba 0f00 	cmp.w	sl, #0
 8002530:	da0b      	bge.n	800254a <USB_DevInit+0x152>
      if (i == 0U)
 8002532:	b93b      	cbnz	r3, 8002544 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002534:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002538:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800253a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800253c:	f8c2 9008 	str.w	r9, [r2, #8]
 8002540:	3220      	adds	r2, #32
 8002542:	e7a7      	b.n	8002494 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002544:	f8c2 e000 	str.w	lr, [r2]
 8002548:	e7f6      	b.n	8002538 <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 800254a:	6011      	str	r1, [r2, #0]
 800254c:	e7f4      	b.n	8002538 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800254e:	f8d2 a000 	ldr.w	sl, [r2]
 8002552:	f1ba 0f00 	cmp.w	sl, #0
 8002556:	da0c      	bge.n	8002572 <USB_DevInit+0x17a>
      if (i == 0U)
 8002558:	b941      	cbnz	r1, 800256c <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800255a:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800255e:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002562:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002564:	f8c2 9008 	str.w	r9, [r2, #8]
 8002568:	3220      	adds	r2, #32
 800256a:	e79f      	b.n	80024ac <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800256c:	f8c2 c000 	str.w	ip, [r2]
 8002570:	e7f5      	b.n	800255e <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002572:	f8c2 e000 	str.w	lr, [r2]
 8002576:	e7f2      	b.n	800255e <USB_DevInit+0x166>
 8002578:	00800100 	.word	0x00800100
 800257c:	803c3800 	.word	0x803c3800

08002580 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002580:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002584:	f013 0006 	ands.w	r0, r3, #6
 8002588:	d004      	beq.n	8002594 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800258a:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800258e:	bf14      	ite	ne
 8002590:	2002      	movne	r0, #2
 8002592:	200f      	moveq	r0, #15
}
 8002594:	4770      	bx	lr

08002596 <USB_ActivateEndpoint>:
{
 8002596:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8002598:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800259a:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800259c:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 80025a0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80025a4:	2a01      	cmp	r2, #1
 80025a6:	f004 050f 	and.w	r5, r4, #15
 80025aa:	d11b      	bne.n	80025e4 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80025ac:	40aa      	lsls	r2, r5
 80025ae:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80025b0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80025b4:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80025b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80025ba:	041a      	lsls	r2, r3, #16
 80025bc:	d410      	bmi.n	80025e0 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80025be:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80025c0:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80025c2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80025c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80025d6:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80025e0:	2000      	movs	r0, #0
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80025e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025e8:	40aa      	lsls	r2, r5
 80025ea:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025ec:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80025f0:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025f2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	d4f2      	bmi.n	80025e0 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80025fa:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80025fc:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80025fe:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002618:	e7e2      	b.n	80025e0 <USB_ActivateEndpoint+0x4a>
	...

0800261c <USB_DeactivateEndpoint>:
{
 800261c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800261e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002620:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002622:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8002626:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800262a:	2b01      	cmp	r3, #1
 800262c:	f004 050f 	and.w	r5, r4, #15
 8002630:	d110      	bne.n	8002654 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002632:	40ab      	lsls	r3, r5
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800263a:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800263c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002640:	400b      	ands	r3, r1
 8002642:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002644:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <USB_DeactivateEndpoint+0x5c>)
 800264a:	4013      	ands	r3, r2
 800264c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002650:	2000      	movs	r0, #0
 8002652:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002658:	40ab      	lsls	r3, r5
 800265a:	43db      	mvns	r3, r3
 800265c:	4019      	ands	r1, r3
 800265e:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002660:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002662:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002666:	400b      	ands	r3, r1
 8002668:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800266a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800266e:	4b03      	ldr	r3, [pc, #12]	; (800267c <USB_DeactivateEndpoint+0x60>)
 8002670:	4013      	ands	r3, r2
 8002672:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002676:	e7eb      	b.n	8002650 <USB_DeactivateEndpoint+0x34>
 8002678:	ec337800 	.word	0xec337800
 800267c:	eff37800 	.word	0xeff37800

08002680 <USB_EP0StartXfer>:
{
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002682:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002684:	780c      	ldrb	r4, [r1, #0]
 8002686:	694e      	ldr	r6, [r1, #20]
 8002688:	4f41      	ldr	r7, [pc, #260]	; (8002790 <USB_EP0StartXfer+0x110>)
  if (ep->is_in == 1U)
 800268a:	2b01      	cmp	r3, #1
 800268c:	f04f 0320 	mov.w	r3, #32
 8002690:	d159      	bne.n	8002746 <USB_EP0StartXfer+0xc6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002692:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 8002696:	bb36      	cbnz	r6, 80026e6 <USB_EP0StartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002698:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 800269c:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80026a0:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80026a4:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80026a8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80026ac:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80026b0:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80026b4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80026b8:	402f      	ands	r7, r5
 80026ba:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 80026be:	2a01      	cmp	r2, #1
 80026c0:	f04f 0320 	mov.w	r3, #32
 80026c4:	d129      	bne.n	800271a <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 80026c6:	690a      	ldr	r2, [r1, #16]
 80026c8:	b11a      	cbz	r2, 80026d2 <USB_EP0StartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80026ca:	fb13 0304 	smlabb	r3, r3, r4, r0
 80026ce:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80026d2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80026d6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80026da:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80026de:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 80026e2:	2000      	movs	r0, #0
 80026e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80026e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ea:	691d      	ldr	r5, [r3, #16]
 80026ec:	402f      	ands	r7, r5
 80026ee:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80026f0:	691d      	ldr	r5, [r3, #16]
 80026f2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80026f6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80026fa:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80026fc:	688d      	ldr	r5, [r1, #8]
 80026fe:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8002700:	bf88      	it	hi
 8002702:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002704:	691d      	ldr	r5, [r3, #16]
 8002706:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800270a:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800270c:	694d      	ldr	r5, [r1, #20]
 800270e:	691e      	ldr	r6, [r3, #16]
 8002710:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002714:	4335      	orrs	r5, r6
 8002716:	611d      	str	r5, [r3, #16]
 8002718:	e7d1      	b.n	80026be <USB_EP0StartXfer+0x3e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800271a:	fb13 0404 	smlabb	r4, r3, r4, r0
 800271e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002726:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800272a:	694b      	ldr	r3, [r1, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0d8      	beq.n	80026e2 <USB_EP0StartXfer+0x62>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002730:	780a      	ldrb	r2, [r1, #0]
 8002732:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002736:	f002 010f 	and.w	r1, r2, #15
 800273a:	2201      	movs	r2, #1
 800273c:	408a      	lsls	r2, r1
 800273e:	431a      	orrs	r2, r3
 8002740:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002744:	e7cd      	b.n	80026e2 <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002746:	fb13 0004 	smlabb	r0, r3, r4, r0
 800274a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800274e:	691c      	ldr	r4, [r3, #16]
 8002750:	4027      	ands	r7, r4
 8002752:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002754:	691c      	ldr	r4, [r3, #16]
 8002756:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800275a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800275e:	611c      	str	r4, [r3, #16]
 8002760:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8002762:	b106      	cbz	r6, 8002766 <USB_EP0StartXfer+0xe6>
      ep->xfer_len = ep->maxpacket;
 8002764:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002766:	691d      	ldr	r5, [r3, #16]
 8002768:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800276c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800276e:	691d      	ldr	r5, [r3, #16]
 8002770:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002774:	432c      	orrs	r4, r5
    if (dma == 1U)
 8002776:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002778:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800277a:	d102      	bne.n	8002782 <USB_EP0StartXfer+0x102>
      if ((uint32_t)ep->xfer_buff != 0U)
 800277c:	68ca      	ldr	r2, [r1, #12]
 800277e:	b102      	cbz	r2, 8002782 <USB_EP0StartXfer+0x102>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002780:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002782:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002786:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800278a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800278e:	e7a8      	b.n	80026e2 <USB_EP0StartXfer+0x62>
 8002790:	fff80000 	.word	0xfff80000

08002794 <USB_WritePacket>:
{
 8002794:	b510      	push	{r4, lr}
 8002796:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800279a:	b94c      	cbnz	r4, 80027b0 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800279c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800279e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80027aa:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 80027ac:	4299      	cmp	r1, r3
 80027ae:	d101      	bne.n	80027b4 <USB_WritePacket+0x20>
}
 80027b0:	2000      	movs	r0, #0
 80027b2:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80027b4:	f851 2b04 	ldr.w	r2, [r1], #4
 80027b8:	6002      	str	r2, [r0, #0]
 80027ba:	e7f7      	b.n	80027ac <USB_WritePacket+0x18>

080027bc <USB_EPStartXfer>:
{
 80027bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80027be:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80027c0:	780e      	ldrb	r6, [r1, #0]
 80027c2:	4f73      	ldr	r7, [pc, #460]	; (8002990 <USB_EPStartXfer+0x1d4>)
  if (ep->is_in == 1U)
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f04f 0420 	mov.w	r4, #32
 80027ca:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027cc:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 80027d0:	f040 8098 	bne.w	8002904 <USB_EPStartXfer+0x148>
    if (ep->xfer_len == 0U)
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d138      	bne.n	800284a <USB_EPStartXfer+0x8e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027d8:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 80027dc:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 80027e0:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80027e4:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80027e8:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80027ea:	692c      	ldr	r4, [r5, #16]
 80027ec:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80027f0:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027f2:	692c      	ldr	r4, [r5, #16]
 80027f4:	4027      	ands	r7, r4
 80027f6:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 80027f8:	2a01      	cmp	r2, #1
 80027fa:	f04f 0420 	mov.w	r4, #32
 80027fe:	d154      	bne.n	80028aa <USB_EPStartXfer+0xee>
      if ((uint32_t)ep->dma_addr != 0U)
 8002800:	690b      	ldr	r3, [r1, #16]
 8002802:	b11b      	cbz	r3, 800280c <USB_EPStartXfer+0x50>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002804:	fb14 0406 	smlabb	r4, r4, r6, r0
 8002808:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800280c:	78cb      	ldrb	r3, [r1, #3]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d110      	bne.n	8002834 <USB_EPStartXfer+0x78>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002812:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002816:	f413 7f80 	tst.w	r3, #256	; 0x100
 800281a:	f04f 0320 	mov.w	r3, #32
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800281e:	fb13 0306 	smlabb	r3, r3, r6, r0
 8002822:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002826:	bf0c      	ite	eq
 8002828:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800282c:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8002830:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002834:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8002838:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800283c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002840:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002844:	2000      	movs	r0, #0
 8002846:	b003      	add	sp, #12
 8002848:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800284a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800284e:	402f      	ands	r7, r5
 8002850:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002854:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002858:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800285a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800285e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002862:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002866:	19dd      	adds	r5, r3, r7
 8002868:	3d01      	subs	r5, #1
 800286a:	fbb5 f7f7 	udiv	r7, r5, r7
 800286e:	4d49      	ldr	r5, [pc, #292]	; (8002994 <USB_EPStartXfer+0x1d8>)
 8002870:	f8d4 e910 	ldr.w	lr, [r4, #2320]	; 0x910
 8002874:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8002878:	ea45 050e 	orr.w	r5, r5, lr
 800287c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002880:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8002884:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8002888:	433d      	orrs	r5, r7
 800288a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800288e:	78cd      	ldrb	r5, [r1, #3]
 8002890:	2d01      	cmp	r5, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002892:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8002896:	d1af      	bne.n	80027f8 <USB_EPStartXfer+0x3c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002898:	6925      	ldr	r5, [r4, #16]
 800289a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800289e:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80028a0:	6925      	ldr	r5, [r4, #16]
 80028a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80028a6:	6125      	str	r5, [r4, #16]
 80028a8:	e7a6      	b.n	80027f8 <USB_EPStartXfer+0x3c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80028aa:	fb14 0406 	smlabb	r4, r4, r6, r0
 80028ae:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80028b2:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80028b6:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80028ba:	78cd      	ldrb	r5, [r1, #3]
 80028bc:	2d01      	cmp	r5, #1
 80028be:	d00c      	beq.n	80028da <USB_EPStartXfer+0x11e>
        if (ep->xfer_len > 0U)
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0bf      	beq.n	8002844 <USB_EPStartXfer+0x88>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80028c4:	780b      	ldrb	r3, [r1, #0]
 80028c6:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80028ca:	f003 020f 	and.w	r2, r3, #15
 80028ce:	2301      	movs	r3, #1
 80028d0:	4093      	lsls	r3, r2
 80028d2:	4323      	orrs	r3, r4
 80028d4:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80028d8:	e7b4      	b.n	8002844 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80028da:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 80028de:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80028e2:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80028e6:	bf0c      	ite	eq
 80028e8:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80028ec:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80028f0:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80028f4:	780c      	ldrb	r4, [r1, #0]
 80028f6:	9200      	str	r2, [sp, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4622      	mov	r2, r4
 80028fc:	68c9      	ldr	r1, [r1, #12]
 80028fe:	f7ff ff49 	bl	8002794 <USB_WritePacket>
 8002902:	e79f      	b.n	8002844 <USB_EPStartXfer+0x88>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002904:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 8002908:	6935      	ldr	r5, [r6, #16]
 800290a:	402f      	ands	r7, r5
 800290c:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800290e:	6935      	ldr	r5, [r6, #16]
 8002910:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002914:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002918:	6135      	str	r5, [r6, #16]
 800291a:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800291c:	bb23      	cbnz	r3, 8002968 <USB_EPStartXfer+0x1ac>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800291e:	6933      	ldr	r3, [r6, #16]
 8002920:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002924:	431d      	orrs	r5, r3
 8002926:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002928:	6933      	ldr	r3, [r6, #16]
 800292a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800292e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002930:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8002932:	d102      	bne.n	800293a <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002934:	68cb      	ldr	r3, [r1, #12]
 8002936:	b103      	cbz	r3, 800293a <USB_EPStartXfer+0x17e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002938:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 800293a:	78cb      	ldrb	r3, [r1, #3]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10c      	bne.n	800295a <USB_EPStartXfer+0x19e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002940:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002944:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002948:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800294c:	bf0c      	ite	eq
 800294e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002952:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8002956:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800295a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800295e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002962:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8002966:	e76d      	b.n	8002844 <USB_EPStartXfer+0x88>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002968:	4f0a      	ldr	r7, [pc, #40]	; (8002994 <USB_EPStartXfer+0x1d8>)
 800296a:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800296e:	442b      	add	r3, r5
 8002970:	3b01      	subs	r3, #1
 8002972:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002976:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
 800297a:	ea47 070e 	orr.w	r7, r7, lr
 800297e:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002980:	b29b      	uxth	r3, r3
 8002982:	6937      	ldr	r7, [r6, #16]
 8002984:	436b      	muls	r3, r5
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	433b      	orrs	r3, r7
 800298c:	e7cf      	b.n	800292e <USB_EPStartXfer+0x172>
 800298e:	bf00      	nop
 8002990:	fff80000 	.word	0xfff80000
 8002994:	1ff80000 	.word	0x1ff80000

08002998 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002998:	3203      	adds	r2, #3
 800299a:	f022 0203 	bic.w	r2, r2, #3
 800299e:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80029a0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80029a4:	4291      	cmp	r1, r2
 80029a6:	d101      	bne.n	80029ac <USB_ReadPacket+0x14>
}
 80029a8:	4608      	mov	r0, r1
 80029aa:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80029ac:	6803      	ldr	r3, [r0, #0]
 80029ae:	f841 3b04 	str.w	r3, [r1], #4
 80029b2:	e7f7      	b.n	80029a4 <USB_ReadPacket+0xc>

080029b4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 80029b4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80029b6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80029be:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 80029c2:	d112      	bne.n	80029ea <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80029c4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db06      	blt.n	80029da <USB_EPSetStall+0x26>
 80029cc:	b12a      	cbz	r2, 80029da <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80029ce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80029d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80029da:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80029de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80029e6:	2000      	movs	r0, #0
 80029e8:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80029ea:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	db06      	blt.n	8002a00 <USB_EPSetStall+0x4c>
 80029f2:	b12a      	cbz	r2, 8002a00 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80029f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80029f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002a00:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a08:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002a0c:	e7eb      	b.n	80029e6 <USB_EPSetStall+0x32>

08002a0e <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8002a0e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002a10:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a18:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8002a1c:	d111      	bne.n	8002a42 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a26:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002a2a:	78cb      	ldrb	r3, [r1, #3]
 8002a2c:	3b02      	subs	r3, #2
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d805      	bhi.n	8002a3e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002a32:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002a3e:	2000      	movs	r0, #0
 8002a40:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a42:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a4a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002a4e:	78cb      	ldrb	r3, [r1, #3]
 8002a50:	3b02      	subs	r3, #2
 8002a52:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002a54:	bf9e      	ittt	ls
 8002a56:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8002a5a:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8002a62:	e7ec      	b.n	8002a3e <USB_EPClearStall+0x30>

08002a64 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002a64:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002a68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a6c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002a70:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002a74:	0109      	lsls	r1, r1, #4
 8002a76:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002a7a:	4319      	orrs	r1, r3
 8002a7c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002a80:	2000      	movs	r0, #0
 8002a82:	4770      	bx	lr

08002a84 <USB_DevConnect>:
{
 8002a84:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002a86:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002a8a:	f023 0302 	bic.w	r3, r3, #2
 8002a8e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002a92:	2003      	movs	r0, #3
 8002a94:	f7fd fd76 	bl	8000584 <HAL_Delay>
}
 8002a98:	2000      	movs	r0, #0
 8002a9a:	bd08      	pop	{r3, pc}

08002a9c <USB_DevDisconnect>:
{
 8002a9c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a9e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f7fd fd6a 	bl	8000584 <HAL_Delay>
}
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	bd08      	pop	{r3, pc}

08002ab4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002ab4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002ab6:	6980      	ldr	r0, [r0, #24]
}
 8002ab8:	4010      	ands	r0, r2
 8002aba:	4770      	bx	lr

08002abc <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002abc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002ac0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002ac4:	69c0      	ldr	r0, [r0, #28]
 8002ac6:	4018      	ands	r0, r3
}
 8002ac8:	0c00      	lsrs	r0, r0, #16
 8002aca:	4770      	bx	lr

08002acc <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002acc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002ad0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002ad4:	69c0      	ldr	r0, [r0, #28]
 8002ad6:	4018      	ands	r0, r3
}
 8002ad8:	b280      	uxth	r0, r0
 8002ada:	4770      	bx	lr

08002adc <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002adc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002ae0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002ae4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002ae8:	6940      	ldr	r0, [r0, #20]
}
 8002aea:	4010      	ands	r0, r2
 8002aec:	4770      	bx	lr

08002aee <USB_ReadDevInEPInterrupt>:
{
 8002aee:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8002af0:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002af4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002af8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002afc:	f001 010f 	and.w	r1, r1, #15
 8002b00:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002b02:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002b06:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002b08:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	4323      	orrs	r3, r4
}
 8002b0e:	4018      	ands	r0, r3
 8002b10:	bd10      	pop	{r4, pc}

08002b12 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002b12:	6940      	ldr	r0, [r0, #20]
}
 8002b14:	f000 0001 	and.w	r0, r0, #1
 8002b18:	4770      	bx	lr

08002b1a <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002b1a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b22:	f023 0307 	bic.w	r3, r3, #7
 8002b26:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002b2a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	f002 0206 	and.w	r2, r2, #6
 8002b34:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002b36:	bf02      	ittt	eq
 8002b38:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002b3c:	f042 0203 	orreq.w	r2, r2, #3
 8002b40:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4a:	605a      	str	r2, [r3, #4]
}
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	4770      	bx	lr

08002b50 <USB_EP0_OutStart>:
{
 8002b50:	b510      	push	{r4, lr}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <USB_EP0_OutStart+0x5c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b54:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002b56:	429c      	cmp	r4, r3
 8002b58:	d903      	bls.n	8002b62 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b5a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db21      	blt.n	8002ba6 <USB_EP0_OutStart+0x56>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002b62:	2400      	movs	r4, #0
 8002b64:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002b68:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002b6c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002b70:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002b74:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002b78:	f044 0418 	orr.w	r4, r4, #24
 8002b7c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002b80:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8002b84:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002b86:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002b8a:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002b8e:	bf08      	it	eq
 8002b90:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002b94:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002b98:	bf02      	ittt	eq
 8002b9a:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 8002b9e:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 8002ba2:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	bf00      	nop
 8002bac:	4f54300a 	.word	0x4f54300a

08002bb0 <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgFSDesc);
 8002bb0:	2322      	movs	r3, #34	; 0x22
 8002bb2:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgFSDesc;
}
 8002bb4:	4800      	ldr	r0, [pc, #0]	; (8002bb8 <USBD_HID_GetFSCfgDesc+0x8>)
 8002bb6:	4770      	bx	lr
 8002bb8:	20000070 	.word	0x20000070

08002bbc <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgHSDesc);
 8002bbc:	2322      	movs	r3, #34	; 0x22
 8002bbe:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgHSDesc;
}
 8002bc0:	4800      	ldr	r0, [pc, #0]	; (8002bc4 <USBD_HID_GetHSCfgDesc+0x8>)
 8002bc2:	4770      	bx	lr
 8002bc4:	20000094 	.word	0x20000094

08002bc8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 8002bc8:	2322      	movs	r3, #34	; 0x22
 8002bca:	8003      	strh	r3, [r0, #0]
  return USBD_HID_OtherSpeedCfgDesc;
}
 8002bcc:	4800      	ldr	r0, [pc, #0]	; (8002bd0 <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
 8002bce:	4770      	bx	lr
 8002bd0:	200000d0 	.word	0x200000d0

08002bd4 <USBD_HID_DataIn>:
                              uint8_t epnum)
{

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002bd4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8002bd8:	2000      	movs	r0, #0
 8002bda:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002bdc:	4770      	bx	lr
	...

08002be0 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8002be0:	230a      	movs	r3, #10
 8002be2:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8002be4:	4800      	ldr	r0, [pc, #0]	; (8002be8 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8002be6:	4770      	bx	lr
 8002be8:	200000c4 	.word	0x200000c4

08002bec <USBD_HID_Setup>:
{
 8002bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8002bee:	2500      	movs	r5, #0
 8002bf0:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002bf4:	780d      	ldrb	r5, [r1, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8002bf6:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002bfa:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8002bfe:	4603      	mov	r3, r0
 8002c00:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c02:	d01e      	beq.n	8002c42 <USBD_HID_Setup+0x56>
 8002c04:	2d20      	cmp	r5, #32
 8002c06:	d152      	bne.n	8002cae <USBD_HID_Setup+0xc2>
    switch (req->bRequest)
 8002c08:	7849      	ldrb	r1, [r1, #1]
 8002c0a:	3902      	subs	r1, #2
 8002c0c:	2909      	cmp	r1, #9
 8002c0e:	d84c      	bhi.n	8002caa <USBD_HID_Setup+0xbe>
 8002c10:	e8df f001 	tbb	[pc, r1]
 8002c14:	4b4b0a14 	.word	0x4b4b0a14
 8002c18:	4b4b4b4b 	.word	0x4b4b4b4b
 8002c1c:	0510      	.short	0x0510
      hhid->Protocol = (uint8_t)(req->wValue);
 8002c1e:	7893      	ldrb	r3, [r2, #2]
 8002c20:	6023      	str	r3, [r4, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8002c22:	2000      	movs	r0, #0
}
 8002c24:	b003      	add	sp, #12
 8002c26:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4621      	mov	r1, r4
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fbd7 	bl	80033e0 <USBD_CtlSendData>
 8002c32:	e7f6      	b.n	8002c22 <USBD_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002c34:	8853      	ldrh	r3, [r2, #2]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	6063      	str	r3, [r4, #4]
 8002c3a:	e7f2      	b.n	8002c22 <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	1d21      	adds	r1, r4, #4
 8002c40:	e7f4      	b.n	8002c2c <USBD_HID_Setup+0x40>
    switch (req->bRequest)
 8002c42:	7849      	ldrb	r1, [r1, #1]
 8002c44:	290b      	cmp	r1, #11
 8002c46:	d830      	bhi.n	8002caa <USBD_HID_Setup+0xbe>
 8002c48:	e8df f001 	tbb	[pc, r1]
 8002c4c:	2f2f2f06 	.word	0x2f2f2f06
 8002c50:	2f0e2f2f 	.word	0x2f0e2f2f
 8002c54:	28202f2f 	.word	0x28202f2f
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c58:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8002c5c:	2903      	cmp	r1, #3
 8002c5e:	d124      	bne.n	8002caa <USBD_HID_Setup+0xbe>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8002c60:	2202      	movs	r2, #2
 8002c62:	f10d 0106 	add.w	r1, sp, #6
 8002c66:	e7e1      	b.n	8002c2c <USBD_HID_Setup+0x40>
      if(req->wValue >> 8 == HID_REPORT_DESC)
 8002c68:	8851      	ldrh	r1, [r2, #2]
 8002c6a:	0a09      	lsrs	r1, r1, #8
 8002c6c:	2922      	cmp	r1, #34	; 0x22
 8002c6e:	d105      	bne.n	8002c7c <USBD_HID_Setup+0x90>
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE , req->wLength);
 8002c70:	88d2      	ldrh	r2, [r2, #6]
        pbuf = HID_KEYBOARD_ReportDesc;
 8002c72:	4911      	ldr	r1, [pc, #68]	; (8002cb8 <USBD_HID_Setup+0xcc>)
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE , req->wLength);
 8002c74:	2a2d      	cmp	r2, #45	; 0x2d
 8002c76:	bf28      	it	cs
 8002c78:	222d      	movcs	r2, #45	; 0x2d
 8002c7a:	e7d7      	b.n	8002c2c <USBD_HID_Setup+0x40>
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8002c7c:	2921      	cmp	r1, #33	; 0x21
 8002c7e:	d114      	bne.n	8002caa <USBD_HID_Setup+0xbe>
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8002c80:	88d2      	ldrh	r2, [r2, #6]
        pbuf = USBD_HID_Desc;
 8002c82:	490e      	ldr	r1, [pc, #56]	; (8002cbc <USBD_HID_Setup+0xd0>)
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8002c84:	2a09      	cmp	r2, #9
 8002c86:	bf28      	it	cs
 8002c88:	2209      	movcs	r2, #9
 8002c8a:	e7cf      	b.n	8002c2c <USBD_HID_Setup+0x40>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c8c:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8002c90:	2903      	cmp	r1, #3
 8002c92:	d10a      	bne.n	8002caa <USBD_HID_Setup+0xbe>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8002c94:	2201      	movs	r2, #1
 8002c96:	f104 0108 	add.w	r1, r4, #8
 8002c9a:	e7c7      	b.n	8002c2c <USBD_HID_Setup+0x40>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002c9c:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8002ca0:	2903      	cmp	r1, #3
 8002ca2:	d102      	bne.n	8002caa <USBD_HID_Setup+0xbe>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8002ca4:	7893      	ldrb	r3, [r2, #2]
 8002ca6:	60a3      	str	r3, [r4, #8]
 8002ca8:	e7bb      	b.n	8002c22 <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8002cae:	f000 fb70 	bl	8003392 <USBD_CtlError>
    ret = USBD_FAIL;
 8002cb2:	2002      	movs	r0, #2
    break;
 8002cb4:	e7b6      	b.n	8002c24 <USBD_HID_Setup+0x38>
 8002cb6:	bf00      	nop
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	200000b8 	.word	0x200000b8

08002cc0 <USBD_HID_DeInit>:
{
 8002cc0:	b538      	push	{r3, r4, r5, lr}
 8002cc2:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8002cc4:	2181      	movs	r1, #129	; 0x81
 8002cc6:	f001 f82b 	bl	8003d20 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002cca:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002cce:	2500      	movs	r5, #0
 8002cd0:	62e5      	str	r5, [r4, #44]	; 0x2c
  if(pdev->pClassData != NULL)
 8002cd2:	b118      	cbz	r0, 8002cdc <USBD_HID_DeInit+0x1c>
    USBD_free(pdev->pClassData);
 8002cd4:	f001 f960 	bl	8003f98 <free>
    pdev->pClassData = NULL;
 8002cd8:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8002cdc:	2000      	movs	r0, #0
 8002cde:	bd38      	pop	{r3, r4, r5, pc}

08002ce0 <USBD_HID_Init>:
{
 8002ce0:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8002ce2:	2304      	movs	r3, #4
{
 8002ce4:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	2181      	movs	r1, #129	; 0x81
 8002cea:	f001 f809 	bl	8003d00 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8002cf2:	2010      	movs	r0, #16
 8002cf4:	f001 f948 	bl	8003f88 <malloc>
 8002cf8:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if (pdev->pClassData == NULL)
 8002cfc:	b118      	cbz	r0, 8002d06 <USBD_HID_Init+0x26>
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	7303      	strb	r3, [r0, #12]
  return USBD_OK;
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002d06:	2002      	movs	r0, #2
}
 8002d08:	bd10      	pop	{r4, pc}

08002d0a <USBD_HID_SendReport>:
{
 8002d0a:	b510      	push	{r4, lr}
 8002d0c:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8002d0e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002d12:	2a03      	cmp	r2, #3
 8002d14:	d109      	bne.n	8002d2a <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8002d16:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
    if(hhid->state == HID_IDLE)
 8002d1a:	7b22      	ldrb	r2, [r4, #12]
 8002d1c:	b92a      	cbnz	r2, 8002d2a <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8002d1e:	2201      	movs	r2, #1
 8002d20:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev,
 8002d22:	460a      	mov	r2, r1
 8002d24:	2181      	movs	r1, #129	; 0x81
 8002d26:	f001 f847 	bl	8003db8 <USBD_LL_Transmit>
}
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	bd10      	pop	{r4, pc}

08002d2e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002d2e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002d30:	b180      	cbz	r0, 8002d54 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002d32:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002d36:	b113      	cbz	r3, 8002d3e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002d3e:	b109      	cbz	r1, 8002d44 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002d40:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8002d4a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002d4c:	f000 ff9c 	bl	8003c88 <USBD_LL_Init>

  return USBD_OK;
 8002d50:	2000      	movs	r0, #0
 8002d52:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002d54:	2002      	movs	r0, #2
}
 8002d56:	bd08      	pop	{r3, pc}

08002d58 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002d58:	b119      	cbz	r1, 8002d62 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002d5a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8002d5e:	2000      	movs	r0, #0
 8002d60:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002d62:	2002      	movs	r0, #2
  }

  return status;
}
 8002d64:	4770      	bx	lr

08002d66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002d66:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002d68:	f000 ffbc 	bl	8003ce4 <USBD_LL_Start>

  return USBD_OK;
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	bd08      	pop	{r3, pc}

08002d70 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d70:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8002d72:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002d76:	b90b      	cbnz	r3, 8002d7c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002d78:	2002      	movs	r0, #2
 8002d7a:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4798      	blx	r3
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d1f9      	bne.n	8002d78 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002d84:	bd08      	pop	{r3, pc}

08002d86 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d86:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002d88:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4798      	blx	r3
  return USBD_OK;
}
 8002d90:	2000      	movs	r0, #0
 8002d92:	bd08      	pop	{r3, pc}

08002d94 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d98:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f000 fae4 	bl	800336a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002da2:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002da4:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8002da8:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8002dac:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8002db0:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8002db4:	f001 031f 	and.w	r3, r1, #31
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d00e      	beq.n	8002dda <USBD_LL_SetupStage+0x46>
 8002dbc:	d307      	bcc.n	8002dce <USBD_LL_SetupStage+0x3a>
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d010      	beq.n	8002de4 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002dc2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f000 ffb8 	bl	8003d3c <USBD_LL_StallEP>
    break;
 8002dcc:	e003      	b.n	8002dd6 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f000 f903 	bl	8002fdc <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002dda:	4629      	mov	r1, r5
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f000 fa17 	bl	8003210 <USBD_StdItfReq>
    break;
 8002de2:	e7f8      	b.n	8002dd6 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8002de4:	4629      	mov	r1, r5
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 fa37 	bl	800325a <USBD_StdEPReq>
    break;
 8002dec:	e7f3      	b.n	8002dd6 <USBD_LL_SetupStage+0x42>

08002dee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002dee:	b570      	push	{r4, r5, r6, lr}
 8002df0:	4605      	mov	r5, r0
 8002df2:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8002df4:	bb49      	cbnz	r1, 8002e4a <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002df6:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d11e      	bne.n	8002e3c <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8002dfe:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8002e02:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d90b      	bls.n	8002e22 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002e0a:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8002e0c:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002e0e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8002e12:	bf8c      	ite	hi
 8002e14:	b29a      	uxthhi	r2, r3
 8002e16:	b292      	uxthls	r2, r2
 8002e18:	4631      	mov	r1, r6
 8002e1a:	f000 faf6 	bl	800340a <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002e1e:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002e22:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	b123      	cbz	r3, 8002e34 <USBD_LL_DataOutStage+0x46>
 8002e2a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002e2e:	2a03      	cmp	r2, #3
 8002e30:	d100      	bne.n	8002e34 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002e32:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002e34:	4628      	mov	r0, r5
 8002e36:	f000 faf0 	bl	800341a <USBD_CtlSendStatus>
 8002e3a:	e7f0      	b.n	8002e1e <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d1ee      	bne.n	8002e1e <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002e40:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8002e44:	f000 ff7a 	bl	8003d3c <USBD_LL_StallEP>
 8002e48:	e7e9      	b.n	8002e1e <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 8002e4a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	b12b      	cbz	r3, 8002e5e <USBD_LL_DataOutStage+0x70>
 8002e52:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002e56:	2a03      	cmp	r2, #3
 8002e58:	d101      	bne.n	8002e5e <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002e5a:	4798      	blx	r3
 8002e5c:	e7df      	b.n	8002e1e <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002e5e:	2002      	movs	r0, #2
}
 8002e60:	bd70      	pop	{r4, r5, r6, pc}

08002e62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8002e62:	b570      	push	{r4, r5, r6, lr}
 8002e64:	4613      	mov	r3, r2
 8002e66:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8002e68:	460e      	mov	r6, r1
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d148      	bne.n	8002f00 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002e6e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8002e72:	2a02      	cmp	r2, #2
 8002e74:	d13d      	bne.n	8002ef2 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8002e76:	6a05      	ldr	r5, [r0, #32]
 8002e78:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002e7a:	4295      	cmp	r5, r2
 8002e7c:	d914      	bls.n	8002ea8 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002e7e:	1aaa      	subs	r2, r5, r2
 8002e80:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8002e82:	4619      	mov	r1, r3
 8002e84:	b292      	uxth	r2, r2
 8002e86:	f000 fab8 	bl	80033fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002e8a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4620      	mov	r0, r4
 8002e92:	f000 ff9f 	bl	8003dd4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002e96:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	f04f 0000 	mov.w	r0, #0
 8002ea0:	d13a      	bne.n	8002f18 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002ea2:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002ea8:	69c3      	ldr	r3, [r0, #28]
 8002eaa:	fbb3 f5f2 	udiv	r5, r3, r2
 8002eae:	fb02 3515 	mls	r5, r2, r5, r3
 8002eb2:	b965      	cbnz	r5, 8002ece <USBD_LL_DataInStage+0x6c>
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d80a      	bhi.n	8002ece <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002eb8:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d206      	bcs.n	8002ece <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	f000 fa9a 	bl	80033fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002ec6:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002eca:	462b      	mov	r3, r5
 8002ecc:	e7de      	b.n	8002e8c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002ece:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	b12b      	cbz	r3, 8002ee2 <USBD_LL_DataInStage+0x80>
 8002ed6:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8002eda:	2a03      	cmp	r2, #3
 8002edc:	d101      	bne.n	8002ee2 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8002ede:	4620      	mov	r0, r4
 8002ee0:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f000 ff29 	bl	8003d3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002eea:	4620      	mov	r0, r4
 8002eec:	f000 faa0 	bl	8003430 <USBD_CtlReceiveStatus>
 8002ef0:	e7d1      	b.n	8002e96 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002ef2:	f032 0304 	bics.w	r3, r2, #4
 8002ef6:	d1ce      	bne.n	8002e96 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	f000 ff1f 	bl	8003d3c <USBD_LL_StallEP>
 8002efe:	e7ca      	b.n	8002e96 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8002f00:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	b133      	cbz	r3, 8002f16 <USBD_LL_DataInStage+0xb4>
 8002f08:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002f0c:	2a03      	cmp	r2, #3
 8002f0e:	d102      	bne.n	8002f16 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8002f10:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002f12:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8002f16:	2002      	movs	r0, #2
}
 8002f18:	bd70      	pop	{r4, r5, r6, pc}

08002f1a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002f1a:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002f1c:	2200      	movs	r2, #0
{
 8002f1e:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002f20:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002f22:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f24:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002f26:	2340      	movs	r3, #64	; 0x40
 8002f28:	f000 feea 	bl	8003d00 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002f2c:	4633      	mov	r3, r6
 8002f2e:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002f30:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f34:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 fee0 	bl	8003d00 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002f40:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002f44:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8002f46:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f48:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f4a:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8002f4e:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8002f52:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002f54:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8002f58:	b123      	cbz	r3, 8002f64 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002f5a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8002f5e:	4620      	mov	r0, r4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002f64:	2000      	movs	r0, #0
 8002f66:	bd70      	pop	{r4, r5, r6, pc}

08002f68 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002f68:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	4770      	bx	lr

08002f6e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002f6e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8002f72:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002f76:	2304      	movs	r3, #4
 8002f78:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	4770      	bx	lr

08002f80 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8002f80:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8002f84:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	4770      	bx	lr

08002f8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002f8c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f8e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8002f92:	2a03      	cmp	r2, #3
 8002f94:	d104      	bne.n	8002fa0 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002f96:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	b103      	cbz	r3, 8002fa0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002f9e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	bd08      	pop	{r3, pc}

08002fa4 <USBD_LL_IsoINIncomplete>:
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	4770      	bx	lr

08002fa8 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8002fa8:	2000      	movs	r0, #0
 8002faa:	4770      	bx	lr

08002fac <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8002fac:	2000      	movs	r0, #0
 8002fae:	4770      	bx	lr

08002fb0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002fb0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002fb8:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8002fbc:	7901      	ldrb	r1, [r0, #4]
 8002fbe:	6852      	ldr	r2, [r2, #4]
 8002fc0:	4790      	blx	r2

  return USBD_OK;
}
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	bd08      	pop	{r3, pc}

08002fc6 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002fc6:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8002fc8:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002fca:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8002fcc:	f000 feb6 	bl	8003d3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	2100      	movs	r1, #0
}
 8002fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8002fd8:	f000 beb0 	b.w	8003d3c <USBD_LL_StallEP>

08002fdc <USBD_StdDevReq>:
{
 8002fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002fde:	780b      	ldrb	r3, [r1, #0]
 8002fe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002fe4:	2b20      	cmp	r3, #32
{
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002fea:	d014      	beq.n	8003016 <USBD_StdDevReq+0x3a>
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d012      	beq.n	8003016 <USBD_StdDevReq+0x3a>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 808d 	bne.w	8003110 <USBD_StdDevReq+0x134>
    switch (req->bRequest)
 8002ff6:	784b      	ldrb	r3, [r1, #1]
 8002ff8:	2b09      	cmp	r3, #9
 8002ffa:	f200 8088 	bhi.w	800310e <USBD_StdDevReq+0x132>
 8002ffe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003002:	00df      	.short	0x00df
 8003004:	008600f9 	.word	0x008600f9
 8003008:	008600f2 	.word	0x008600f2
 800300c:	0013007a 	.word	0x0013007a
 8003010:	00ca0086 	.word	0x00ca0086
 8003014:	0098      	.short	0x0098
    pdev->pClass->Setup(pdev, req);
 8003016:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800301a:	4629      	mov	r1, r5
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4620      	mov	r0, r4
 8003020:	4798      	blx	r3
}
 8003022:	2000      	movs	r0, #0
 8003024:	b003      	add	sp, #12
 8003026:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8003028:	884b      	ldrh	r3, [r1, #2]
 800302a:	0a1a      	lsrs	r2, r3, #8
 800302c:	3a01      	subs	r2, #1
 800302e:	2a06      	cmp	r2, #6
 8003030:	d86d      	bhi.n	800310e <USBD_StdDevReq+0x132>
 8003032:	e8df f002 	tbb	[pc, r2]
 8003036:	2004      	.short	0x2004
 8003038:	4d6c6c2d 	.word	0x4d6c6c2d
 800303c:	56          	.byte	0x56
 800303d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800303e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003042:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003044:	7c20      	ldrb	r0, [r4, #16]
 8003046:	f10d 0106 	add.w	r1, sp, #6
 800304a:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 800304c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003050:	b152      	cbz	r2, 8003068 <USBD_StdDevReq+0x8c>
 8003052:	88eb      	ldrh	r3, [r5, #6]
 8003054:	b143      	cbz	r3, 8003068 <USBD_StdDevReq+0x8c>
    len = MIN(len, req->wLength);
 8003056:	429a      	cmp	r2, r3
 8003058:	bf28      	it	cs
 800305a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800305c:	4601      	mov	r1, r0
 800305e:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8003060:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8003064:	f000 f9bc 	bl	80033e0 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8003068:	88eb      	ldrh	r3, [r5, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1d9      	bne.n	8003022 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 800306e:	4620      	mov	r0, r4
 8003070:	f000 f9d3 	bl	800341a <USBD_CtlSendStatus>
 8003074:	e7d5      	b.n	8003022 <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8003076:	7c02      	ldrb	r2, [r0, #16]
 8003078:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800307c:	b932      	cbnz	r2, 800308c <USBD_StdDevReq+0xb0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003080:	f10d 0006 	add.w	r0, sp, #6
 8003084:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003086:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003088:	7043      	strb	r3, [r0, #1]
 800308a:	e7df      	b.n	800304c <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	e7f7      	b.n	8003080 <USBD_StdDevReq+0xa4>
    switch ((uint8_t)(req->wValue))
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b05      	cmp	r3, #5
 8003094:	d83b      	bhi.n	800310e <USBD_StdDevReq+0x132>
 8003096:	e8df f003 	tbb	[pc, r3]
 800309a:	0703      	.short	0x0703
 800309c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80030a0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	e7cd      	b.n	8003044 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80030a8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	e7c9      	b.n	8003044 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80030b0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	e7c5      	b.n	8003044 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80030b8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	e7c1      	b.n	8003044 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80030c0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	e7bd      	b.n	8003044 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80030c8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	e7b9      	b.n	8003044 <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80030d0:	7c03      	ldrb	r3, [r0, #16]
 80030d2:	b9e3      	cbnz	r3, 800310e <USBD_StdDevReq+0x132>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80030d4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80030d8:	f10d 0006 	add.w	r0, sp, #6
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	4798      	blx	r3
 80030e0:	e7b4      	b.n	800304c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80030e2:	7c03      	ldrb	r3, [r0, #16]
 80030e4:	b99b      	cbnz	r3, 800310e <USBD_StdDevReq+0x132>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80030e6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80030ea:	f10d 0006 	add.w	r0, sp, #6
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80030f2:	2307      	movs	r3, #7
 80030f4:	e7c8      	b.n	8003088 <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80030f6:	888b      	ldrh	r3, [r1, #4]
 80030f8:	b94b      	cbnz	r3, 800310e <USBD_StdDevReq+0x132>
 80030fa:	88cb      	ldrh	r3, [r1, #6]
 80030fc:	b93b      	cbnz	r3, 800310e <USBD_StdDevReq+0x132>
 80030fe:	884d      	ldrh	r5, [r1, #2]
 8003100:	2d7f      	cmp	r5, #127	; 0x7f
 8003102:	d804      	bhi.n	800310e <USBD_StdDevReq+0x132>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003104:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003108:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800310a:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800310c:	d103      	bne.n	8003116 <USBD_StdDevReq+0x13a>
      USBD_CtlError(pdev, req);
 800310e:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003110:	f7ff ff59 	bl	8002fc6 <USBD_CtlError.constprop.1>
    break;
 8003114:	e785      	b.n	8003022 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8003116:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800311a:	f000 fe3f 	bl	8003d9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800311e:	4620      	mov	r0, r4
 8003120:	f000 f97b 	bl	800341a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003124:	b11d      	cbz	r5, 800312e <USBD_StdDevReq+0x152>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003126:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003128:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800312c:	e779      	b.n	8003022 <USBD_StdDevReq+0x46>
 800312e:	2301      	movs	r3, #1
 8003130:	e7fa      	b.n	8003128 <USBD_StdDevReq+0x14c>
  cfgidx = (uint8_t)(req->wValue);
 8003132:	7889      	ldrb	r1, [r1, #2]
 8003134:	4d35      	ldr	r5, [pc, #212]	; (800320c <USBD_StdDevReq+0x230>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003136:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003138:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800313a:	d8e8      	bhi.n	800310e <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 800313c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003140:	2b02      	cmp	r3, #2
 8003142:	d008      	beq.n	8003156 <USBD_StdDevReq+0x17a>
 8003144:	2b03      	cmp	r3, #3
 8003146:	d014      	beq.n	8003172 <USBD_StdDevReq+0x196>
      USBD_CtlError(pdev, req);
 8003148:	f7ff ff3d 	bl	8002fc6 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800314c:	7829      	ldrb	r1, [r5, #0]
 800314e:	4620      	mov	r0, r4
 8003150:	f7ff fe19 	bl	8002d86 <USBD_ClrClassConfig>
 8003154:	e765      	b.n	8003022 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8003156:	2900      	cmp	r1, #0
 8003158:	d089      	beq.n	800306e <USBD_StdDevReq+0x92>
        pdev->dev_config = cfgidx;
 800315a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800315c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800315e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003160:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff fe03 	bl	8002d70 <USBD_SetClassConfig>
 800316a:	2802      	cmp	r0, #2
 800316c:	f47f af7f 	bne.w	800306e <USBD_StdDevReq+0x92>
 8003170:	e7cd      	b.n	800310e <USBD_StdDevReq+0x132>
      if (cfgidx == 0U)
 8003172:	b931      	cbnz	r1, 8003182 <USBD_StdDevReq+0x1a6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003174:	2302      	movs	r3, #2
 8003176:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800317a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800317c:	f7ff fe03 	bl	8002d86 <USBD_ClrClassConfig>
 8003180:	e775      	b.n	800306e <USBD_StdDevReq+0x92>
      else if (cfgidx != pdev->dev_config)
 8003182:	6841      	ldr	r1, [r0, #4]
 8003184:	2901      	cmp	r1, #1
 8003186:	f43f af72 	beq.w	800306e <USBD_StdDevReq+0x92>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800318a:	b2c9      	uxtb	r1, r1
 800318c:	f7ff fdfb 	bl	8002d86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003190:	7829      	ldrb	r1, [r5, #0]
 8003192:	6061      	str	r1, [r4, #4]
 8003194:	e7e6      	b.n	8003164 <USBD_StdDevReq+0x188>
  if (req->wLength != 1U)
 8003196:	88ca      	ldrh	r2, [r1, #6]
 8003198:	2a01      	cmp	r2, #1
 800319a:	d1b8      	bne.n	800310e <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 800319c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0b4      	beq.n	800310e <USBD_StdDevReq+0x132>
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d903      	bls.n	80031b0 <USBD_StdDevReq+0x1d4>
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d1b0      	bne.n	800310e <USBD_StdDevReq+0x132>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80031ac:	1d01      	adds	r1, r0, #4
 80031ae:	e003      	b.n	80031b8 <USBD_StdDevReq+0x1dc>
      pdev->dev_default_config = 0U;
 80031b0:	4601      	mov	r1, r0
 80031b2:	2300      	movs	r3, #0
 80031b4:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 f911 	bl	80033e0 <USBD_CtlSendData>
 80031be:	e730      	b.n	8003022 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 80031c0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80031c4:	3b01      	subs	r3, #1
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d8a1      	bhi.n	800310e <USBD_StdDevReq+0x132>
    if(req->wLength != 0x2U)
 80031ca:	88cb      	ldrh	r3, [r1, #6]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d19e      	bne.n	800310e <USBD_StdDevReq+0x132>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80031d0:	2301      	movs	r3, #1
 80031d2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 80031d4:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 80031d8:	b10b      	cbz	r3, 80031de <USBD_StdDevReq+0x202>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80031da:	2303      	movs	r3, #3
 80031dc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80031de:	2202      	movs	r2, #2
 80031e0:	f104 010c 	add.w	r1, r4, #12
 80031e4:	e7e8      	b.n	80031b8 <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80031e6:	884b      	ldrh	r3, [r1, #2]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f47f af1a 	bne.w	8003022 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 80031ee:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80031f2:	e73c      	b.n	800306e <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 80031f4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80031f8:	3b01      	subs	r3, #1
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d887      	bhi.n	800310e <USBD_StdDevReq+0x132>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80031fe:	884b      	ldrh	r3, [r1, #2]
 8003200:	2b01      	cmp	r3, #1
 8003202:	f47f af0e 	bne.w	8003022 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	e7f1      	b.n	80031ee <USBD_StdDevReq+0x212>
 800320a:	bf00      	nop
 800320c:	200001e8 	.word	0x200001e8

08003210 <USBD_StdItfReq>:
{
 8003210:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003212:	780b      	ldrb	r3, [r1, #0]
 8003214:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003218:	2b20      	cmp	r3, #32
{
 800321a:	4604      	mov	r4, r0
 800321c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800321e:	d002      	beq.n	8003226 <USBD_StdItfReq+0x16>
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d000      	beq.n	8003226 <USBD_StdItfReq+0x16>
 8003224:	b9b3      	cbnz	r3, 8003254 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8003226:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800322a:	3b01      	subs	r3, #1
 800322c:	2b02      	cmp	r3, #2
 800322e:	d810      	bhi.n	8003252 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003230:	792b      	ldrb	r3, [r5, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d80d      	bhi.n	8003252 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003236:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800323a:	4629      	mov	r1, r5
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4620      	mov	r0, r4
 8003240:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003242:	88eb      	ldrh	r3, [r5, #6]
 8003244:	b91b      	cbnz	r3, 800324e <USBD_StdItfReq+0x3e>
 8003246:	b910      	cbnz	r0, 800324e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8003248:	4620      	mov	r0, r4
 800324a:	f000 f8e6 	bl	800341a <USBD_CtlSendStatus>
}
 800324e:	2000      	movs	r0, #0
 8003250:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8003252:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003254:	f7ff feb7 	bl	8002fc6 <USBD_CtlError.constprop.1>
    break;
 8003258:	e7f9      	b.n	800324e <USBD_StdItfReq+0x3e>

0800325a <USBD_StdEPReq>:
{
 800325a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800325c:	780a      	ldrb	r2, [r1, #0]
 800325e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003262:	2a20      	cmp	r2, #32
{
 8003264:	4604      	mov	r4, r0
 8003266:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003268:	d013      	beq.n	8003292 <USBD_StdEPReq+0x38>
 800326a:	2a40      	cmp	r2, #64	; 0x40
 800326c:	d011      	beq.n	8003292 <USBD_StdEPReq+0x38>
 800326e:	b96a      	cbnz	r2, 800328c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8003270:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003272:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8003274:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003276:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8003278:	d01f      	beq.n	80032ba <USBD_StdEPReq+0x60>
 800327a:	d335      	bcc.n	80032e8 <USBD_StdEPReq+0x8e>
 800327c:	2d03      	cmp	r5, #3
 800327e:	d105      	bne.n	800328c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8003280:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003284:	2a02      	cmp	r2, #2
 8003286:	d026      	beq.n	80032d6 <USBD_StdEPReq+0x7c>
 8003288:	2a03      	cmp	r2, #3
 800328a:	d00a      	beq.n	80032a2 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800328c:	f7ff fe9b 	bl	8002fc6 <USBD_CtlError.constprop.1>
    break;
 8003290:	e005      	b.n	800329e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8003292:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8003296:	4619      	mov	r1, r3
 8003298:	6892      	ldr	r2, [r2, #8]
 800329a:	4620      	mov	r0, r4
 800329c:	4790      	blx	r2
}
 800329e:	2000      	movs	r0, #0
 80032a0:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80032a2:	885a      	ldrh	r2, [r3, #2]
 80032a4:	b92a      	cbnz	r2, 80032b2 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80032a6:	064a      	lsls	r2, r1, #25
 80032a8:	d003      	beq.n	80032b2 <USBD_StdEPReq+0x58>
 80032aa:	88db      	ldrh	r3, [r3, #6]
 80032ac:	b90b      	cbnz	r3, 80032b2 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 80032ae:	f000 fd45 	bl	8003d3c <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80032b2:	4620      	mov	r0, r4
 80032b4:	f000 f8b1 	bl	800341a <USBD_CtlSendStatus>
        break;
 80032b8:	e7f1      	b.n	800329e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80032ba:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80032be:	2a02      	cmp	r2, #2
 80032c0:	d009      	beq.n	80032d6 <USBD_StdEPReq+0x7c>
 80032c2:	2a03      	cmp	r2, #3
 80032c4:	d1e2      	bne.n	800328c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80032c6:	885b      	ldrh	r3, [r3, #2]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e8      	bne.n	800329e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 80032cc:	064d      	lsls	r5, r1, #25
 80032ce:	d0f0      	beq.n	80032b2 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80032d0:	f000 fd42 	bl	8003d58 <USBD_LL_ClearStallEP>
 80032d4:	e7ed      	b.n	80032b2 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80032d6:	064b      	lsls	r3, r1, #25
 80032d8:	d017      	beq.n	800330a <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 80032da:	f000 fd2f 	bl	8003d3c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 fd2b 	bl	8003d3c <USBD_LL_StallEP>
 80032e6:	e7da      	b.n	800329e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80032e8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d00e      	beq.n	800330e <USBD_StdEPReq+0xb4>
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d1cb      	bne.n	800328c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80032f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032f8:	f04f 0314 	mov.w	r3, #20
 80032fc:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003300:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8003304:	d012      	beq.n	800332c <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003306:	6992      	ldr	r2, [r2, #24]
 8003308:	b9da      	cbnz	r2, 8003342 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800330a:	4620      	mov	r0, r4
 800330c:	e7be      	b.n	800328c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800330e:	0649      	lsls	r1, r1, #25
 8003310:	d1fb      	bne.n	800330a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003312:	0613      	lsls	r3, r2, #24
 8003314:	bf4c      	ite	mi
 8003316:	f100 0114 	addmi.w	r1, r0, #20
 800331a:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 800331e:	2300      	movs	r3, #0
 8003320:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003322:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003324:	4620      	mov	r0, r4
 8003326:	f000 f85b 	bl	80033e0 <USBD_CtlSendData>
          break;
 800332a:	e7b8      	b.n	800329e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800332c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8003330:	2a00      	cmp	r2, #0
 8003332:	d0ea      	beq.n	800330a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003334:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003338:	fb03 0505 	mla	r5, r3, r5, r0
 800333c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8003340:	e004      	b.n	800334c <USBD_StdEPReq+0xf2>
 8003342:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003346:	fb05 3503 	mla	r5, r5, r3, r3
 800334a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800334c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003350:	d103      	bne.n	800335a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8003352:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003354:	2202      	movs	r2, #2
 8003356:	4629      	mov	r1, r5
 8003358:	e7e4      	b.n	8003324 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800335a:	4620      	mov	r0, r4
 800335c:	f000 fd0a 	bl	8003d74 <USBD_LL_IsStallEP>
 8003360:	b108      	cbz	r0, 8003366 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8003362:	2301      	movs	r3, #1
 8003364:	e7f5      	b.n	8003352 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8003366:	6028      	str	r0, [r5, #0]
 8003368:	e7f4      	b.n	8003354 <USBD_StdEPReq+0xfa>

0800336a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800336a:	780b      	ldrb	r3, [r1, #0]
 800336c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800336e:	784b      	ldrb	r3, [r1, #1]
 8003370:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003372:	78ca      	ldrb	r2, [r1, #3]
 8003374:	788b      	ldrb	r3, [r1, #2]
 8003376:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800337a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800337c:	794a      	ldrb	r2, [r1, #5]
 800337e:	790b      	ldrb	r3, [r1, #4]
 8003380:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003384:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003386:	79ca      	ldrb	r2, [r1, #7]
 8003388:	798b      	ldrb	r3, [r1, #6]
 800338a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800338e:	80c3      	strh	r3, [r0, #6]
 8003390:	4770      	bx	lr

08003392 <USBD_CtlError>:
{
 8003392:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8003394:	2180      	movs	r1, #128	; 0x80
{
 8003396:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8003398:	f000 fcd0 	bl	8003d3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800339c:	4620      	mov	r0, r4
 800339e:	2100      	movs	r1, #0
}
 80033a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80033a4:	f000 bcca 	b.w	8003d3c <USBD_LL_StallEP>

080033a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80033a8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80033aa:	b188      	cbz	r0, 80033d0 <USBD_GetString+0x28>
 80033ac:	4605      	mov	r5, r0
 80033ae:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80033b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2c00      	cmp	r4, #0
 80033b8:	d1f9      	bne.n	80033ae <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80033c0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80033c2:	2303      	movs	r3, #3
 80033c4:	704b      	strb	r3, [r1, #1]
 80033c6:	3801      	subs	r0, #1
 80033c8:	2302      	movs	r3, #2
    while (*desc != '\0')
 80033ca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80033ce:	b905      	cbnz	r5, 80033d2 <USBD_GetString+0x2a>
 80033d0:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 80033d8:	3302      	adds	r3, #2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	548c      	strb	r4, [r1, r2]
 80033de:	e7f4      	b.n	80033ca <USBD_GetString+0x22>

080033e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80033e4:	2202      	movs	r2, #2
 80033e6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80033ea:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80033ec:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80033ee:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80033f0:	2100      	movs	r1, #0
 80033f2:	f000 fce1 	bl	8003db8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80033f6:	2000      	movs	r0, #0
 80033f8:	bd10      	pop	{r4, pc}

080033fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80033fa:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80033fc:	4613      	mov	r3, r2
 80033fe:	460a      	mov	r2, r1
 8003400:	2100      	movs	r1, #0
 8003402:	f000 fcd9 	bl	8003db8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003406:	2000      	movs	r0, #0
 8003408:	bd08      	pop	{r3, pc}

0800340a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800340a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800340c:	4613      	mov	r3, r2
 800340e:	460a      	mov	r2, r1
 8003410:	2100      	movs	r1, #0
 8003412:	f000 fcdf 	bl	8003dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003416:	2000      	movs	r0, #0
 8003418:	bd08      	pop	{r3, pc}

0800341a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800341a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800341c:	2304      	movs	r3, #4
 800341e:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003422:	2300      	movs	r3, #0
 8003424:	461a      	mov	r2, r3
 8003426:	4619      	mov	r1, r3
 8003428:	f000 fcc6 	bl	8003db8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800342c:	2000      	movs	r0, #0
 800342e:	bd08      	pop	{r3, pc}

08003430 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8003430:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003432:	2305      	movs	r3, #5
 8003434:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003438:	2300      	movs	r3, #0
 800343a:	461a      	mov	r2, r3
 800343c:	4619      	mov	r1, r3
 800343e:	f000 fcc9 	bl	8003dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003442:	2000      	movs	r0, #0
 8003444:	bd08      	pop	{r3, pc}
	...

08003448 <keypadReadStep>:
volatile uint32_t curKeypad=0;
volatile uint8_t keysChangedFlag=0;

void keypadReadStep(uint8_t * pollStage){
	uint8_t curIndex=0,curReading=0;
	curReading=(GPIOA->ODR&0xf0);
 8003448:	491f      	ldr	r1, [pc, #124]	; (80034c8 <keypadReadStep+0x80>)
 800344a:	694a      	ldr	r2, [r1, #20]
	curReading|=(GPIOA->IDR&0x0f);
 800344c:	690b      	ldr	r3, [r1, #16]
	uint8_t maskIndex=0,mask;
	curKeypad&= ~(0xf<<(*pollStage));
 800344e:	491f      	ldr	r1, [pc, #124]	; (80034cc <keypadReadStep+0x84>)
void keypadReadStep(uint8_t * pollStage){
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
	curReading=(GPIOA->ODR&0xf0);
 8003452:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	curKeypad&= ~(0xf<<(*pollStage));
 8003456:	7805      	ldrb	r5, [r0, #0]
		mask=1<<maskIndex;
		if(curReading&mask){//if that bit is set in the lower nibble

			curReading&=~mask;//unset that bit so its not read again
			curIndex=maskIndex+((curReading&0xf0)>>2);
			keysChangedFlag++;
 8003458:	4f1d      	ldr	r7, [pc, #116]	; (80034d0 <keypadReadStep+0x88>)
	curReading|=(GPIOA->IDR&0x0f);
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4313      	orrs	r3, r2
	curKeypad&= ~(0xf<<(*pollStage));
 8003460:	240f      	movs	r4, #15
 8003462:	680a      	ldr	r2, [r1, #0]
 8003464:	40ac      	lsls	r4, r5
 8003466:	ea22 0204 	bic.w	r2, r2, r4
 800346a:	600a      	str	r2, [r1, #0]
	while((curReading&0x0f)&&(maskIndex<4)){
 800346c:	2400      	movs	r4, #0
		mask=1<<maskIndex;
 800346e:	2601      	movs	r6, #1
	while((curReading&0x0f)&&(maskIndex<4)){
 8003470:	071d      	lsls	r5, r3, #28
 8003472:	b2e2      	uxtb	r2, r4
 8003474:	d001      	beq.n	800347a <keypadReadStep+0x32>
 8003476:	2c04      	cmp	r4, #4
 8003478:	d10d      	bne.n	8003496 <keypadReadStep+0x4e>
			//maps mask index as x and cur reading as y
			curKeypad|=(1<<curIndex);
		}
		maskIndex++;
	}
	(*pollStage)++;
 800347a:	7803      	ldrb	r3, [r0, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b2db      	uxtb	r3, r3

	if((*pollStage)==4){
		(*pollStage)=0;
 8003480:	2b04      	cmp	r3, #4
 8003482:	bf08      	it	eq
 8003484:	2300      	moveq	r3, #0
 8003486:	7003      	strb	r3, [r0, #0]
	}
	GPIOA->ODR=((1<<((*pollStage)+4)));
 8003488:	2201      	movs	r2, #1
 800348a:	3304      	adds	r3, #4
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <keypadReadStep+0x80>)
 8003492:	6153      	str	r3, [r2, #20]
 8003494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mask=1<<maskIndex;
 8003496:	fa06 f504 	lsl.w	r5, r6, r4
		if(curReading&mask){//if that bit is set in the lower nibble
 800349a:	422b      	tst	r3, r5
 800349c:	d011      	beq.n	80034c2 <keypadReadStep+0x7a>
			curReading&=~mask;//unset that bit so its not read again
 800349e:	ea23 0305 	bic.w	r3, r3, r5
			keysChangedFlag++;
 80034a2:	783d      	ldrb	r5, [r7, #0]
 80034a4:	3501      	adds	r5, #1
 80034a6:	b2ed      	uxtb	r5, r5
 80034a8:	703d      	strb	r5, [r7, #0]
			curIndex=maskIndex+((curReading&0xf0)>>2);
 80034aa:	109d      	asrs	r5, r3, #2
 80034ac:	f005 053c 	and.w	r5, r5, #60	; 0x3c
 80034b0:	442a      	add	r2, r5
			curKeypad|=(1<<curIndex);
 80034b2:	f8d1 e000 	ldr.w	lr, [r1]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	fa06 f202 	lsl.w	r2, r6, r2
 80034bc:	ea42 020e 	orr.w	r2, r2, lr
 80034c0:	600a      	str	r2, [r1, #0]
 80034c2:	3401      	adds	r4, #1
 80034c4:	e7d4      	b.n	8003470 <keypadReadStep+0x28>
 80034c6:	bf00      	nop
 80034c8:	40020000 	.word	0x40020000
 80034cc:	200001ec 	.word	0x200001ec
 80034d0:	200001f8 	.word	0x200001f8

080034d4 <logToUsbKeys>:

}

#define keysInPad 16

void logToUsbKeys(uint32_t bitsOfButtons){
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t len=0;
	uint8_t i=0;
	keyBoardHIDsub.MODIFIER=0;
 80034d6:	4c1d      	ldr	r4, [pc, #116]	; (800354c <logToUsbKeys+0x78>)
 80034d8:	2300      	movs	r3, #0
 80034da:	7023      	strb	r3, [r4, #0]
	uint8_t len=0;
 80034dc:	461a      	mov	r2, r3

	while(i<keysInPad){
		if(bitsOfButtons&(1<<i)){
 80034de:	2101      	movs	r1, #1
 80034e0:	fa01 f503 	lsl.w	r5, r1, r3
 80034e4:	4205      	tst	r5, r0
			len++;
 80034e6:	bf18      	it	ne
 80034e8:	3201      	addne	r2, #1
 80034ea:	f103 0301 	add.w	r3, r3, #1
 80034ee:	bf18      	it	ne
 80034f0:	b2d2      	uxtbne	r2, r2
	while(i<keysInPad){
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d1f4      	bne.n	80034e0 <logToUsbKeys+0xc>
 80034f6:	2a06      	cmp	r2, #6
 80034f8:	bf28      	it	cs
 80034fa:	2206      	movcs	r2, #6
 80034fc:	4611      	mov	r1, r2
		}
		i++;
	}
	uint8_t buttonIndex=0;
	if(len>6){len=6;}
	memset((&keyBoardHIDsub.KEYCODE1),0,6);
 80034fe:	4a14      	ldr	r2, [pc, #80]	; (8003550 <logToUsbKeys+0x7c>)
	for(i=0;i<len;){
		while(!(bitsOfButtons&(1<<buttonIndex))){
			buttonIndex++;
		}
		if(buttonIndex>=16){break;}
		curButton=buttonToChar[buttonIndex];
 8003500:	4f14      	ldr	r7, [pc, #80]	; (8003554 <logToUsbKeys+0x80>)
	memset((&keyBoardHIDsub.KEYCODE1),0,6);
 8003502:	2300      	movs	r3, #0
 8003504:	f8c4 3002 	str.w	r3, [r4, #2]
		while(!(bitsOfButtons&(1<<buttonIndex))){
 8003508:	2601      	movs	r6, #1
	memset((&keyBoardHIDsub.KEYCODE1),0,6);
 800350a:	8093      	strh	r3, [r2, #4]
	for(i=0;i<len;){
 800350c:	461a      	mov	r2, r3
 800350e:	428a      	cmp	r2, r1
 8003510:	d308      	bcc.n	8003524 <logToUsbKeys+0x50>
		}


	}

	USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8003512:	2208      	movs	r2, #8
 8003514:	490d      	ldr	r1, [pc, #52]	; (800354c <logToUsbKeys+0x78>)
 8003516:	4810      	ldr	r0, [pc, #64]	; (8003558 <logToUsbKeys+0x84>)

}
 8003518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800351c:	f7ff bbf5 	b.w	8002d0a <USBD_HID_SendReport>
			buttonIndex++;
 8003520:	3301      	adds	r3, #1
 8003522:	b2db      	uxtb	r3, r3
		while(!(bitsOfButtons&(1<<buttonIndex))){
 8003524:	fa06 f503 	lsl.w	r5, r6, r3
 8003528:	4205      	tst	r5, r0
 800352a:	d0f9      	beq.n	8003520 <logToUsbKeys+0x4c>
		if(buttonIndex>=16){break;}
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d8f0      	bhi.n	8003512 <logToUsbKeys+0x3e>
		curButton=buttonToChar[buttonIndex];
 8003530:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
		buttonIndex++;
 8003534:	3301      	adds	r3, #1
		curButton=buttonToChar[buttonIndex];
 8003536:	b2ad      	uxth	r5, r5
		buttonIndex++;
 8003538:	b2db      	uxtb	r3, r3
		if(curButton!=0){
 800353a:	2d00      	cmp	r5, #0
 800353c:	d0e7      	beq.n	800350e <logToUsbKeys+0x3a>
			(&keyBoardHIDsub.KEYCODE1)[i]=curButton&0xff;
 800353e:	eb04 0e02 	add.w	lr, r4, r2
			i++;
 8003542:	3201      	adds	r2, #1
			(&keyBoardHIDsub.KEYCODE1)[i]=curButton&0xff;
 8003544:	f88e 5002 	strb.w	r5, [lr, #2]
			i++;
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	e7e0      	b.n	800350e <logToUsbKeys+0x3a>
 800354c:	200001f0 	.word	0x200001f0
 8003550:	200001f2 	.word	0x200001f2
 8003554:	200000f2 	.word	0x200000f2
 8003558:	20000450 	.word	0x20000450

0800355c <debugSendStr>:

void debugSendStr(char * pStr){
 800355c:	3801      	subs	r0, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800355e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
	uint32_t i=0;
	while(pStr[i]!=0){
 8003562:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003566:	b902      	cbnz	r2, 800356a <debugSendStr+0xe>
		ITM_SendChar(pStr[i]);
		i++;

	}
}
 8003568:	4770      	bx	lr
 800356a:	f8d3 1e80 	ldr.w	r1, [r3, #3712]	; 0xe80
 800356e:	07c9      	lsls	r1, r1, #31
 8003570:	d5f7      	bpl.n	8003562 <debugSendStr+0x6>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003572:	f8d3 1e00 	ldr.w	r1, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003576:	07c9      	lsls	r1, r1, #31
 8003578:	d5f3      	bpl.n	8003562 <debugSendStr+0x6>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	b109      	cbz	r1, 8003582 <debugSendStr+0x26>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e7ef      	b.n	8003562 <debugSendStr+0x6>
      __NOP();
 8003582:	bf00      	nop
 8003584:	e7f9      	b.n	800357a <debugSendStr+0x1e>
	...

08003588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003588:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800358a:	2230      	movs	r2, #48	; 0x30
{
 800358c:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800358e:	eb0d 0002 	add.w	r0, sp, r2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003592:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003594:	2100      	movs	r1, #0
 8003596:	f000 fd07 	bl	8003fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800359a:	4622      	mov	r2, r4
 800359c:	2100      	movs	r1, #0
 800359e:	a802      	add	r0, sp, #8
 80035a0:	f000 fd02 	bl	8003fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035a4:	4622      	mov	r2, r4
 80035a6:	2100      	movs	r1, #0
 80035a8:	a807      	add	r0, sp, #28
 80035aa:	f000 fcfd 	bl	8003fa8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2500      	movs	r5, #0
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <SystemClock_Config+0xb4>)
 80035b2:	9500      	str	r5, [sp, #0]
 80035b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <SystemClock_Config+0xb8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80035c8:	9501      	str	r5, [sp, #4]
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80035e0:	2309      	movs	r3, #9
 80035e2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80035ea:	2301      	movs	r3, #1
 80035ec:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035f2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80035f4:	2319      	movs	r3, #25
 80035f6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 288;
 80035f8:	f44f 7390 	mov.w	r3, #288	; 0x120
 80035fc:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80035fe:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003600:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003602:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003604:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8003606:	2306      	movs	r3, #6
 8003608:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800360a:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800360c:	f7fd ffb0 	bl	8001570 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003610:	230f      	movs	r3, #15
 8003612:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003614:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800361a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800361c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800361e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003620:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003622:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003624:	f7fe f978 	bl	8001918 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003628:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362c:	a807      	add	r0, sp, #28
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800362e:	9407      	str	r4, [sp, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003630:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003632:	f7fe fa33 	bl	8001a9c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003636:	b019      	add	sp, #100	; 0x64
 8003638:	bd30      	pop	{r4, r5, pc}
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000

08003644 <main>:
{
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	b098      	sub	sp, #96	; 0x60
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003648:	2400      	movs	r4, #0
 800364a:	4d79      	ldr	r5, [pc, #484]	; (8003830 <main+0x1ec>)
  htim1.Instance = TIM1;
 800364c:	4e79      	ldr	r6, [pc, #484]	; (8003834 <main+0x1f0>)
  HAL_Init();
 800364e:	f7fc ff6d 	bl	800052c <HAL_Init>
  SystemClock_Config();
 8003652:	f7ff ff99 	bl	8003588 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003656:	2214      	movs	r2, #20
 8003658:	2100      	movs	r1, #0
 800365a:	a808      	add	r0, sp, #32
 800365c:	f000 fca4 	bl	8003fa8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003660:	9402      	str	r4, [sp, #8]
 8003662:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003664:	4874      	ldr	r0, [pc, #464]	; (8003838 <main+0x1f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	632b      	str	r3, [r5, #48]	; 0x30
 800366c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003676:	9403      	str	r4, [sp, #12]
 8003678:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367e:	632b      	str	r3, [r5, #48]	; 0x30
 8003680:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	9303      	str	r3, [sp, #12]
 8003688:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	9404      	str	r4, [sp, #16]
 800368c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	632b      	str	r3, [r5, #48]	; 0x30
 8003694:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800369e:	9405      	str	r4, [sp, #20]
 80036a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	632b      	str	r3, [r5, #48]	; 0x30
 80036a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80036aa:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80036ae:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80036b2:	21f0      	movs	r1, #240	; 0xf0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80036b6:	f7fd f9ff 	bl	8000ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036ba:	230f      	movs	r3, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036bc:	a908      	add	r1, sp, #32
 80036be:	485e      	ldr	r0, [pc, #376]	; (8003838 <main+0x1f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036c0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f7fd f929 	bl	800091c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036ca:	23f0      	movs	r3, #240	; 0xf0
 80036cc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	4859      	ldr	r0, [pc, #356]	; (8003838 <main+0x1f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f7fd f91f 	bl	800091c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036de:	9400      	str	r4, [sp, #0]
 80036e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80036e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036e6:	632b      	str	r3, [r5, #48]	; 0x30
 80036e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036f2:	9401      	str	r4, [sp, #4]
 80036f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80036f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036fa:	632b      	str	r3, [r5, #48]	; 0x30
 80036fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003702:	4622      	mov	r2, r4
 8003704:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003706:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003708:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 800370a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800370c:	f7fc ff60 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003710:	2011      	movs	r0, #17
 8003712:	f7fc ff91 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003716:	4622      	mov	r2, r4
 8003718:	4621      	mov	r1, r4
 800371a:	203a      	movs	r0, #58	; 0x3a
 800371c:	f7fc ff58 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003720:	203a      	movs	r0, #58	; 0x3a
 8003722:	f7fc ff89 	bl	8000638 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003726:	4621      	mov	r1, r4
 8003728:	4622      	mov	r2, r4
 800372a:	2046      	movs	r0, #70	; 0x46
 800372c:	f7fc ff50 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003730:	2046      	movs	r0, #70	; 0x46
 8003732:	f7fc ff81 	bl	8000638 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8003736:	4841      	ldr	r0, [pc, #260]	; (800383c <main+0x1f8>)
  hi2c1.Init.ClockSpeed = 400000;
 8003738:	4a41      	ldr	r2, [pc, #260]	; (8003840 <main+0x1fc>)
 800373a:	4b42      	ldr	r3, [pc, #264]	; (8003844 <main+0x200>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800373c:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 800373e:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003746:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8003748:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800374a:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800374c:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800374e:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003750:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003752:	f7fd f9b7 	bl	8000ac4 <HAL_I2C_Init>
  hrtc.Instance = RTC;
 8003756:	483c      	ldr	r0, [pc, #240]	; (8003848 <main+0x204>)
 8003758:	4b3c      	ldr	r3, [pc, #240]	; (800384c <main+0x208>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800375a:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800375c:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8003760:	237f      	movs	r3, #127	; 0x7f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003762:	2510      	movs	r5, #16
  hrtc.Init.AsynchPrediv = 127;
 8003764:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003766:	23ff      	movs	r3, #255	; 0xff
 8003768:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800376a:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800376c:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800376e:	f7fe fa65 	bl	8001c3c <HAL_RTC_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003772:	462a      	mov	r2, r5
 8003774:	4621      	mov	r1, r4
 8003776:	a808      	add	r0, sp, #32
 8003778:	f000 fc16 	bl	8003fa8 <memset>
  htim1.Init.Prescaler = 7200;
 800377c:	4934      	ldr	r1, [pc, #208]	; (8003850 <main+0x20c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377e:	60b4      	str	r4, [r6, #8]
  htim1.Init.Prescaler = 7200;
 8003780:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8003784:	e886 000a 	stmia.w	r6, {r1, r3}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003788:	4630      	mov	r0, r6
  htim1.Init.Period = 65535;
 800378a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378e:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003790:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8003792:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003794:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003796:	9406      	str	r4, [sp, #24]
 8003798:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800379a:	f7fe fafd 	bl	8001d98 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800379e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037a2:	a908      	add	r1, sp, #32
 80037a4:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037a6:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037a8:	f7fe fb1a 	bl	8001de0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037ac:	a906      	add	r1, sp, #24
 80037ae:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80037b0:	9506      	str	r5, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b2:	9407      	str	r4, [sp, #28]
  huart1.Instance = USART1;
 80037b4:	4d27      	ldr	r5, [pc, #156]	; (8003854 <main+0x210>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037b6:	f7fe fba7 	bl	8001f08 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 80037ba:	4827      	ldr	r0, [pc, #156]	; (8003858 <main+0x214>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037bc:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 80037be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80037c2:	e885 0009 	stmia.w	r5, {r0, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037c6:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037c8:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037ca:	616b      	str	r3, [r5, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037cc:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037ce:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037d0:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d2:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037d4:	f7fe fc68 	bl	80020a8 <HAL_UART_Init>
  MX_USB_DEVICE_Init();
 80037d8:	f000 f99a 	bl	8003b10 <MX_USB_DEVICE_Init>
  USBD_LL_Init(&hUsbDeviceFS);
 80037dc:	481f      	ldr	r0, [pc, #124]	; (800385c <main+0x218>)
 80037de:	f000 fa53 	bl	8003c88 <USBD_LL_Init>
  HAL_TIM_Base_Start(&htim1);
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7fe fa78 	bl	8001cd8 <HAL_TIM_Base_Start>
  HAL_UART_Init(&huart1);
 80037e8:	4628      	mov	r0, r5
 80037ea:	f7fe fc5d 	bl	80020a8 <HAL_UART_Init>
  memset(debugMsgBuf,0,64);
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	4621      	mov	r1, r4
 80037f2:	a808      	add	r0, sp, #32
 80037f4:	f000 fbd8 	bl	8003fa8 <memset>
  snprintf(debugMsgBuf,64,"booted up");
 80037f8:	4919      	ldr	r1, [pc, #100]	; (8003860 <main+0x21c>)
		  logToUsbKeys(curKeypad);
 80037fa:	4e1a      	ldr	r6, [pc, #104]	; (8003864 <main+0x220>)
  snprintf(debugMsgBuf,64,"booted up");
 80037fc:	a808      	add	r0, sp, #32
 80037fe:	f000 fc97 	bl	8004130 <strcpy>
  debugSendStr(debugMsgBuf);
 8003802:	a808      	add	r0, sp, #32
 8003804:	f7ff feaa 	bl	800355c <debugSendStr>
  HAL_UART_Transmit(&huart1,debugMsgBuf,10,10);
 8003808:	230a      	movs	r3, #10
 800380a:	4628      	mov	r0, r5
 800380c:	461a      	mov	r2, r3
 800380e:	a908      	add	r1, sp, #32
	  if(keysChangedFlag){
 8003810:	4d15      	ldr	r5, [pc, #84]	; (8003868 <main+0x224>)
  HAL_UART_Transmit(&huart1,debugMsgBuf,10,10);
 8003812:	f7fe fc77 	bl	8002104 <HAL_UART_Transmit>
uint8_t pollStage=0;
 8003816:	f88d 4018 	strb.w	r4, [sp, #24]
	  keypadReadStep(&pollStage);
 800381a:	a806      	add	r0, sp, #24
 800381c:	f7ff fe14 	bl	8003448 <keypadReadStep>
	  if(keysChangedFlag){
 8003820:	782b      	ldrb	r3, [r5, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f9      	beq.n	800381a <main+0x1d6>
		  logToUsbKeys(curKeypad);
 8003826:	6830      	ldr	r0, [r6, #0]
 8003828:	f7ff fe54 	bl	80034d4 <logToUsbKeys>
		  keysChangedFlag=0;
 800382c:	702c      	strb	r4, [r5, #0]
 800382e:	e7f4      	b.n	800381a <main+0x1d6>
 8003830:	40023800 	.word	0x40023800
 8003834:	20000410 	.word	0x20000410
 8003838:	40020000 	.word	0x40020000
 800383c:	2000026c 	.word	0x2000026c
 8003840:	40005400 	.word	0x40005400
 8003844:	00061a80 	.word	0x00061a80
 8003848:	200003f0 	.word	0x200003f0
 800384c:	40002800 	.word	0x40002800
 8003850:	40010000 	.word	0x40010000
 8003854:	200003b0 	.word	0x200003b0
 8003858:	40011000 	.word	0x40011000
 800385c:	20000450 	.word	0x20000450
 8003860:	08004164 	.word	0x08004164
 8003864:	200001ec 	.word	0x200001ec
 8003868:	200001f8 	.word	0x200001f8

0800386c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800386c:	4770      	bx	lr
	...

08003870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003870:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_MspInit+0x34>)
 8003874:	2100      	movs	r1, #0
 8003876:	9100      	str	r1, [sp, #0]
 8003878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
 8003880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003882:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003886:	9200      	str	r2, [sp, #0]
 8003888:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	9101      	str	r1, [sp, #4]
 800388c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800389e:	b002      	add	sp, #8
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	4606      	mov	r6, r0
 80038ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ae:	2214      	movs	r2, #20
 80038b0:	2100      	movs	r1, #0
 80038b2:	a803      	add	r0, sp, #12
 80038b4:	f000 fb78 	bl	8003fa8 <memset>
  if(hi2c->Instance==I2C1)
 80038b8:	6832      	ldr	r2, [r6, #0]
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_I2C_MspInit+0x94>)
 80038bc:	429a      	cmp	r2, r3
 80038be:	d13b      	bne.n	8003938 <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c0:	2500      	movs	r5, #0
 80038c2:	4c1f      	ldr	r4, [pc, #124]	; (8003940 <HAL_I2C_MspInit+0x98>)
 80038c4:	9501      	str	r5, [sp, #4]
 80038c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c8:	481e      	ldr	r0, [pc, #120]	; (8003944 <HAL_I2C_MspInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ca:	f043 0302 	orr.w	r3, r3, #2
 80038ce:	6323      	str	r3, [r4, #48]	; 0x30
 80038d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038da:	23c0      	movs	r3, #192	; 0xc0
 80038dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038de:	2312      	movs	r3, #18
 80038e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e2:	2301      	movs	r3, #1
 80038e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ea:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038ec:	2304      	movs	r3, #4
 80038ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f0:	f7fd f814 	bl	800091c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038f4:	9502      	str	r5, [sp, #8]
 80038f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038f8:	4913      	ldr	r1, [pc, #76]	; (8003948 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038fe:	6423      	str	r3, [r4, #64]	; 0x40
 8003900:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003902:	4c12      	ldr	r4, [pc, #72]	; (800394c <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003908:	9302      	str	r3, [sp, #8]
 800390a:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800390c:	60e5      	str	r5, [r4, #12]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800390e:	2340      	movs	r3, #64	; 0x40
 8003910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003914:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003918:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800391a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800391e:	6123      	str	r3, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003920:	6165      	str	r5, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003922:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003924:	61e5      	str	r5, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003926:	6225      	str	r5, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003928:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800392a:	f7fc febf 	bl	80006ac <HAL_DMA_Init>
 800392e:	b108      	cbz	r0, 8003934 <HAL_I2C_MspInit+0x8c>
    {
      Error_Handler();
 8003930:	f7ff ff9c 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003934:	6374      	str	r4, [r6, #52]	; 0x34
 8003936:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003938:	b008      	add	sp, #32
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	40005400 	.word	0x40005400
 8003940:	40023800 	.word	0x40023800
 8003944:	40020400 	.word	0x40020400
 8003948:	400260a0 	.word	0x400260a0
 800394c:	2000020c 	.word	0x2000020c

08003950 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003950:	6802      	ldr	r2, [r0, #0]
 8003952:	4b03      	ldr	r3, [pc, #12]	; (8003960 <HAL_RTC_MspInit+0x10>)
 8003954:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003956:	bf02      	ittt	eq
 8003958:	4b02      	ldreq	r3, [pc, #8]	; (8003964 <HAL_RTC_MspInit+0x14>)
 800395a:	2201      	moveq	r2, #1
 800395c:	601a      	streq	r2, [r3, #0]
 800395e:	4770      	bx	lr
 8003960:	40002800 	.word	0x40002800
 8003964:	42470e3c 	.word	0x42470e3c

08003968 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003968:	6802      	ldr	r2, [r0, #0]
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_TIM_Base_MspInit+0x28>)
 800396c:	429a      	cmp	r2, r3
{
 800396e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8003970:	d10b      	bne.n	800398a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_TIM_Base_MspInit+0x2c>)
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800398a:	b002      	add	sp, #8
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40010000 	.word	0x40010000
 8003994:	40023800 	.word	0x40023800

08003998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	4606      	mov	r6, r0
 800399c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399e:	2214      	movs	r2, #20
 80039a0:	2100      	movs	r1, #0
 80039a2:	a803      	add	r0, sp, #12
 80039a4:	f000 fb00 	bl	8003fa8 <memset>
  if(huart->Instance==USART1)
 80039a8:	6832      	ldr	r2, [r6, #0]
 80039aa:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <HAL_UART_MspInit+0xcc>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d157      	bne.n	8003a60 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039b0:	2500      	movs	r5, #0
 80039b2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80039b6:	9501      	str	r5, [sp, #4]
 80039b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ba:	482b      	ldr	r0, [pc, #172]	; (8003a68 <HAL_UART_MspInit+0xd0>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80039bc:	4c2b      	ldr	r4, [pc, #172]	; (8003a6c <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80039be:	f042 0210 	orr.w	r2, r2, #16
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
 80039c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c6:	f002 0210 	and.w	r2, r2, #16
 80039ca:	9201      	str	r2, [sp, #4]
 80039cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	9502      	str	r5, [sp, #8]
 80039d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ec:	2301      	movs	r3, #1
 80039ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f0:	2303      	movs	r3, #3
 80039f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039f6:	2307      	movs	r3, #7
 80039f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fa:	f7fc ff8f 	bl	800091c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <HAL_UART_MspInit+0xd8>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a00:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003a02:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8003a06:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003a0a:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a10:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a12:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a14:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a16:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003a18:	61e5      	str	r5, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a1a:	6225      	str	r5, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a1c:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003a1e:	f7fc fe45 	bl	80006ac <HAL_DMA_Init>
 8003a22:	b108      	cbz	r0, 8003a28 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 8003a24:	f7ff ff22 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003a28:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_UART_MspInit+0xdc>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003a2c:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003a2e:	4c12      	ldr	r4, [pc, #72]	; (8003a78 <HAL_UART_MspInit+0xe0>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a30:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8003a34:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003a38:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a40:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a42:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a44:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a46:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a48:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4a:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a4c:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a4e:	6223      	str	r3, [r4, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a50:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a52:	f7fc fe2b 	bl	80006ac <HAL_DMA_Init>
 8003a56:	b108      	cbz	r0, 8003a5c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003a58:	f7ff ff08 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a5c:	6334      	str	r4, [r6, #48]	; 0x30
 8003a5e:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a60:	b008      	add	sp, #32
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	40011000 	.word	0x40011000
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	20000350 	.word	0x20000350
 8003a70:	40026440 	.word	0x40026440
 8003a74:	400264b8 	.word	0x400264b8
 8003a78:	200002f0 	.word	0x200002f0

08003a7c <NMI_Handler>:
 8003a7c:	4770      	bx	lr

08003a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a7e:	e7fe      	b.n	8003a7e <HardFault_Handler>

08003a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a80:	e7fe      	b.n	8003a80 <MemManage_Handler>

08003a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a82:	e7fe      	b.n	8003a82 <BusFault_Handler>

08003a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a84:	e7fe      	b.n	8003a84 <UsageFault_Handler>

08003a86 <SVC_Handler>:
 8003a86:	4770      	bx	lr

08003a88 <DebugMon_Handler>:
 8003a88:	4770      	bx	lr

08003a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a8a:	4770      	bx	lr

08003a8c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a8c:	f7fc bd68 	b.w	8000560 <HAL_IncTick>

08003a90 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003a90:	4801      	ldr	r0, [pc, #4]	; (8003a98 <DMA1_Stream6_IRQHandler+0x8>)
 8003a92:	f7fc be89 	b.w	80007a8 <HAL_DMA_IRQHandler>
 8003a96:	bf00      	nop
 8003a98:	2000020c 	.word	0x2000020c

08003a9c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <DMA2_Stream2_IRQHandler+0x8>)
 8003a9e:	f7fc be83 	b.w	80007a8 <HAL_DMA_IRQHandler>
 8003aa2:	bf00      	nop
 8003aa4:	20000350 	.word	0x20000350

08003aa8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <OTG_FS_IRQHandler+0x8>)
 8003aaa:	f7fd b95d 	b.w	8000d68 <HAL_PCD_IRQHandler>
 8003aae:	bf00      	nop
 8003ab0:	200006ec 	.word	0x200006ec

08003ab4 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ab4:	4801      	ldr	r0, [pc, #4]	; (8003abc <DMA2_Stream7_IRQHandler+0x8>)
 8003ab6:	f7fc be77 	b.w	80007a8 <HAL_DMA_IRQHandler>
 8003aba:	bf00      	nop
 8003abc:	200002f0 	.word	0x200002f0

08003ac0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003ac0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <_sbrk+0x2c>)
 8003ac4:	6819      	ldr	r1, [r3, #0]
{
 8003ac6:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003ac8:	b909      	cbnz	r1, 8003ace <_sbrk+0xe>
		heap_end = &end;
 8003aca:	4909      	ldr	r1, [pc, #36]	; (8003af0 <_sbrk+0x30>)
 8003acc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003ace:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003ad0:	4669      	mov	r1, sp
 8003ad2:	4402      	add	r2, r0
 8003ad4:	428a      	cmp	r2, r1
 8003ad6:	d906      	bls.n	8003ae6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003ad8:	f000 fa2c 	bl	8003f34 <__errno>
 8003adc:	230c      	movs	r3, #12
 8003ade:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003ae6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003ae8:	bd08      	pop	{r3, pc}
 8003aea:	bf00      	nop
 8003aec:	200001fc 	.word	0x200001fc
 8003af0:	20000cf8 	.word	0x20000cf8

08003af4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SystemInit+0x18>)
 8003af6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003afa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003b10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003b12:	2200      	movs	r2, #0
 8003b14:	490b      	ldr	r1, [pc, #44]	; (8003b44 <MX_USB_DEVICE_Init+0x34>)
 8003b16:	480c      	ldr	r0, [pc, #48]	; (8003b48 <MX_USB_DEVICE_Init+0x38>)
 8003b18:	f7ff f909 	bl	8002d2e <USBD_Init>
 8003b1c:	b108      	cbz	r0, 8003b22 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003b1e:	f7ff fea5 	bl	800386c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8003b22:	490a      	ldr	r1, [pc, #40]	; (8003b4c <MX_USB_DEVICE_Init+0x3c>)
 8003b24:	4808      	ldr	r0, [pc, #32]	; (8003b48 <MX_USB_DEVICE_Init+0x38>)
 8003b26:	f7ff f917 	bl	8002d58 <USBD_RegisterClass>
 8003b2a:	b108      	cbz	r0, 8003b30 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003b2c:	f7ff fe9e 	bl	800386c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003b30:	4805      	ldr	r0, [pc, #20]	; (8003b48 <MX_USB_DEVICE_Init+0x38>)
 8003b32:	f7ff f918 	bl	8002d66 <USBD_Start>
 8003b36:	b118      	cbz	r0, 8003b40 <MX_USB_DEVICE_Init+0x30>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003b3c:	f7ff be96 	b.w	800386c <Error_Handler>
 8003b40:	bd08      	pop	{r3, pc}
 8003b42:	bf00      	nop
 8003b44:	20000118 	.word	0x20000118
 8003b48:	20000450 	.word	0x20000450
 8003b4c:	20000038 	.word	0x20000038

08003b50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b50:	b530      	push	{r4, r5, lr}
 8003b52:	4604      	mov	r4, r0
 8003b54:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b56:	2214      	movs	r2, #20
 8003b58:	2100      	movs	r1, #0
 8003b5a:	a803      	add	r0, sp, #12
 8003b5c:	f000 fa24 	bl	8003fa8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b66:	d12e      	bne.n	8003bc6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b68:	4c18      	ldr	r4, [pc, #96]	; (8003bcc <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6a:	4819      	ldr	r0, [pc, #100]	; (8003bd0 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6c:	2500      	movs	r5, #0
 8003b6e:	9501      	str	r5, [sp, #4]
 8003b70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6323      	str	r3, [r4, #48]	; 0x30
 8003b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003b82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003b86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b90:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b92:	230a      	movs	r3, #10
 8003b94:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b96:	f7fc fec1 	bl	800091c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ba2:	9502      	str	r5, [sp, #8]
 8003ba4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003baa:	6463      	str	r3, [r4, #68]	; 0x44
 8003bac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb2:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003bb4:	2043      	movs	r0, #67	; 0x43
 8003bb6:	462a      	mov	r2, r5
 8003bb8:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003bba:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003bbc:	f7fc fd08 	bl	80005d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003bc0:	2043      	movs	r0, #67	; 0x43
 8003bc2:	f7fc fd39 	bl	8000638 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003bc6:	b009      	add	sp, #36	; 0x24
 8003bc8:	bd30      	pop	{r4, r5, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020000 	.word	0x40020000

08003bd4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003bd4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8003bd8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003bdc:	f7ff b8da 	b.w	8002d94 <USBD_LL_SetupStage>

08003be0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003be0:	231c      	movs	r3, #28
 8003be2:	fb03 0301 	mla	r3, r3, r1, r0
 8003be6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003bea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003bee:	f7ff b8fe 	b.w	8002dee <USBD_LL_DataOutStage>

08003bf2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003bf2:	231c      	movs	r3, #28
 8003bf4:	fb03 0301 	mla	r3, r3, r1, r0
 8003bf8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bfe:	f7ff b930 	b.w	8002e62 <USBD_LL_DataInStage>

08003c02 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c02:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c06:	f7ff b9c1 	b.w	8002f8c <USBD_LL_SOF>

08003c0a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c0a:	68c3      	ldr	r3, [r0, #12]
 8003c0c:	2b02      	cmp	r3, #2
{ 
 8003c0e:	b510      	push	{r4, lr}
 8003c10:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003c12:	d001      	beq.n	8003c18 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003c14:	f7ff fe2a 	bl	800386c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003c18:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f7ff f9a3 	bl	8002f68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c22:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8003c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c2a:	f7ff b976 	b.w	8002f1a <USBD_LL_Reset>
	...

08003c30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c30:	b510      	push	{r4, lr}
 8003c32:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c34:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c38:	f7ff f999 	bl	8002f6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003c4a:	6a23      	ldr	r3, [r4, #32]
 8003c4c:	b123      	cbz	r3, 8003c58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c4e:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <HAL_PCD_SuspendCallback+0x2c>)
 8003c50:	6913      	ldr	r3, [r2, #16]
 8003c52:	f043 0306 	orr.w	r3, r3, #6
 8003c56:	6113      	str	r3, [r2, #16]
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c60:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c64:	f7ff b98c 	b.w	8002f80 <USBD_LL_Resume>

08003c68 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003c68:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c6c:	f7ff b99c 	b.w	8002fa8 <USBD_LL_IsoOUTIncomplete>

08003c70 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003c70:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c74:	f7ff b996 	b.w	8002fa4 <USBD_LL_IsoINIncomplete>

08003c78 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003c78:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c7c:	f7ff b996 	b.w	8002fac <USBD_LL_DevConnected>

08003c80 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003c80:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c84:	f7ff b994 	b.w	8002fb0 <USBD_LL_DevDisconnected>

08003c88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003c88:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003c8a:	7802      	ldrb	r2, [r0, #0]
 8003c8c:	bb32      	cbnz	r2, 8003cdc <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003c90:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8003c92:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8003c96:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003c9a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c9e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ca2:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ca4:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ca6:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003ca8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003caa:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003cac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003cae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003cb6:	f7fc ffb1 	bl	8000c1c <HAL_PCD_Init>
 8003cba:	b108      	cbz	r0, 8003cc0 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 8003cbc:	f7ff fdd6 	bl	800386c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	4807      	ldr	r0, [pc, #28]	; (8003ce0 <USBD_LL_Init+0x58>)
 8003cc4:	f7fd fc4e 	bl	8001564 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003cc8:	2240      	movs	r2, #64	; 0x40
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4804      	ldr	r0, [pc, #16]	; (8003ce0 <USBD_LL_Init+0x58>)
 8003cce:	f7fd fc28 	bl	8001522 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <USBD_LL_Init+0x58>)
 8003cd8:	f7fd fc23 	bl	8001522 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003cdc:	2000      	movs	r0, #0
 8003cde:	bd08      	pop	{r3, pc}
 8003ce0:	200006ec 	.word	0x200006ec

08003ce4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003ce4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003ce6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003cea:	f7fd f81e 	bl	8000d2a <HAL_PCD_Start>
 8003cee:	2803      	cmp	r0, #3
 8003cf0:	bf9a      	itte	ls
 8003cf2:	4b02      	ldrls	r3, [pc, #8]	; (8003cfc <USBD_LL_Start+0x18>)
 8003cf4:	5c18      	ldrbls	r0, [r3, r0]
 8003cf6:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8003cf8:	bd08      	pop	{r3, pc}
 8003cfa:	bf00      	nop
 8003cfc:	08004186 	.word	0x08004186

08003d00 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003d00:	b510      	push	{r4, lr}
 8003d02:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003d04:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d08:	4613      	mov	r3, r2
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	f7fd fafa 	bl	8001304 <HAL_PCD_EP_Open>
 8003d10:	2803      	cmp	r0, #3
 8003d12:	bf9a      	itte	ls
 8003d14:	4b01      	ldrls	r3, [pc, #4]	; (8003d1c <USBD_LL_OpenEP+0x1c>)
 8003d16:	5c18      	ldrbls	r0, [r3, r0]
 8003d18:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003d1a:	bd10      	pop	{r4, pc}
 8003d1c:	08004186 	.word	0x08004186

08003d20 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d22:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d26:	f7fd fb22 	bl	800136e <HAL_PCD_EP_Close>
 8003d2a:	2803      	cmp	r0, #3
 8003d2c:	bf9a      	itte	ls
 8003d2e:	4b02      	ldrls	r3, [pc, #8]	; (8003d38 <USBD_LL_CloseEP+0x18>)
 8003d30:	5c18      	ldrbls	r0, [r3, r0]
 8003d32:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8003d34:	bd08      	pop	{r3, pc}
 8003d36:	bf00      	nop
 8003d38:	08004186 	.word	0x08004186

08003d3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d3e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d42:	f7fd fb82 	bl	800144a <HAL_PCD_EP_SetStall>
 8003d46:	2803      	cmp	r0, #3
 8003d48:	bf9a      	itte	ls
 8003d4a:	4b02      	ldrls	r3, [pc, #8]	; (8003d54 <USBD_LL_StallEP+0x18>)
 8003d4c:	5c18      	ldrbls	r0, [r3, r0]
 8003d4e:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003d50:	bd08      	pop	{r3, pc}
 8003d52:	bf00      	nop
 8003d54:	08004186 	.word	0x08004186

08003d58 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d58:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003d5a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003d5e:	f7fd fbae 	bl	80014be <HAL_PCD_EP_ClrStall>
 8003d62:	2803      	cmp	r0, #3
 8003d64:	bf9a      	itte	ls
 8003d66:	4b02      	ldrls	r3, [pc, #8]	; (8003d70 <USBD_LL_ClearStallEP+0x18>)
 8003d68:	5c18      	ldrbls	r0, [r3, r0]
 8003d6a:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8003d6c:	bd08      	pop	{r3, pc}
 8003d6e:	bf00      	nop
 8003d70:	08004186 	.word	0x08004186

08003d74 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003d74:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d78:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003d7c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d80:	bf1b      	ittet	ne
 8003d82:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003d86:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d8a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d8e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d92:	bf08      	it	eq
 8003d94:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8003d98:	4770      	bx	lr
	...

08003d9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003d9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003d9e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003da2:	f7fd fa9b 	bl	80012dc <HAL_PCD_SetAddress>
 8003da6:	2803      	cmp	r0, #3
 8003da8:	bf9a      	itte	ls
 8003daa:	4b02      	ldrls	r3, [pc, #8]	; (8003db4 <USBD_LL_SetUSBAddress+0x18>)
 8003dac:	5c18      	ldrbls	r0, [r3, r0]
 8003dae:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003db0:	bd08      	pop	{r3, pc}
 8003db2:	bf00      	nop
 8003db4:	08004186 	.word	0x08004186

08003db8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003db8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003dba:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003dbe:	f7fd fb24 	bl	800140a <HAL_PCD_EP_Transmit>
 8003dc2:	2803      	cmp	r0, #3
 8003dc4:	bf9a      	itte	ls
 8003dc6:	4b02      	ldrls	r3, [pc, #8]	; (8003dd0 <USBD_LL_Transmit+0x18>)
 8003dc8:	5c18      	ldrbls	r0, [r3, r0]
 8003dca:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8003dcc:	bd08      	pop	{r3, pc}
 8003dce:	bf00      	nop
 8003dd0:	08004186 	.word	0x08004186

08003dd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003dd4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003dd6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003dda:	f7fd faf2 	bl	80013c2 <HAL_PCD_EP_Receive>
 8003dde:	2803      	cmp	r0, #3
 8003de0:	bf9a      	itte	ls
 8003de2:	4b02      	ldrls	r3, [pc, #8]	; (8003dec <USBD_LL_PrepareReceive+0x18>)
 8003de4:	5c18      	ldrbls	r0, [r3, r0]
 8003de6:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8003de8:	bd08      	pop	{r3, pc}
 8003dea:	bf00      	nop
 8003dec:	08004186 	.word	0x08004186

08003df0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003df0:	2312      	movs	r3, #18
 8003df2:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003df4:	4800      	ldr	r0, [pc, #0]	; (8003df8 <USBD_FS_DeviceDescriptor+0x8>)
 8003df6:	4770      	bx	lr
 8003df8:	20000134 	.word	0x20000134

08003dfc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003e00:	4800      	ldr	r0, [pc, #0]	; (8003e04 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003e02:	4770      	bx	lr
 8003e04:	20000148 	.word	0x20000148

08003e08 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003e08:	2300      	movs	r3, #0
{
 8003e0a:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003e0c:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8003e0e:	b2dc      	uxtb	r4, r3
 8003e10:	42a2      	cmp	r2, r4
 8003e12:	d800      	bhi.n	8003e16 <IntToUnicode+0xe>
  }
}
 8003e14:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8003e16:	0f04      	lsrs	r4, r0, #28
 8003e18:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8003e1a:	bf94      	ite	ls
 8003e1c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003e1e:	3437      	addhi	r4, #55	; 0x37
 8003e20:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003e24:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8003e28:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8003e2a:	7065      	strb	r5, [r4, #1]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	e7ee      	b.n	8003e0e <IntToUnicode+0x6>

08003e30 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003e30:	231a      	movs	r3, #26
{
 8003e32:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003e34:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <USBD_FS_SerialStrDescriptor+0x2c>)
 8003e38:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003e3a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003e3c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003e3e:	18c0      	adds	r0, r0, r3
 8003e40:	d00a      	beq.n	8003e58 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003e44:	4907      	ldr	r1, [pc, #28]	; (8003e64 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003e46:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003e48:	2208      	movs	r2, #8
 8003e4a:	f7ff ffdd 	bl	8003e08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003e4e:	2204      	movs	r2, #4
 8003e50:	4905      	ldr	r1, [pc, #20]	; (8003e68 <USBD_FS_SerialStrDescriptor+0x38>)
 8003e52:	4620      	mov	r0, r4
 8003e54:	f7ff ffd8 	bl	8003e08 <IntToUnicode>
}
 8003e58:	4804      	ldr	r0, [pc, #16]	; (8003e6c <USBD_FS_SerialStrDescriptor+0x3c>)
 8003e5a:	bd10      	pop	{r4, pc}
 8003e5c:	1fff7a10 	.word	0x1fff7a10
 8003e60:	1fff7a14 	.word	0x1fff7a14
 8003e64:	2000014e 	.word	0x2000014e
 8003e68:	2000015e 	.word	0x2000015e
 8003e6c:	2000014c 	.word	0x2000014c

08003e70 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003e70:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e72:	4c04      	ldr	r4, [pc, #16]	; (8003e84 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003e74:	4804      	ldr	r0, [pc, #16]	; (8003e88 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003e76:	460a      	mov	r2, r1
 8003e78:	4621      	mov	r1, r4
 8003e7a:	f7ff fa95 	bl	80033a8 <USBD_GetString>
}
 8003e7e:	4620      	mov	r0, r4
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	bf00      	nop
 8003e84:	20000af4 	.word	0x20000af4
 8003e88:	080041a3 	.word	0x080041a3

08003e8c <USBD_FS_ProductStrDescriptor>:
{
 8003e8c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e8e:	4c04      	ldr	r4, [pc, #16]	; (8003ea0 <USBD_FS_ProductStrDescriptor+0x14>)
 8003e90:	4804      	ldr	r0, [pc, #16]	; (8003ea4 <USBD_FS_ProductStrDescriptor+0x18>)
 8003e92:	460a      	mov	r2, r1
 8003e94:	4621      	mov	r1, r4
 8003e96:	f7ff fa87 	bl	80033a8 <USBD_GetString>
}
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	bd10      	pop	{r4, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000af4 	.word	0x20000af4
 8003ea4:	080041b6 	.word	0x080041b6

08003ea8 <USBD_FS_ConfigStrDescriptor>:
{
 8003ea8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003eaa:	4c04      	ldr	r4, [pc, #16]	; (8003ebc <USBD_FS_ConfigStrDescriptor+0x14>)
 8003eac:	4804      	ldr	r0, [pc, #16]	; (8003ec0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003eae:	460a      	mov	r2, r1
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	f7ff fa79 	bl	80033a8 <USBD_GetString>
}
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000af4 	.word	0x20000af4
 8003ec0:	0800418a 	.word	0x0800418a

08003ec4 <USBD_FS_InterfaceStrDescriptor>:
{
 8003ec4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003ec6:	4c04      	ldr	r4, [pc, #16]	; (8003ed8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003ec8:	4804      	ldr	r0, [pc, #16]	; (8003edc <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003eca:	460a      	mov	r2, r1
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f7ff fa6b 	bl	80033a8 <USBD_GetString>
}
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000af4 	.word	0x20000af4
 8003edc:	08004195 	.word	0x08004195

08003ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ee6:	e003      	b.n	8003ef0 <LoopCopyDataInit>

08003ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003eee:	3104      	adds	r1, #4

08003ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ef0:	480b      	ldr	r0, [pc, #44]	; (8003f20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ef8:	d3f6      	bcc.n	8003ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8003efa:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003efc:	e002      	b.n	8003f04 <LoopFillZerobss>

08003efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f00:	f842 3b04 	str.w	r3, [r2], #4

08003f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f08:	d3f9      	bcc.n	8003efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f0a:	f7ff fdf3 	bl	8003af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f0e:	f000 f817 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f12:	f7ff fb97 	bl	8003644 <main>
  bx  lr    
 8003f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f18:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8003f1c:	080041dc 	.word	0x080041dc
  ldr  r0, =_sdata
 8003f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f24:	200001cc 	.word	0x200001cc
  ldr  r2, =_sbss
 8003f28:	200001cc 	.word	0x200001cc
  ldr  r3, = _ebss
 8003f2c:	20000cf8 	.word	0x20000cf8

08003f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f30:	e7fe      	b.n	8003f30 <ADC_IRQHandler>
	...

08003f34 <__errno>:
 8003f34:	4b01      	ldr	r3, [pc, #4]	; (8003f3c <__errno+0x8>)
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000168 	.word	0x20000168

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4e0d      	ldr	r6, [pc, #52]	; (8003f78 <__libc_init_array+0x38>)
 8003f44:	4c0d      	ldr	r4, [pc, #52]	; (8003f7c <__libc_init_array+0x3c>)
 8003f46:	1ba4      	subs	r4, r4, r6
 8003f48:	10a4      	asrs	r4, r4, #2
 8003f4a:	2500      	movs	r5, #0
 8003f4c:	42a5      	cmp	r5, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	4e0b      	ldr	r6, [pc, #44]	; (8003f80 <__libc_init_array+0x40>)
 8003f52:	4c0c      	ldr	r4, [pc, #48]	; (8003f84 <__libc_init_array+0x44>)
 8003f54:	f000 f8f6 	bl	8004144 <_init>
 8003f58:	1ba4      	subs	r4, r4, r6
 8003f5a:	10a4      	asrs	r4, r4, #2
 8003f5c:	2500      	movs	r5, #0
 8003f5e:	42a5      	cmp	r5, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f68:	4798      	blx	r3
 8003f6a:	3501      	adds	r5, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f72:	4798      	blx	r3
 8003f74:	3501      	adds	r5, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	080041d4 	.word	0x080041d4
 8003f7c:	080041d4 	.word	0x080041d4
 8003f80:	080041d4 	.word	0x080041d4
 8003f84:	080041d8 	.word	0x080041d8

08003f88 <malloc>:
 8003f88:	4b02      	ldr	r3, [pc, #8]	; (8003f94 <malloc+0xc>)
 8003f8a:	4601      	mov	r1, r0
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	f000 b861 	b.w	8004054 <_malloc_r>
 8003f92:	bf00      	nop
 8003f94:	20000168 	.word	0x20000168

08003f98 <free>:
 8003f98:	4b02      	ldr	r3, [pc, #8]	; (8003fa4 <free+0xc>)
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	f000 b80b 	b.w	8003fb8 <_free_r>
 8003fa2:	bf00      	nop
 8003fa4:	20000168 	.word	0x20000168

08003fa8 <memset>:
 8003fa8:	4402      	add	r2, r0
 8003faa:	4603      	mov	r3, r0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <memset+0xa>
 8003fb0:	4770      	bx	lr
 8003fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb6:	e7f9      	b.n	8003fac <memset+0x4>

08003fb8 <_free_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4605      	mov	r5, r0
 8003fbc:	2900      	cmp	r1, #0
 8003fbe:	d045      	beq.n	800404c <_free_r+0x94>
 8003fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc4:	1f0c      	subs	r4, r1, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bfb8      	it	lt
 8003fca:	18e4      	addlt	r4, r4, r3
 8003fcc:	f000 f8b8 	bl	8004140 <__malloc_lock>
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <_free_r+0x98>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	b933      	cbnz	r3, 8003fe6 <_free_r+0x2e>
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6014      	str	r4, [r2, #0]
 8003fdc:	4628      	mov	r0, r5
 8003fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fe2:	f000 b8ae 	b.w	8004142 <__malloc_unlock>
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	d90c      	bls.n	8004004 <_free_r+0x4c>
 8003fea:	6821      	ldr	r1, [r4, #0]
 8003fec:	1862      	adds	r2, r4, r1
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	bf04      	itt	eq
 8003ff2:	681a      	ldreq	r2, [r3, #0]
 8003ff4:	685b      	ldreq	r3, [r3, #4]
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	bf04      	itt	eq
 8003ffa:	1852      	addeq	r2, r2, r1
 8003ffc:	6022      	streq	r2, [r4, #0]
 8003ffe:	6004      	str	r4, [r0, #0]
 8004000:	e7ec      	b.n	8003fdc <_free_r+0x24>
 8004002:	4613      	mov	r3, r2
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	b10a      	cbz	r2, 800400c <_free_r+0x54>
 8004008:	42a2      	cmp	r2, r4
 800400a:	d9fa      	bls.n	8004002 <_free_r+0x4a>
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	1858      	adds	r0, r3, r1
 8004010:	42a0      	cmp	r0, r4
 8004012:	d10b      	bne.n	800402c <_free_r+0x74>
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	4401      	add	r1, r0
 8004018:	1858      	adds	r0, r3, r1
 800401a:	4282      	cmp	r2, r0
 800401c:	6019      	str	r1, [r3, #0]
 800401e:	d1dd      	bne.n	8003fdc <_free_r+0x24>
 8004020:	6810      	ldr	r0, [r2, #0]
 8004022:	6852      	ldr	r2, [r2, #4]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	4401      	add	r1, r0
 8004028:	6019      	str	r1, [r3, #0]
 800402a:	e7d7      	b.n	8003fdc <_free_r+0x24>
 800402c:	d902      	bls.n	8004034 <_free_r+0x7c>
 800402e:	230c      	movs	r3, #12
 8004030:	602b      	str	r3, [r5, #0]
 8004032:	e7d3      	b.n	8003fdc <_free_r+0x24>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	1821      	adds	r1, r4, r0
 8004038:	428a      	cmp	r2, r1
 800403a:	bf04      	itt	eq
 800403c:	6811      	ldreq	r1, [r2, #0]
 800403e:	6852      	ldreq	r2, [r2, #4]
 8004040:	6062      	str	r2, [r4, #4]
 8004042:	bf04      	itt	eq
 8004044:	1809      	addeq	r1, r1, r0
 8004046:	6021      	streq	r1, [r4, #0]
 8004048:	605c      	str	r4, [r3, #4]
 800404a:	e7c7      	b.n	8003fdc <_free_r+0x24>
 800404c:	bd38      	pop	{r3, r4, r5, pc}
 800404e:	bf00      	nop
 8004050:	20000200 	.word	0x20000200

08004054 <_malloc_r>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	1ccd      	adds	r5, r1, #3
 8004058:	f025 0503 	bic.w	r5, r5, #3
 800405c:	3508      	adds	r5, #8
 800405e:	2d0c      	cmp	r5, #12
 8004060:	bf38      	it	cc
 8004062:	250c      	movcc	r5, #12
 8004064:	2d00      	cmp	r5, #0
 8004066:	4606      	mov	r6, r0
 8004068:	db01      	blt.n	800406e <_malloc_r+0x1a>
 800406a:	42a9      	cmp	r1, r5
 800406c:	d903      	bls.n	8004076 <_malloc_r+0x22>
 800406e:	230c      	movs	r3, #12
 8004070:	6033      	str	r3, [r6, #0]
 8004072:	2000      	movs	r0, #0
 8004074:	bd70      	pop	{r4, r5, r6, pc}
 8004076:	f000 f863 	bl	8004140 <__malloc_lock>
 800407a:	4a23      	ldr	r2, [pc, #140]	; (8004108 <_malloc_r+0xb4>)
 800407c:	6814      	ldr	r4, [r2, #0]
 800407e:	4621      	mov	r1, r4
 8004080:	b991      	cbnz	r1, 80040a8 <_malloc_r+0x54>
 8004082:	4c22      	ldr	r4, [pc, #136]	; (800410c <_malloc_r+0xb8>)
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	b91b      	cbnz	r3, 8004090 <_malloc_r+0x3c>
 8004088:	4630      	mov	r0, r6
 800408a:	f000 f841 	bl	8004110 <_sbrk_r>
 800408e:	6020      	str	r0, [r4, #0]
 8004090:	4629      	mov	r1, r5
 8004092:	4630      	mov	r0, r6
 8004094:	f000 f83c 	bl	8004110 <_sbrk_r>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d126      	bne.n	80040ea <_malloc_r+0x96>
 800409c:	230c      	movs	r3, #12
 800409e:	6033      	str	r3, [r6, #0]
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 f84e 	bl	8004142 <__malloc_unlock>
 80040a6:	e7e4      	b.n	8004072 <_malloc_r+0x1e>
 80040a8:	680b      	ldr	r3, [r1, #0]
 80040aa:	1b5b      	subs	r3, r3, r5
 80040ac:	d41a      	bmi.n	80040e4 <_malloc_r+0x90>
 80040ae:	2b0b      	cmp	r3, #11
 80040b0:	d90f      	bls.n	80040d2 <_malloc_r+0x7e>
 80040b2:	600b      	str	r3, [r1, #0]
 80040b4:	50cd      	str	r5, [r1, r3]
 80040b6:	18cc      	adds	r4, r1, r3
 80040b8:	4630      	mov	r0, r6
 80040ba:	f000 f842 	bl	8004142 <__malloc_unlock>
 80040be:	f104 000b 	add.w	r0, r4, #11
 80040c2:	1d23      	adds	r3, r4, #4
 80040c4:	f020 0007 	bic.w	r0, r0, #7
 80040c8:	1ac3      	subs	r3, r0, r3
 80040ca:	d01b      	beq.n	8004104 <_malloc_r+0xb0>
 80040cc:	425a      	negs	r2, r3
 80040ce:	50e2      	str	r2, [r4, r3]
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	428c      	cmp	r4, r1
 80040d4:	bf0d      	iteet	eq
 80040d6:	6863      	ldreq	r3, [r4, #4]
 80040d8:	684b      	ldrne	r3, [r1, #4]
 80040da:	6063      	strne	r3, [r4, #4]
 80040dc:	6013      	streq	r3, [r2, #0]
 80040de:	bf18      	it	ne
 80040e0:	460c      	movne	r4, r1
 80040e2:	e7e9      	b.n	80040b8 <_malloc_r+0x64>
 80040e4:	460c      	mov	r4, r1
 80040e6:	6849      	ldr	r1, [r1, #4]
 80040e8:	e7ca      	b.n	8004080 <_malloc_r+0x2c>
 80040ea:	1cc4      	adds	r4, r0, #3
 80040ec:	f024 0403 	bic.w	r4, r4, #3
 80040f0:	42a0      	cmp	r0, r4
 80040f2:	d005      	beq.n	8004100 <_malloc_r+0xac>
 80040f4:	1a21      	subs	r1, r4, r0
 80040f6:	4630      	mov	r0, r6
 80040f8:	f000 f80a 	bl	8004110 <_sbrk_r>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d0cd      	beq.n	800409c <_malloc_r+0x48>
 8004100:	6025      	str	r5, [r4, #0]
 8004102:	e7d9      	b.n	80040b8 <_malloc_r+0x64>
 8004104:	bd70      	pop	{r4, r5, r6, pc}
 8004106:	bf00      	nop
 8004108:	20000200 	.word	0x20000200
 800410c:	20000204 	.word	0x20000204

08004110 <_sbrk_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4c06      	ldr	r4, [pc, #24]	; (800412c <_sbrk_r+0x1c>)
 8004114:	2300      	movs	r3, #0
 8004116:	4605      	mov	r5, r0
 8004118:	4608      	mov	r0, r1
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	f7ff fcd0 	bl	8003ac0 <_sbrk>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d102      	bne.n	800412a <_sbrk_r+0x1a>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	b103      	cbz	r3, 800412a <_sbrk_r+0x1a>
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	bd38      	pop	{r3, r4, r5, pc}
 800412c:	20000cf4 	.word	0x20000cf4

08004130 <strcpy>:
 8004130:	4603      	mov	r3, r0
 8004132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004136:	f803 2b01 	strb.w	r2, [r3], #1
 800413a:	2a00      	cmp	r2, #0
 800413c:	d1f9      	bne.n	8004132 <strcpy+0x2>
 800413e:	4770      	bx	lr

08004140 <__malloc_lock>:
 8004140:	4770      	bx	lr

08004142 <__malloc_unlock>:
 8004142:	4770      	bx	lr

08004144 <_init>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr

08004150 <_fini>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr
